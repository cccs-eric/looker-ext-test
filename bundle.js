/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = window["webpackHotUpdate"];
/******/ 	window["webpackHotUpdate"] = // eslint-disable-next-line no-unused-vars
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) {
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if (parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadUpdateChunk(chunkId) {
/******/ 		var script = document.createElement("script");
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		if (null) script.crossOrigin = null;
/******/ 		document.head.appendChild(script);
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotDownloadManifest(requestTimeout) {
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if (typeof XMLHttpRequest === "undefined") {
/******/ 				return reject(new Error("No browser support"));
/******/ 			}
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch (err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if (request.readyState !== 4) return;
/******/ 				if (request.status === 0) {
/******/ 					// timeout
/******/ 					reject(
/******/ 						new Error("Manifest request to " + requestPath + " timed out.")
/******/ 					);
/******/ 				} else if (request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if (request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch (e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	var hotApplyOnUpdate = true;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentHash = "ad423881dfb94e3d395b";
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule;
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParents = [];
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = [];
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateRequire(moduleId) {
/******/ 		var me = installedModules[moduleId];
/******/ 		if (!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if (me.hot.active) {
/******/ 				if (installedModules[request]) {
/******/ 					if (installedModules[request].parents.indexOf(moduleId) === -1) {
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					}
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if (me.children.indexOf(request) === -1) {
/******/ 					me.children.push(request);
/******/ 				}
/******/ 			} else {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" +
/******/ 						request +
/******/ 						") from disposed module " +
/******/ 						moduleId
/******/ 				);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for (var name in __webpack_require__) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(__webpack_require__, name) &&
/******/ 				name !== "e" &&
/******/ 				name !== "t"
/******/ 			) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if (hotStatus === "ready") hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if (hotStatus === "prepare") {
/******/ 					if (!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if (hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		fn.t = function(value, mode) {
/******/ 			if (mode & 1) value = fn(value);
/******/ 			return __webpack_require__.t(value, mode & ~1);
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotCreateModule(moduleId) {
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if (dep === undefined) hot._selfAccepted = true;
/******/ 				else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if (dep === undefined) hot._selfDeclined = true;
/******/ 				else if (typeof dep === "object")
/******/ 					for (var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if (!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if (idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for (var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = +id + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/
/******/ 	function hotCheck(apply) {
/******/ 		if (hotStatus !== "idle") {
/******/ 			throw new Error("check() is only allowed in idle status");
/******/ 		}
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if (!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = "app";
/******/ 			// eslint-disable-next-line no-lone-blocks
/******/ 			{
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if (
/******/ 				hotStatus === "prepare" &&
/******/ 				hotChunksLoading === 0 &&
/******/ 				hotWaitingFiles === 0
/******/ 			) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/
/******/ 	// eslint-disable-next-line no-unused-vars
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) {
/******/ 		if (!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for (var moduleId in moreModules) {
/******/ 			if (Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if (--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if (!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if (!deferred) return;
/******/ 		if (hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve()
/******/ 				.then(function() {
/******/ 					return hotApply(hotApplyOnUpdate);
/******/ 				})
/******/ 				.then(
/******/ 					function(result) {
/******/ 						deferred.resolve(result);
/******/ 					},
/******/ 					function(err) {
/******/ 						deferred.reject(err);
/******/ 					}
/******/ 				);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for (var id in hotUpdate) {
/******/ 				if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/
/******/ 	function hotApply(options) {
/******/ 		if (hotStatus !== "ready")
/******/ 			throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/
/******/ 			var queue = outdatedModules.map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while (queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if (!module || module.hot._selfAccepted) continue;
/******/ 				if (module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if (module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for (var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if (!parent) continue;
/******/ 					if (parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 					if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if (!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/
/******/ 		function addAllToSet(a, b) {
/******/ 			for (var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if (a.indexOf(item) === -1) a.push(item);
/******/ 			}
/******/ 		}
/******/
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn(
/******/ 				"[HMR] unexpected require(" + result.moduleId + ") to disposed module"
/******/ 			);
/******/ 		};
/******/
/******/ 		for (var id in hotUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				/** @type {TODO} */
/******/ 				var result;
/******/ 				if (hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				/** @type {Error|false} */
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if (result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch (result.type) {
/******/ 					case "self-declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of self decline: " +
/******/ 									result.moduleId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if (options.onDeclined) options.onDeclined(result);
/******/ 						if (!options.ignoreDeclined)
/******/ 							abortError = new Error(
/******/ 								"Aborted because of declined dependency: " +
/******/ 									result.moduleId +
/******/ 									" in " +
/******/ 									result.parentId +
/******/ 									chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 						if (!options.ignoreUnaccepted)
/******/ 							abortError = new Error(
/******/ 								"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 							);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if (options.onAccepted) options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if (options.onDisposed) options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if (abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if (doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for (moduleId in result.outdatedDependencies) {
/******/ 						if (
/******/ 							Object.prototype.hasOwnProperty.call(
/******/ 								result.outdatedDependencies,
/******/ 								moduleId
/******/ 							)
/******/ 						) {
/******/ 							if (!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(
/******/ 								outdatedDependencies[moduleId],
/******/ 								result.outdatedDependencies[moduleId]
/******/ 							);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if (doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for (i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if (
/******/ 				installedModules[moduleId] &&
/******/ 				installedModules[moduleId].hot._selfAccepted &&
/******/ 				// removed self-accepted modules should not be required
/******/ 				appliedUpdate[moduleId] !== warnUnexpectedRequire
/******/ 			) {
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if (hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while (queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if (!module) continue;
/******/
/******/ 			var data = {};
/******/
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for (j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/
/******/ 			// remove "parents" references from all children
/******/ 			for (j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if (!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if (idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if (idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Now in "apply" phase
/******/ 		hotSetStatus("apply");
/******/
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/
/******/ 		// insert new code
/******/ 		for (moduleId in appliedUpdate) {
/******/ 			if (Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for (moduleId in outdatedDependencies) {
/******/ 			if (
/******/ 				Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)
/******/ 			) {
/******/ 				module = installedModules[moduleId];
/******/ 				if (module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for (i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if (cb) {
/******/ 							if (callbacks.indexOf(cb) !== -1) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for (i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch (err) {
/******/ 							if (options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if (!options.ignoreErrored) {
/******/ 								if (!error) error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// Load self accepted modules
/******/ 		for (i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch (err) {
/******/ 				if (typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch (err2) {
/******/ 						if (options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if (!options.ignoreErrored) {
/******/ 							if (!error) error = err2;
/******/ 						}
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if (options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if (!options.ignoreErrored) {
/******/ 						if (!error) error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if (error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:8080/";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(0)(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/@looker/chatty/lib/client.js":
/*!***************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/client.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var client_messages_1 = __webpack_require__(/*! ./client_messages */ "./node_modules/@looker/chatty/lib/client_messages.js");
var host_messages_1 = __webpack_require__(/*! ./host_messages */ "./node_modules/@looker/chatty/lib/host_messages.js");
__webpack_require__(/*! es6-promise/auto */ "./node_modules/es6-promise/auto.js"); // Polyfill only browsers without Promises
var debugLib = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
/**
 * @private
 * Client connection status
 */
var ChattyClientStates;
(function (ChattyClientStates) {
    ChattyClientStates[ChattyClientStates["Connecting"] = 0] = "Connecting";
    ChattyClientStates[ChattyClientStates["Syn"] = 1] = "Syn";
    ChattyClientStates[ChattyClientStates["Connected"] = 2] = "Connected";
})(ChattyClientStates = exports.ChattyClientStates || (exports.ChattyClientStates = {}));
/**
 * The client object for an iframe. The user should not create this object directly, it
 * is returned by the [[ChattyClientBuilder.build]] method.
 */
var ChattyClient = /** @class */ (function () {
    /**
     * @param builder The client builder that is responsible for constructing this object.
     * @hidden
     */
    function ChattyClient(builder) {
        this._clientWindow = window;
        this._connection = null;
        this._hostWindow = this._clientWindow.parent;
        this._state = ChattyClientStates.Connecting;
        this._sequence = 0;
        this._receivers = {};
        this._handlers = builder.handlers;
        this._targetOrigin = builder.targetOrigin;
        this._defaultTimeout = builder.defaultTimeout;
        this._channel = new MessageChannel();
    }
    Object.defineProperty(ChattyClient.prototype, "connection", {
        /**
         * @returns a Promise to an object that resolves when the host has acknowledged the connection.
         */
        get: function () {
            return this._connection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChattyClient.prototype, "isConnected", {
        /**
         * @returns a flag indicating whether the client has successfully connected to the host.
         */
        get: function () {
            return this._state === ChattyClientStates.Connected;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Connects to the host window.
     * @returns a Promise to an object that resolves when the host has acknowledged the connection. The
     * object implements the [[ChattyClientConnection]] interface that can be used to talk to the host.
     */
    ChattyClient.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this._connection)
                    return [2 /*return*/, this._connection];
                this._connection = new Promise(function (resolve, reject) {
                    _this._channel.port1.onmessage = function (evt) {
                        ChattyClient._debug('received', evt.data.action, evt.data.data);
                        switch (evt.data.action) {
                            case host_messages_1.ChattyHostMessages.SynAck:
                                _this._state = ChattyClientStates.Connected;
                                _this.sendMsg(client_messages_1.ChattyClientMessages.Ack);
                                resolve({
                                    send: function (eventName) {
                                        var payload = [];
                                        for (var _i = 1; _i < arguments.length; _i++) {
                                            payload[_i - 1] = arguments[_i];
                                        }
                                        _this.sendMsg(client_messages_1.ChattyClientMessages.Message, { eventName: eventName, payload: payload });
                                    },
                                    sendAndReceive: function (eventName) {
                                        var payload = [];
                                        for (var _i = 1; _i < arguments.length; _i++) {
                                            payload[_i - 1] = arguments[_i];
                                        }
                                        return __awaiter(_this, void 0, void 0, function () {
                                            var sequence;
                                            var _this = this;
                                            return __generator(this, function (_a) {
                                                sequence = ++this._sequence;
                                                this.sendMsg(client_messages_1.ChattyClientMessages.MessageWithResponse, { eventName: eventName, payload: payload }, sequence);
                                                return [2 /*return*/, new Promise(function (resolve, reject) {
                                                        var timeoutId;
                                                        if (_this._defaultTimeout > -1) {
                                                            timeoutId = setTimeout(function () {
                                                                delete _this._receivers[sequence];
                                                                reject(new Error('Timeout'));
                                                            }, _this._defaultTimeout);
                                                        }
                                                        _this._receivers[sequence] = { resolve: resolve, reject: reject, timeoutId: timeoutId };
                                                    })];
                                            });
                                        });
                                    }
                                });
                                break;
                            case host_messages_1.ChattyHostMessages.Message:
                                if (_this._handlers[evt.data.data.eventName]) {
                                    _this._handlers[evt.data.data.eventName].forEach(function (fn) { return fn.apply(_this, evt.data.data.payload); });
                                }
                                break;
                            case host_messages_1.ChattyHostMessages.MessageWithResponse:
                                {
                                    var _a = evt.data.data, eventName_1 = _a.eventName, payload_1 = _a.payload, sequence_1 = _a.sequence;
                                    var results = [];
                                    if (_this._handlers[eventName_1]) {
                                        results = _this._handlers[eventName_1].map(function (fn) { return fn.apply(_this, payload_1); });
                                    }
                                    Promise.all(results)
                                        .then(function (resolvedResults) {
                                        _this.sendMsg(client_messages_1.ChattyClientMessages.Response, { eventName: eventName_1, payload: resolvedResults }, sequence_1);
                                    })
                                        .catch(function (error) {
                                        _this.sendMsg(client_messages_1.ChattyClientMessages.ResponseError, { eventName: eventName_1, payload: error }, sequence_1);
                                    });
                                }
                                break;
                            case host_messages_1.ChattyHostMessages.Response:
                                var receiver = _this._receivers[evt.data.data.sequence];
                                if (receiver) {
                                    delete _this._receivers[evt.data.data.sequence];
                                    if (receiver.timeoutId) {
                                        clearTimeout(receiver.timeoutId);
                                    }
                                    receiver.resolve(evt.data.data.payload);
                                }
                                break;
                            case host_messages_1.ChattyHostMessages.ResponseError:
                                {
                                    var receiver_1 = _this._receivers[evt.data.data.sequence];
                                    if (receiver_1) {
                                        delete _this._receivers[evt.data.data.sequence];
                                        if (receiver_1.timeoutId) {
                                            clearTimeout(receiver_1.timeoutId);
                                        }
                                        receiver_1.reject(evt.data.data.payload);
                                    }
                                }
                                break;
                        }
                    };
                    _this.initiateHandshake();
                });
                return [2 /*return*/, this._connection];
            });
        });
    };
    ChattyClient.prototype.initiateHandshake = function () {
        ChattyClient._debug('connecting to', this._targetOrigin);
        this._hostWindow.postMessage({
            action: client_messages_1.ChattyClientMessages.Syn
        }, this._targetOrigin, [this._channel.port2]);
        this._state = ChattyClientStates.Syn;
    };
    ChattyClient.prototype.sendMsg = function (action, data, sequence) {
        if (data === void 0) { data = {}; }
        var sequenceData = sequence ? { sequence: sequence } : {};
        var dataWithSequence = __assign({}, data, sequenceData);
        ChattyClient._debug('sending', action, dataWithSequence);
        this._channel.port1.postMessage({ action: action, data: dataWithSequence });
    };
    ChattyClient._debug = debugLib('looker:chatty:client');
    return ChattyClient;
}());
exports.ChattyClient = ChattyClient;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/client.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/client.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/chatty/lib/client_builder.js":
/*!***********************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/client_builder.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var client_1 = __webpack_require__(/*! ./client */ "./node_modules/@looker/chatty/lib/client.js");
/**
 * Provides methods to define the properties of a [[ChattyClient]]
 */
var ChattyClientBuilder = /** @class */ (function () {
    function ChattyClientBuilder() {
        this._targetOrigin = '*';
        this._handlers = {};
        this._defaultTimeout = 30000;
    }
    Object.defineProperty(ChattyClientBuilder.prototype, "targetOrigin", {
        get: function () {
            return this._targetOrigin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChattyClientBuilder.prototype, "handlers", {
        get: function () {
            return this._handlers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChattyClientBuilder.prototype, "defaultTimeout", {
        get: function () {
            return this._defaultTimeout;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Removes an event handler to the client.
     *
     * @param name Event name
     * @param fn Callback function to remove
     * @returns the client builder
     */
    ChattyClientBuilder.prototype.off = function (name, fn) {
        if (this._handlers[name]) {
            this._handlers[name] = this._handlers[name].filter(function (handler) { return handler !== fn; });
        }
    };
    /**
     * Adds an event handler to the client.
     *
     * @param name Event name to which to listen.
     * @param fn Callback function that is invoked when the event
     * is received, and accepts any parameters that were passed with the event.
     * If the event received is sent using [[ChattyHostConnection.sendAndReceive]], its return value is
     * included in the array that will be passed to the resolved promise.
     * @returns the client builder
     */
    ChattyClientBuilder.prototype.on = function (name, fn) {
        this._handlers[name] = this._handlers[name] || [];
        this._handlers[name].push(fn);
        return this;
    };
    /**
     * Sets the default period of time a [[ChattyClientConnection.sendAndReceive]] message will wait.
     * Use a negative number to wait indefinitely.
     * The default is 30000ms
     *
     * @param timeout in milliseconds
     * @returns the client builder
     */
    ChattyClientBuilder.prototype.withDefaultTimeout = function (timeout) {
        this._defaultTimeout = timeout;
        return this;
    };
    /**
     * Optional. Sets the target origin parameter used to communicate with the host. Default
     * is '*'. If possible it should be set the the host window's origin.
     *
     * @param targetOrigin targetOrigin to use with postMessage()
     * @returns the client builder
     */
    ChattyClientBuilder.prototype.withTargetOrigin = function (targetOrigin) {
        this._targetOrigin = targetOrigin;
        return this;
    };
    /**
     * Builds a [[ChattyClient]] with the provided properties.
     * @returns a new Chatty client.
     */
    ChattyClientBuilder.prototype.build = function () {
        return new client_1.ChattyClient(this);
    };
    return ChattyClientBuilder;
}());
exports.ChattyClientBuilder = ChattyClientBuilder;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/client_builder.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/client_builder.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/chatty/lib/client_messages.js":
/*!************************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/client_messages.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The recognized set of events that are sent from the client to the host.
 * @private
 */
var ChattyClientMessages;
(function (ChattyClientMessages) {
    /** First part of handshake message */
    ChattyClientMessages[ChattyClientMessages["Syn"] = 0] = "Syn";
    /** Final part of handshake message */
    ChattyClientMessages[ChattyClientMessages["Ack"] = 1] = "Ack";
    /** Normal message */
    ChattyClientMessages[ChattyClientMessages["Message"] = 2] = "Message";
    /** Message that expects a response */
    ChattyClientMessages[ChattyClientMessages["MessageWithResponse"] = 3] = "MessageWithResponse";
    /** Response */
    ChattyClientMessages[ChattyClientMessages["Response"] = 4] = "Response";
    /** Asynchronous error response */
    ChattyClientMessages[ChattyClientMessages["ResponseError"] = 5] = "ResponseError";
})(ChattyClientMessages = exports.ChattyClientMessages || (exports.ChattyClientMessages = {}));

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/client_messages.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/client_messages.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/chatty/lib/host.js":
/*!*************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/host.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var client_messages_1 = __webpack_require__(/*! ./client_messages */ "./node_modules/@looker/chatty/lib/client_messages.js");
var host_messages_1 = __webpack_require__(/*! ./host_messages */ "./node_modules/@looker/chatty/lib/host_messages.js");
__webpack_require__(/*! es6-promise/auto */ "./node_modules/es6-promise/auto.js"); // Polyfill only browsers without Promises
var debugLib = __webpack_require__(/*! debug */ "./node_modules/debug/src/browser.js");
/**
 * @private
 * Host connection status
 */
var ChattyHostStates;
(function (ChattyHostStates) {
    ChattyHostStates[ChattyHostStates["Connecting"] = 0] = "Connecting";
    ChattyHostStates[ChattyHostStates["SynAck"] = 1] = "SynAck";
    ChattyHostStates[ChattyHostStates["Connected"] = 2] = "Connected";
})(ChattyHostStates = exports.ChattyHostStates || (exports.ChattyHostStates = {}));
/**
 * The host object for an iframe. The user should not create this object directly, it
 * is returned by the [[ChattyHostBuilder.build]] method.
 */
var ChattyHost = /** @class */ (function () {
    /**
     * @param builder The client builder that is responsible for constructing this object.
     * @hidden
     */
    function ChattyHost(builder) {
        var _this = this;
        this._hostWindow = window;
        this._connection = null;
        this._state = ChattyHostStates.Connecting;
        this._sequence = 0;
        this._receivers = {};
        this.iframe = document.createElement('iframe');
        builder.sandboxAttrs.forEach(function (attr) { return _this.iframe.sandbox.add(attr); });
        // tslint:disable-next-line:deprecation
        this.iframe.frameBorder = builder.getFrameBorder();
        if (builder.url) {
            this.iframe.src = builder.url;
        }
        else if (builder.source) {
            this.iframe.srcdoc = builder.source;
        }
        else {
            console.warn('url or source required to initialize Chatty host correctly');
        }
        this._appendTo = builder.el;
        this._handlers = builder.handlers;
        this._port = null;
        this._targetOrigin = builder.targetOrigin;
        this._defaultTimeout = builder.defaultTimeout;
    }
    Object.defineProperty(ChattyHost.prototype, "connection", {
        /**
         * @returns a Promise to an object that resolves when the client initiates the connection.
         */
        get: function () {
            return this._connection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChattyHost.prototype, "isConnected", {
        /**
         * @returns a flag indicating whether the client successfully connected to the host.
         */
        get: function () {
            return this._state === ChattyHostStates.Connected;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Connects to the client iframe. Waits for the client iframe to load and initiate a
     * connection using the chatty client.
     *
     * @returns a Promise to an object that resolves when the client has initiated the connection. The
     * object implements the [[ChattyHostConnection]] that can be used to talk to the host.
     */
    ChattyHost.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var createConnection;
            var _this = this;
            return __generator(this, function (_a) {
                if (this._connection)
                    return [2 /*return*/, this._connection];
                createConnection = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                var eventListener = function (evt) {
                                    ChattyHost._debug('port received', evt.data.action, evt.data.data);
                                    switch (evt.data.action) {
                                        case client_messages_1.ChattyClientMessages.Ack:
                                            _this._state = ChattyHostStates.Connected;
                                            resolve({
                                                send: function (eventName) {
                                                    var payload = [];
                                                    for (var _i = 1; _i < arguments.length; _i++) {
                                                        payload[_i - 1] = arguments[_i];
                                                    }
                                                    _this.sendMsg(host_messages_1.ChattyHostMessages.Message, { eventName: eventName, payload: payload });
                                                },
                                                sendAndReceive: function (eventName) {
                                                    var payload = [];
                                                    for (var _i = 1; _i < arguments.length; _i++) {
                                                        payload[_i - 1] = arguments[_i];
                                                    }
                                                    return __awaiter(_this, void 0, void 0, function () {
                                                        var sequence;
                                                        var _this = this;
                                                        return __generator(this, function (_a) {
                                                            sequence = ++this._sequence;
                                                            this.sendMsg(host_messages_1.ChattyHostMessages.MessageWithResponse, { eventName: eventName, payload: payload }, sequence);
                                                            return [2 /*return*/, new Promise(function (resolve, reject) {
                                                                    var timeoutId;
                                                                    if (_this._defaultTimeout > -1) {
                                                                        timeoutId = setTimeout(function () {
                                                                            delete _this._receivers[sequence];
                                                                            reject(new Error('Timeout'));
                                                                        }, _this._defaultTimeout);
                                                                    }
                                                                    _this._receivers[sequence] = { resolve: resolve, reject: reject, timeoutId: timeoutId };
                                                                })];
                                                        });
                                                    });
                                                }
                                            });
                                            break;
                                        case client_messages_1.ChattyClientMessages.Message:
                                            if (_this._handlers[evt.data.data.eventName]) {
                                                _this._handlers[evt.data.data.eventName].forEach(function (fn) { return fn.apply(_this, evt.data.data.payload); });
                                            }
                                            break;
                                        case client_messages_1.ChattyClientMessages.MessageWithResponse:
                                            {
                                                var _a = evt.data.data, eventName_1 = _a.eventName, payload_1 = _a.payload, sequence_1 = _a.sequence;
                                                var results = [];
                                                if (_this._handlers[eventName_1]) {
                                                    results = _this._handlers[eventName_1].map(function (fn) { return fn.apply(_this, payload_1); });
                                                }
                                                Promise.all(results)
                                                    .then(function (resolvedResults) {
                                                    _this.sendMsg(host_messages_1.ChattyHostMessages.Response, { eventName: eventName_1, payload: resolvedResults }, sequence_1);
                                                })
                                                    .catch(function (error) {
                                                    _this.sendMsg(host_messages_1.ChattyHostMessages.ResponseError, { eventName: eventName_1, payload: error }, sequence_1);
                                                });
                                            }
                                            break;
                                        case client_messages_1.ChattyClientMessages.Response:
                                            {
                                                var receiver = _this._receivers[evt.data.data.sequence];
                                                if (receiver) {
                                                    delete _this._receivers[evt.data.data.sequence];
                                                    if (receiver.timeoutId) {
                                                        clearTimeout(receiver.timeoutId);
                                                    }
                                                    receiver.resolve(evt.data.data.payload);
                                                }
                                            }
                                            break;
                                        case client_messages_1.ChattyClientMessages.ResponseError:
                                            {
                                                var receiver = _this._receivers[evt.data.data.sequence];
                                                if (receiver) {
                                                    delete _this._receivers[evt.data.data.sequence];
                                                    if (receiver.timeoutId) {
                                                        clearTimeout(receiver.timeoutId);
                                                    }
                                                    receiver.reject(evt.data.data.payload);
                                                }
                                            }
                                            break;
                                    }
                                };
                                var windowListener = function (evt) {
                                    if (!_this.isValidMsg(evt)) {
                                        // don't reject here, since that breaks the promise resolution chain
                                        ChattyHost._debug('window received invalid', evt);
                                        return;
                                    }
                                    ChattyHost._debug('window received', evt.data.action, evt.data.data);
                                    switch (evt.data.action) {
                                        case client_messages_1.ChattyClientMessages.Syn:
                                            if (_this._port) {
                                                // If targetOrigin is set and we receive another Syn, the frame has potentially
                                                // navigated to another valid webpage and we should re-connect
                                                if (_this._targetOrigin && _this._targetOrigin === '*' || _this._targetOrigin === evt.origin) {
                                                    ChattyHost._debug('reconnecting to', evt.origin);
                                                    _this._port.close();
                                                }
                                                else {
                                                    ChattyHost._debug('rejected new connection from', evt.origin);
                                                    return;
                                                }
                                            }
                                            _this._port = evt.ports[0];
                                            _this._port.onmessage = eventListener;
                                            _this.sendMsg(host_messages_1.ChattyHostMessages.SynAck);
                                            _this._state = ChattyHostStates.SynAck;
                                            break;
                                    }
                                };
                                _this._hostWindow.addEventListener('message', windowListener);
                            })];
                    });
                }); };
                this._appendTo.appendChild(this.iframe);
                return [2 /*return*/, this._connection = createConnection()];
            });
        });
    };
    ChattyHost.prototype.sendMsg = function (action, data, sequence) {
        if (data === void 0) { data = {}; }
        var sequenceData = sequence ? { sequence: sequence } : {};
        var dataWithSequence = __assign({}, data, sequenceData);
        ChattyHost._debug('sending', action, dataWithSequence);
        this._port.postMessage({ action: action, data: dataWithSequence });
    };
    // TODO: natenate
    // Frustratingly, enabling `allow-scripts` on a sandboxed iframe sets its origin to `'null'`
    // (that is, a string literal with a value of null). This means that in order to `postMessage`
    // to the client we must use `'*'` as the origin parameter.  To ensure messages received from
    // the client are who they claim to be, we check the origin is `'null'` and the contentWindow
    // is the one we have access to from the parent frame.  This method is described here:
    // https://www.html5rocks.com/en/tutorials/security/sandboxed-iframes/#safely-sandboxing-eval
    // If sandboxing is not enabled targetOrigin can be set and validated
    ChattyHost.prototype.isValidMsg = function (evt) {
        if (evt.source !== this.iframe.contentWindow)
            return false;
        if (this._targetOrigin && !(this._targetOrigin === '*' || this._targetOrigin === evt.origin))
            return false;
        return true;
    };
    ChattyHost._debug = debugLib('looker:chatty:host');
    return ChattyHost;
}());
exports.ChattyHost = ChattyHost;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/host.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/host.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/chatty/lib/host_builder.js":
/*!*********************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/host_builder.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var host_1 = __webpack_require__(/*! ./host */ "./node_modules/@looker/chatty/lib/host.js");
/**
 * Provides methods to define the properties of a [[ChattyHost]]
 */
var ChattyHostBuilder = /** @class */ (function () {
    /** @hidden */
    function ChattyHostBuilder(_url, _source) {
        this._url = _url;
        this._source = _source;
        this._appendTo = null;
        this._handlers = {};
        this._sandboxAttrs = [];
        this._frameBorder = '0';
        this._targetOrigin = null;
        this._defaultTimeout = 30000;
    }
    Object.defineProperty(ChattyHostBuilder.prototype, "el", {
        get: function () {
            return this._appendTo || document.body;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChattyHostBuilder.prototype, "handlers", {
        get: function () {
            return this._handlers;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChattyHostBuilder.prototype, "sandboxAttrs", {
        get: function () {
            return this._sandboxAttrs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChattyHostBuilder.prototype, "targetOrigin", {
        get: function () {
            return this._targetOrigin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChattyHostBuilder.prototype, "url", {
        get: function () {
            return this._url;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChattyHostBuilder.prototype, "source", {
        get: function () {
            return this._source;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChattyHostBuilder.prototype, "defaultTimeout", {
        get: function () {
            return this._defaultTimeout;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param el the HTML element that the iframe will live inside. The iframe will be created as
     * a direct child of the element.
     * @returns the host builder
     */
    ChattyHostBuilder.prototype.appendTo = function (el) {
        this._appendTo = el;
        return this;
    };
    /**
     * Removes an event handler to the host.
     *
     * @param name Event name
     * @param fn Callback function to remove.
     * @returns the host builder
     */
    ChattyHostBuilder.prototype.off = function (name, fn) {
        if (this._handlers[name]) {
            this._handlers[name] = this._handlers[name].filter(function (handler) { return handler !== fn; });
        }
    };
    /**
     * Adds an event handler to the host.
     *
     * @param name Event name to which to listen.
     * @param fn Callback function that is invoked when the event
     * is received, and accepts any parameters that were passed with the event. If the event
     * received is sent using [[ChattyClientConnection.sendAndReceive]], its return value is included
     * in the array that will be passed to the resolved promise.
     * @returns the host builder
     */
    ChattyHostBuilder.prototype.on = function (name, fn) {
        this._handlers[name] = this._handlers[name] || [];
        this._handlers[name].push(fn);
        return this;
    };
    /**
     * Sets the default period of time a [[ChattyHostConnection.sendAndReceive]] message will wait.
     * Use a negative number to wait indefinitely.
     *
     * @param timeout in milliseconds
     * @returns the host builder
     */
    ChattyHostBuilder.prototype.withDefaultTimeout = function (timeout) {
        this._defaultTimeout = timeout;
        return this;
    };
    /** @deprecated The frame-board attribute is deprecated, use CSS instead */
    ChattyHostBuilder.prototype.getFrameBorder = function () {
        return this._frameBorder;
    };
    /** @deprecated The frame-board attribute is deprecated, use CSS instead */
    ChattyHostBuilder.prototype.frameBorder = function (attr) {
        this._frameBorder = attr;
        return this;
    };
    /** @deprecated Replaced by [[withSandboxAttribute]] */
    ChattyHostBuilder.prototype.sandbox = function (attr) {
        this.withSandboxAttribute(attr);
        return this;
    };
    /**
     * Create the iframe with the give sandbox attribute
     *
     * @param attr The sandbox attribute
     */
    ChattyHostBuilder.prototype.withSandboxAttribute = function (attr) {
        this._sandboxAttrs.push(attr);
        return this;
    };
    /**
     * Use `targetOrigin` as the value for postMessage(). See
     * [Window.postMessage()](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
     * for details.
     *
     * @param targetOrigin
     */
    ChattyHostBuilder.prototype.withTargetOrigin = function (targetOrigin) {
        this._targetOrigin = targetOrigin;
        return this;
    };
    /**
     * Builds a [[ChattyHost]] with the provided properties.
     */
    ChattyHostBuilder.prototype.build = function () {
        return new host_1.ChattyHost(this);
    };
    return ChattyHostBuilder;
}());
exports.ChattyHostBuilder = ChattyHostBuilder;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/host_builder.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/host_builder.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/chatty/lib/host_messages.js":
/*!**********************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/host_messages.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The recognized set of messages that are sent from the host to the client.
 * @private
 */
var ChattyHostMessages;
(function (ChattyHostMessages) {
    /** Acknowledge client connection */
    ChattyHostMessages[ChattyHostMessages["SynAck"] = 0] = "SynAck";
    /** Normal message */
    ChattyHostMessages[ChattyHostMessages["Message"] = 1] = "Message";
    /** Message that expects a response */
    ChattyHostMessages[ChattyHostMessages["MessageWithResponse"] = 2] = "MessageWithResponse";
    /** Response  */
    ChattyHostMessages[ChattyHostMessages["Response"] = 3] = "Response";
    /** Asynchronous error response */
    ChattyHostMessages[ChattyHostMessages["ResponseError"] = 4] = "ResponseError";
})(ChattyHostMessages = exports.ChattyHostMessages || (exports.ChattyHostMessages = {}));

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/host_messages.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/host_messages.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/chatty/lib/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@looker/chatty/lib/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var client_builder_1 = __webpack_require__(/*! ./client_builder */ "./node_modules/@looker/chatty/lib/client_builder.js");
var host_builder_1 = __webpack_require__(/*! ./host_builder */ "./node_modules/@looker/chatty/lib/host_builder.js");
var client_builder_2 = __webpack_require__(/*! ./client_builder */ "./node_modules/@looker/chatty/lib/client_builder.js");
exports.ChattyClientBuilder = client_builder_2.ChattyClientBuilder;
var host_builder_2 = __webpack_require__(/*! ./host_builder */ "./node_modules/@looker/chatty/lib/host_builder.js");
exports.ChattyHostBuilder = host_builder_2.ChattyHostBuilder;
var client_1 = __webpack_require__(/*! ./client */ "./node_modules/@looker/chatty/lib/client.js");
exports.ChattyClient = client_1.ChattyClient;
var host_1 = __webpack_require__(/*! ./host */ "./node_modules/@looker/chatty/lib/host.js");
exports.ChattyHost = host_1.ChattyHost;
/**
 * @class Chatty
 *
 * Primary interface for chatty. Provides methods for creating the chatty hosts and clients.
 */
var Chatty = /** @class */ (function () {
    function Chatty() {
    }
    /**
     * Creates a [[ChattyHostBuilder]] object. The builder presents a set of methods to configure
     * and construct the host object.
     *
     * It is up to the client's webserver to return the correct headers to allow for parent/iframe
     * communication. See
     * [Window.postMessage()](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
     * for details.
     *
     * @param url The URL of the client iframe to create. The hosted iframe should create a chatty
     * client to communicate with the host.
     */
    Chatty.createHost = function (url) {
        return new host_builder_1.ChattyHostBuilder(url);
    };
    /**
     * Creates a [[ChattyHostBuilder]] object. The builder presents a set of methods to configure
     * and construct the host object.
     *
     * @param source The source of the client iframe to create. The hosted iframe should create a chatty
     * client to communicate with the host.
     */
    Chatty.createHostFromSource = function (source) {
        return new host_builder_1.ChattyHostBuilder(undefined, source);
    };
    /**
     * Creates a [[ChattyClientBuilder]] object. The builder presents a set of methods to configure
     * and construct the client object.
     */
    Chatty.createClient = function () {
        return new client_builder_1.ChattyClientBuilder();
    };
    return Chatty;
}());
exports.Chatty = Chatty;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/index.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/chatty/lib/index.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/lib/connect/connect_extension_host.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/lib/connect/connect_extension_host.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chatty_1 = __webpack_require__(/*! @looker/chatty */ "./node_modules/@looker/chatty/lib/index.js");
var extension_host_api_1 = __webpack_require__(/*! ./extension_host_api */ "./node_modules/@looker/extension-sdk/lib/connect/extension_host_api.js");
var types_1 = __webpack_require__(/*! ./types */ "./node_modules/@looker/extension-sdk/lib/connect/types.js");
exports.connectExtensionHost = function (configuration) {
    if (configuration === void 0) { configuration = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var extensionHost;
        return __generator(this, function (_a) {
            return [2 /*return*/, chatty_1.Chatty.createClient()
                    .on(types_1.ExtensionEvent.EXTENSION_HOST_NOTIFICATION, function (message) {
                    if (!message) {
                        throw new Error('Message not recieved from host');
                    }
                    if (extensionHost) {
                        return extensionHost.handleNotification(message);
                    }
                    throw new Error('Extension client not initialized');
                })
                    .withTargetOrigin('*')
                    .withDefaultTimeout(-1)
                    .build()
                    .connect()
                    .then(function (_host) {
                    extensionHost = new extension_host_api_1.ExtensionHostApiImpl(__assign({ chattyHost: _host }, configuration));
                    return extensionHost;
                })];
        });
    });
};

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/connect/connect_extension_host.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/connect/connect_extension_host.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/lib/connect/extension_host_api.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/lib/connect/extension_host_api.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ./types */ "./node_modules/@looker/extension-sdk/lib/connect/types.js");
var semver = __webpack_require__(/*! semver */ "./node_modules/@looker/extension-sdk/node_modules/semver/semver.js");
var ExtensionHostApiImpl = /** @class */ (function () {
    function ExtensionHostApiImpl(configuration) {
        this._configuration = configuration;
        var _a = this._configuration, chattyHost = _a.chattyHost, initializedCallback = _a.initializedCallback, setInitialRoute = _a.setInitialRoute;
        this.chattyHost = chattyHost;
        this.initializedCallback = initializedCallback;
        this.setInitialRoute = setInitialRoute;
    }
    Object.defineProperty(ExtensionHostApiImpl.prototype, "lookerHostData", {
        get: function () {
            return this._lookerHostData;
        },
        enumerable: true,
        configurable: true
    });
    ExtensionHostApiImpl.prototype.handleNotification = function (message) {
        var type = message.type, payload = message.payload;
        switch (type) {
            case types_1.ExtensionNotificationType.INITIALIZE:
                this._lookerHostData = payload;
                var errorMessage = void 0;
                if (this._configuration.requiredLookerVersion &&
                    this._lookerHostData &&
                    this._lookerHostData.lookerVersion) {
                    if (!semver.intersects(this._configuration.requiredLookerVersion, this._lookerHostData.lookerVersion, true)) {
                        errorMessage =
                            'Extension requires looker version ' +
                                this._configuration.requiredLookerVersion +
                                ', got ' +
                                this._lookerHostData.lookerVersion;
                        console.error(message);
                    }
                }
                if (this.setInitialRoute && payload) {
                    var route = payload.route;
                    if (route) {
                        this.setInitialRoute(route);
                    }
                }
                if (this.initializedCallback) {
                    this.initializedCallback(errorMessage);
                }
                break;
            default:
                console.error('Unrecognized extension notification', message);
                throw new Error("Unrecognized extension notification type " + message.type);
        }
    };
    ExtensionHostApiImpl.prototype.verifyHostConnection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.VERIFY_HOST)];
            });
        });
    };
    ExtensionHostApiImpl.prototype.invokeCoreSdkByName = function (apiMethodName, body, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.INVOKE_CORE_SDK, {
                        apiMethodName: apiMethodName,
                        body: body,
                        params: params,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.invokeCoreSdkByPath = function (httpMethod, path, params, body, authenticator, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.INVOKE_CORE_SDK, {
                        httpMethod: httpMethod,
                        path: path,
                        params: params,
                        body: body,
                        authenticator: authenticator,
                        options: options,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.updateTitle = function (title) {
        this.send(types_1.ExtensionRequestType.UPDATE_TITLE, { title: title });
    };
    ExtensionHostApiImpl.prototype.updateLocation = function (url, state, target) {
        this.send(types_1.ExtensionRequestType.UPDATE_LOCATION, { url: url, state: state, target: target });
    };
    ExtensionHostApiImpl.prototype.openBrowserWindow = function (url, target) {
        this.send(types_1.ExtensionRequestType.UPDATE_LOCATION, {
            url: url,
            undefined: undefined,
            target: target || '_blank',
        });
    };
    ExtensionHostApiImpl.prototype.closeHostPopovers = function () {
        this.send(types_1.ExtensionRequestType.CLOSE_HOST_POPOVERS);
    };
    ExtensionHostApiImpl.prototype.clientRouteChanged = function (route) {
        this.send(types_1.ExtensionRequestType.ROUTE_CHANGED, {
            route: route,
        });
    };
    ExtensionHostApiImpl.prototype.localStorageSetItem = function (name, value) {
        if (value === void 0) { value = ''; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this._lookerHostData && !this._lookerHostData.lookerVersion) {
                    return [2 /*return*/, Promise.reject('localStorageSetItem not supported by the current Looker host')];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.LOCAL_STORAGE, {
                        type: 'set',
                        name: name,
                        value: value,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.localStorageGetItem = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this._lookerHostData && !this._lookerHostData.lookerVersion) {
                    return [2 /*return*/, Promise.reject('localStorageGetItem not supported by the current Looker host')];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.LOCAL_STORAGE, {
                        type: 'get',
                        name: name,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.localStorageRemoveItem = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this._lookerHostData && !this._lookerHostData.lookerVersion) {
                    return [2 /*return*/, Promise.reject('localStorageRemoveItem not supported by the current Looker host')];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.LOCAL_STORAGE, {
                        type: 'remove',
                        name: name,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.sendAndReceive = function (type, payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this._lookerHostData) {
                    return [2 /*return*/, Promise.reject('Looker host connection not established')];
                }
                return [2 /*return*/, this.chattyHost
                        .sendAndReceive(types_1.ExtensionEvent.EXTENSION_API_REQUEST, {
                        type: type,
                        payload: payload,
                    })
                        .then(function (values) { return values[0]; })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.send = function (type, payload) {
        if (!this._lookerHostData) {
            throw new Error('Looker host connection not established');
        }
        this.chattyHost.send(types_1.ExtensionEvent.EXTENSION_API_REQUEST, {
            type: type,
            payload: payload,
        });
    };
    return ExtensionHostApiImpl;
}());
exports.ExtensionHostApiImpl = ExtensionHostApiImpl;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/connect/extension_host_api.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/connect/extension_host_api.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/lib/connect/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/lib/connect/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./types */ "./node_modules/@looker/extension-sdk/lib/connect/types.js"));
__export(__webpack_require__(/*! ./connect_extension_host */ "./node_modules/@looker/extension-sdk/lib/connect/connect_extension_host.js"));

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/connect/index.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/connect/index.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/lib/connect/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/lib/connect/types.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Extension event used for chatty communication
 */
var ExtensionEvent;
(function (ExtensionEvent) {
    /**
     * Notification from host to client
     */
    ExtensionEvent["EXTENSION_HOST_NOTIFICATION"] = "EXTENSION_NOTIFICATION";
    /**
     * Process request from client. This is actually a sendAndRecieve request
     */
    ExtensionEvent["EXTENSION_API_REQUEST"] = "EXTENSION_API_REQUEST";
})(ExtensionEvent = exports.ExtensionEvent || (exports.ExtensionEvent = {}));
/**
 * Request types used by the underlying API. The ENTENSION_API_REQUEST delegates
 * work based upon the request type
 */
var ExtensionRequestType;
(function (ExtensionRequestType) {
    /**
     * Verify that the host exists and is working correctly. Host is the Looker window
     * instance that owns the client IFRAME.
     */
    ExtensionRequestType["VERIFY_HOST"] = "VERIFY_HOST";
    /**
     * Execute a call on the Looker CORE SDK
     */
    ExtensionRequestType["INVOKE_CORE_SDK"] = "INVOKE_CORE_SDK";
    /**
     * Update title
     */
    ExtensionRequestType["UPDATE_TITLE"] = "UPDATE_TITLE";
    /**
     * Update location
     */
    ExtensionRequestType["UPDATE_LOCATION"] = "UPDATE_LOCATION";
    /**
     * Location route changed
     */
    ExtensionRequestType["ROUTE_CHANGED"] = "ROUTE_CHANGED";
    /**
     * Close popovers in the looker host
     */
    ExtensionRequestType["CLOSE_HOST_POPOVERS"] = "CLOSE_HOST_POPOVERS";
    /**
     * Local storage request
     */
    ExtensionRequestType["LOCAL_STORAGE"] = "LOCAL_STORAGE";
})(ExtensionRequestType = exports.ExtensionRequestType || (exports.ExtensionRequestType = {}));
/**
 * Notification type
 */
var ExtensionNotificationType;
(function (ExtensionNotificationType) {
    /**
     * Initialize message sent when chatty host and client have established
     * communication
     */
    ExtensionNotificationType["INITIALIZE"] = "INITIALIZE";
})(ExtensionNotificationType = exports.ExtensionNotificationType || (exports.ExtensionNotificationType = {}));

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/connect/types.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/connect/types.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/lib/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/lib/index.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./connect */ "./node_modules/@looker/extension-sdk/lib/connect/index.js"));
__export(__webpack_require__(/*! ./sdk */ "./node_modules/@looker/extension-sdk/lib/sdk/index.js"));

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/index.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/index.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/lib/sdk/extension_sdk.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/lib/sdk/extension_sdk.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var extensionSdk_1 = __webpack_require__(/*! @looker/sdk/dist/rtl/extensionSdk */ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionSdk.js");
var HostConnection = /** @class */ (function () {
    function HostConnection(hostConnection) {
        this.hostConnection = hostConnection;
    }
    HostConnection.prototype.request = function (httpMethod, path, body, params, authenticator, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.hostConnection.invokeCoreSdkByPath(httpMethod, path, params, body, undefined, options)];
            });
        });
    };
    return HostConnection;
}());
var LookerExtensionSDK = /** @class */ (function () {
    function LookerExtensionSDK() {
    }
    /**
     * Creates a [[LookerSDK]] object.
     */
    LookerExtensionSDK.createClient = function (hostConnection) {
        return extensionSdk_1.LookerExtensionSDK.createClient(new HostConnection(hostConnection));
    };
    return LookerExtensionSDK;
}());
exports.LookerExtensionSDK = LookerExtensionSDK;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/sdk/extension_sdk.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/sdk/extension_sdk.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/lib/sdk/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/lib/sdk/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./extension_sdk */ "./node_modules/@looker/extension-sdk/lib/sdk/extension_sdk.js"));

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/sdk/index.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/lib/sdk/index.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/apiMethods.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/apiMethods.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var transport_1 = __webpack_require__(/*! ./transport */ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/transport.js");
var APIMethods = /** @class */ (function () {
    function APIMethods(authSession) {
        this.authSession = authSession;
        this.authSession = authSession;
    }
    /** A helper method for simplifying error handling of SDK responses.
     *
     * Pass in a promise returned by any SDK method, and it will return a promise
     * that rejects if the `SDKResponse` is not `ok`. This will swallow the type
     * information in the error case, but allows you to route all the error cases
     * into a single promise rejection.
     *
     * The promise will have an `Error` rejection reason with a string `message`.
     * If the server error contains a `message` field, it will be provided, otherwise a
     * generic message will occur.
     *
     * ```ts
     * const sdk = LookerSDK({...})
     * let look
     * try {
     *    look = await sdk.ok(sdk.create_look({...}))
     *    // do something with look
     * }
     * catch(e) {
     *    // handle error case
     * }
     * ```
     */
    APIMethods.prototype.ok = function (promise) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, transport_1.sdkOk(promise)];
            });
        });
    };
    /**
     *
     * A helper method to add authentication to an API request for deserialization
     *
     * @param {HttpMethod} method type of HTTP method
     * @param {string} path API endpoint path
     * @param {any} queryParams Optional query params collection for request
     * @param {any} body Optional body for request
     * @param {Partial<ITransportSettings>} options Optional overrides like timeout and verify_ssl
     */
    APIMethods.prototype.authRequest = function (method, path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authSession.transport.request(method, path, queryParams, body, function (init) {
                        return _this.authSession.authenticate(init);
                    }, options)];
            });
        });
    };
    /**
     * A helper method to add authentication to an API request for streaming
     * @param {(readable: Readable) => Promise<T>} callback
     * @param {HttpMethod} method
     * @param {string} path
     * @param queryParams
     * @param body
     * @param {Partial<ITransportSettings>} options
     * @returns {Promise<T>}
     */
    APIMethods.prototype.authStream = function (callback, method, path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authSession.transport.stream(callback, method, path, queryParams, body, function (init) {
                        return _this.authSession.authenticate(init);
                    }, options)];
            });
        });
    };
    // // dynamically evaluate a template string
    // macro(template: string, vars: any) {
    //   // replace {foo} from spec path with ${foo} for template string
    //   template = template.replace(/{/gi, '${')
    //   return new Function('return `+ template +`;').call(vars)
    // }
    //
    // pathify(path: string, pathParams?: any) {
    //   if (!pathParams) return path
    //   if (path.indexOf('{') < 0) return path
    //   return this.macro(path, pathParams)
    // }
    /** Make a GET request */
    APIMethods.prototype.get = function (path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authRequest('GET', path, queryParams, body, options)];
            });
        });
    };
    /** Make a HEAD request */
    APIMethods.prototype.head = function (path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authRequest('HEAD', path, queryParams, body, options)];
            });
        });
    };
    /** Make a DELETE request */
    APIMethods.prototype.delete = function (path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authRequest('DELETE', path, queryParams, body, options)];
            });
        });
    };
    /** Make a POST request */
    APIMethods.prototype.post = function (path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authRequest('POST', path, queryParams, body, options)];
            });
        });
    };
    /** Make a PUT request */
    APIMethods.prototype.put = function (path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authRequest('PUT', path, queryParams, body, options)];
            });
        });
    };
    /** Make a PATCH request */
    APIMethods.prototype.patch = function (path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authRequest('PATCH', path, queryParams, body, options)];
            });
        });
    };
    return APIMethods;
}());
exports.APIMethods = APIMethods;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/apiMethods.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/apiMethods.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/apiSettings.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/apiSettings.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var transport_1 = __webpack_require__(/*! ./transport */ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/transport.js");
var constants_1 = __webpack_require__(/*! ./constants */ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/constants.js");
exports.strLookerBaseUrl = constants_1.environmentPrefix + "_BASE_URL";
exports.strLookerApiVersion = constants_1.environmentPrefix + "_API_VERSION";
exports.strLookerVerifySsl = constants_1.environmentPrefix + "_VERIFY_SSL";
exports.strLookerTimeout = constants_1.environmentPrefix + "_TIMEOUT";
exports.strLookerClientId = constants_1.environmentPrefix + "_CLIENT_ID";
exports.strLookerClientSecret = constants_1.environmentPrefix + "_CLIENT_SECRET";
exports.ApiConfigMap = {
    'base_url': exports.strLookerBaseUrl,
    'api_version': exports.strLookerApiVersion,
    'verify_ssl': exports.strLookerVerifySsl,
    'timeout': exports.strLookerTimeout,
    'client_id': exports.strLookerClientId,
    'client_secret': exports.strLookerClientSecret
};
exports.strBadConfiguration = transport_1.agentTag + " configuration error:\nMissing required configuration values like base_url and api_version\n";
/**
 * default the runtime configuration settings
 * @constructor
 *
 */
exports.DefaultSettings = function () {
    return ({
        base_url: '',
        api_version: '3.1',
        verify_ssl: true,
        timeout: transport_1.defaultTimeout,
    });
};
/**
 * Return environment variable name value first, otherwise config name value
 * @param {IValueSettings} values
 * @param {string} name
 * @returns {string}
 */
exports.configValue = function (values, name) {
    var val = values[exports.ApiConfigMap[name]] || values[name];
    return typeof val === 'string' ? constants_1.unquote(val) : val;
};
/**
 * Read any key/value collection for environment variable names and return as IApiSettings
 * @constructor
 *
 * The keys for the values are:
 *  - <environmentPrefix>_BASE_URL or `base_url`
 *  - <environmentPrefix>_API_VERSION or `api_version`
 *  - <environmentPrefix>_CLIENT_ID or `client_id`
 *  - <environmentPrefix>_CLIENT_SECRET or `client_secret`
 *  - <environmentPrefix>_VERIFY_SSL or `verify_ssl`
 *  - <environmentPrefix>_TIMEOUT or `timeout`
 */
exports.ValueSettings = function (values) {
    var settings = exports.DefaultSettings();
    settings.api_version = exports.configValue(values, 'api_version') || settings.api_version;
    settings.base_url = exports.configValue(values, 'base_url') || settings.base_url;
    settings.verify_ssl = constants_1.boolDefault(exports.configValue(values, 'verify_ssl'), true);
    var timeout = exports.configValue(values, 'timeout');
    settings.timeout = timeout ? parseInt(timeout, 10) : transport_1.defaultTimeout;
    return settings;
};
/**
 * @class ApiSettings
 *
 * .ini Configuration initializer
 */
var ApiSettings = /** @class */ (function () {
    function ApiSettings(settings) {
        // tslint:disable-next-line: variable-name
        this.base_url = '';
        // tslint:disable-next-line: variable-name
        this.api_version = '3.1';
        // tslint:disable-next-line: variable-name
        this.verify_ssl = true;
        this.timeout = transport_1.defaultTimeout;
        // coerce types to declared types since some paths could have non-conforming settings values
        this.base_url = 'base_url' in settings ? constants_1.unquote(settings.base_url) : this.base_url;
        this.api_version =
            'api_version' in settings
                ? constants_1.unquote(settings.api_version)
                : this.api_version;
        this.verify_ssl =
            'verify_ssl' in settings
                ? constants_1.isTrue(constants_1.unquote(settings.verify_ssl.toString()))
                : this.verify_ssl;
        this.timeout =
            'timeout' in settings
                ? parseInt(constants_1.unquote(settings.timeout.toString()), 10)
                : this.timeout;
        if (!this.isConfigured()) {
            throw new Error(exports.strBadConfiguration);
        }
    }
    ApiSettings.prototype.isConfigured = function () {
        return !!(this.base_url && this.api_version);
    };
    /**
     * Default dynamic configuration reader
     * @param section key/name of configuration section to read
     * @returns an empty `IAPISection`
     */
    // @ts-ignore
    ApiSettings.prototype.readConfig = function (section) {
        return {};
    };
    return ApiSettings;
}());
exports.ApiSettings = ApiSettings;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/apiSettings.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/apiSettings.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/constants.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/constants.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.lookerVersion = '7.0';
exports.apiVersion = '3.1';
exports.sdkVersion = exports.apiVersion + "." + exports.lookerVersion;
exports.environmentPrefix = 'LOOKERSDK';
exports.matchCharset = ';.*charset=';
exports.utf8 = 'utf-8';
/**
 * Does this content type say it's utf-8?
 * @type {string} Regular expression for matching charset=utf-8 in Content-Type
 */
exports.matchCharsetUtf8 = exports.matchCharset + ".*\\butf-8\\b";
/**
 * Matching rules for string/text types. String matches must be checked *before* binary matches
 * @type {string} Regular expression for matching Content-Type headers
 */
exports.matchModeString = "(^application\\/.*(\\bjson\\b|\\bxml\\b|\\bsql\\b|\\bgraphql\\b|\\bjavascript\\b|\\bx-www-form-urlencoded\\b)|^text\\/|" + exports.matchCharset + ")";
/**
 * Matching rules for all binary or unknown types. Binary matches must be checked *after* string matches
 * @type {string} Regular expression for matching Content-Type headers
 */
exports.matchModeBinary = '^image\\/|^audio\\/|^video\\/|^font\\/|^application\\/|^multipart\\/';
/**
 * Does this string mean "true"
 * @param {string} value
 * @returns {boolean} true if matching a `true` value, false otherwise
 */
exports.isTrue = function (value) { return /^(true|t|yes|y|1)$/i.test(value); };
/**
 * Does this string mean "false"
 * @param {string} value
 * @returns {boolean} true if matching a `false` value, false otherwise
 */
exports.isFalse = function (value) { return /^(false|f|no|n|0)$/i.test(value); };
/**
 * Return true, false, or default boolean value for string representation of boolean
 * @param {string} value
 * @param {boolean} defaultBool is the value to return if the string doesn't match. defaults to false.
 * @returns {boolean} true or false
 */
exports.boolDefault = function (value, defaultBool) {
    if (defaultBool === void 0) { defaultBool = false; }
    if (exports.isTrue(value))
        return true;
    if (exports.isFalse(value))
        return false;
    return defaultBool;
};
/**
 * strip surrounding quotes from a string if it is uniformly quoted
 * @param {string | null} value to unquote
 * @returns {string | null} unquoted string if it begins and ends with the same character out of `\` " '`
 */
exports.unquote = function (value) {
    if (!value)
        return '';
    if (/^['\"`]/.test(value)) {
        var quote = value.substring(0, 1);
        // Strip surrounding quotes?
        if (value.endsWith(quote))
            return value.substring(1, value.length - 1);
    }
    return value;
};

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/constants.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/constants.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionSdk.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionSdk.js ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var apiSettings_1 = __webpack_require__(/*! ./apiSettings */ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/apiSettings.js");
var methods_1 = __webpack_require__(/*! ../sdk/methods */ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/sdk/methods.js");
var extensionSession_1 = __webpack_require__(/*! ./extensionSession */ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionSession.js");
var extensionTransport_1 = __webpack_require__(/*! ./extensionTransport */ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionTransport.js");
var LookerExtensionSDK = /** @class */ (function () {
    function LookerExtensionSDK() {
    }
    /**
     * Creates a [[LookerSDK]] object.
     */
    LookerExtensionSDK.createClient = function (hostConnection) {
        var settings = apiSettings_1.DefaultSettings();
        var transport = new extensionTransport_1.ExtensionTransport(settings, hostConnection);
        var session = new extensionSession_1.ExtensionSession(settings, transport);
        return new methods_1.LookerSDK(session);
    };
    return LookerExtensionSDK;
}());
exports.LookerExtensionSDK = LookerExtensionSDK;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionSdk.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionSdk.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionSession.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionSession.js ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ExtensionSession = /** @class */ (function () {
    function ExtensionSession(settings, transport) {
        this.settings = settings;
        this.sudoId = '';
        this.settings = settings;
        this.transport = transport;
    }
    ExtensionSession.prototype.isAuthenticated = function () {
        // Assume if the extension exists then it is authenticated
        return true;
    };
    ExtensionSession.prototype.authenticate = function (init) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.reject('Authenticate not supported from ExtensionSession')];
            });
        });
    };
    ExtensionSession.prototype.getToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.reject('Access to token is not allowed from ExtensionSession')];
            });
        });
    };
    ExtensionSession.prototype.isSudo = function () {
        throw new Error('isSudo is not allowed from ExtensionSession');
    };
    ExtensionSession.prototype.login = function (sudoId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.reject('Login not supported from ExtensionSession')];
            });
        });
    };
    ExtensionSession.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.reject('Logout not supported from ExtensionSession')];
            });
        });
    };
    ExtensionSession.prototype.reset = function () {
        // noop
    };
    return ExtensionSession;
}());
exports.ExtensionSession = ExtensionSession;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionSession.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionSession.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionTransport.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionTransport.js ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var ExtensionTransport = /** @class */ (function () {
    function ExtensionTransport(options, hostConnection) {
        this.options = options;
        this.hostConnection = hostConnection;
        this.options = options;
        this.hostConnection = hostConnection;
    }
    ExtensionTransport.prototype.request = function (method, path, queryParams, body, authenticator, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.hostConnection.request(method, path, body, queryParams, authenticator, options)];
            });
        });
    };
    ExtensionTransport.prototype.stream = function (callback, method, path, queryParams, body, authenticator, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.reject('stream not supported')];
            });
        });
    };
    return ExtensionTransport;
}());
exports.ExtensionTransport = ExtensionTransport;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionTransport.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/extensionTransport.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/transport.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/transport.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = __webpack_require__(/*! ./constants */ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/constants.js");
exports.agentTag = "TS-SDK " + constants_1.sdkVersion;
exports.LookerAppId = 'x-looker-appid';
/**
 * Set to `true` to follow streaming process
 */
var tracing = false;
/**
 * trivial tracing function that should be replaced with a log plugin
 * @param message description for trace
 * @param info any additional information to produce for output
 */
function trace(message, info) {
    if (tracing) {
        console.debug(message);
        if (info) {
            console.debug({ info: info });
        }
    }
}
exports.trace = trace;
/**
 * ResponseMode for an HTTP request - either binary or "string"
 */
var ResponseMode;
(function (ResponseMode) {
    ResponseMode[ResponseMode["binary"] = 0] = "binary";
    ResponseMode[ResponseMode["string"] = 1] = "string";
    ResponseMode[ResponseMode["unknown"] = 2] = "unknown"; // unrecognized response type
})(ResponseMode = exports.ResponseMode || (exports.ResponseMode = {}));
/**
 * MIME patterns for string content types
 * @type {RegExp}
 */
exports.contentPatternString = new RegExp(constants_1.matchModeString, "i");
/**
 * MIME patterns for "binary" content types
 * @type {RegExp}
 */
exports.contentPatternBinary = new RegExp(constants_1.matchModeBinary, "i");
/**
 * MIME pattern for UTF8 charset attribute
 * @type {RegExp}
 */
exports.charsetUtf8Pattern = new RegExp(constants_1.matchCharsetUtf8, "i");
/**
 * Default request timeout
 * @type {number} default request timeout is 120 seconds, or two minutes
 */
exports.defaultTimeout = 120;
/**
 * HTTP status codes
 * https://developer.mozilla.org/en-US/docs/Web/HTTP/Status for reference
 * TODO is there a platform-agnostic list of these that can be used instead of this static declaration?
 */
var StatusCode;
(function (StatusCode) {
    StatusCode[StatusCode["OK"] = 200] = "OK";
    StatusCode[StatusCode["Created"] = 201] = "Created";
    StatusCode[StatusCode["Accepted"] = 202] = "Accepted";
    StatusCode[StatusCode["NonAuthoritative"] = 203] = "NonAuthoritative";
    StatusCode[StatusCode["NoContent"] = 204] = "NoContent";
    StatusCode[StatusCode["ResetContent"] = 205] = "ResetContent";
    StatusCode[StatusCode["PartialContent"] = 206] = "PartialContent";
    StatusCode[StatusCode["MultiStatus"] = 207] = "MultiStatus";
    StatusCode[StatusCode["MultiStatusDav"] = 208] = "MultiStatusDav";
    StatusCode[StatusCode["IMUsed"] = 226] = "IMUsed";
    StatusCode[StatusCode["MultipleChoice"] = 300] = "MultipleChoice";
    StatusCode[StatusCode["MovedPermanently"] = 301] = "MovedPermanently";
    StatusCode[StatusCode["Found"] = 302] = "Found";
    StatusCode[StatusCode["SeeOther"] = 303] = "SeeOther";
    StatusCode[StatusCode["NotModified"] = 304] = "NotModified";
    StatusCode[StatusCode["UseProxy"] = 305] = "UseProxy";
    StatusCode[StatusCode["UnusedRedirect"] = 306] = "UnusedRedirect";
    StatusCode[StatusCode["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    StatusCode[StatusCode["PermanentRedirect"] = 308] = "PermanentRedirect";
    StatusCode[StatusCode["BadRequest"] = 400] = "BadRequest";
    StatusCode[StatusCode["Unauthorized"] = 401] = "Unauthorized";
    StatusCode[StatusCode["PaymentRequired"] = 402] = "PaymentRequired";
    StatusCode[StatusCode["Forbidden"] = 403] = "Forbidden";
    StatusCode[StatusCode["NotFound"] = 404] = "NotFound";
    StatusCode[StatusCode["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    StatusCode[StatusCode["NotAcceptable"] = 406] = "NotAcceptable";
    StatusCode[StatusCode["ProxyAuthRequired"] = 407] = "ProxyAuthRequired";
    StatusCode[StatusCode["RequestTimeout"] = 408] = "RequestTimeout";
    StatusCode[StatusCode["Conflict"] = 409] = "Conflict";
    StatusCode[StatusCode["Gone"] = 410] = "Gone";
    StatusCode[StatusCode["LengthRequired"] = 411] = "LengthRequired";
    StatusCode[StatusCode["PreconditionFailed"] = 412] = "PreconditionFailed";
    StatusCode[StatusCode["PayloadTooLarge"] = 413] = "PayloadTooLarge";
    StatusCode[StatusCode["UriTooLong"] = 414] = "UriTooLong";
    StatusCode[StatusCode["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
    StatusCode[StatusCode["RequestedRangeNotSatisfiable"] = 416] = "RequestedRangeNotSatisfiable";
    StatusCode[StatusCode["ExpectationFailed"] = 417] = "ExpectationFailed";
    StatusCode[StatusCode["ImATeapot"] = 418] = "ImATeapot";
    StatusCode[StatusCode["MisdirectedRequest"] = 421] = "MisdirectedRequest";
    StatusCode[StatusCode["UnprocessableEntity"] = 422] = "UnprocessableEntity";
    StatusCode[StatusCode["Locked"] = 423] = "Locked";
    StatusCode[StatusCode["FailedDependency"] = 424] = "FailedDependency";
    StatusCode[StatusCode["TooEarly"] = 425] = "TooEarly";
    StatusCode[StatusCode["UpgradeRequired"] = 426] = "UpgradeRequired";
    StatusCode[StatusCode["PreconditionRequired"] = 427] = "PreconditionRequired";
    StatusCode[StatusCode["TooManyRequests"] = 428] = "TooManyRequests";
    StatusCode[StatusCode["RequestHeaderFieldsTooLarge"] = 429] = "RequestHeaderFieldsTooLarge";
    StatusCode[StatusCode["UnavailableForLegalReasons"] = 430] = "UnavailableForLegalReasons";
    StatusCode[StatusCode["InternalServerError"] = 500] = "InternalServerError";
    StatusCode[StatusCode["NotImplemented"] = 501] = "NotImplemented";
    StatusCode[StatusCode["BadGateway"] = 502] = "BadGateway";
    StatusCode[StatusCode["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    StatusCode[StatusCode["GatewayTimeout"] = 504] = "GatewayTimeout";
    StatusCode[StatusCode["HttpVersionNotSupported"] = 505] = "HttpVersionNotSupported";
    StatusCode[StatusCode["VariantAlsoNegotiates"] = 506] = "VariantAlsoNegotiates";
    StatusCode[StatusCode["InsufficientStorage"] = 507] = "InsufficientStorage";
    StatusCode[StatusCode["LoopDetected"] = 508] = "LoopDetected";
    StatusCode[StatusCode["NotExtended"] = 510] = "NotExtended";
    StatusCode[StatusCode["NetworkAuthRequired"] = 511] = "NetworkAuthRequired";
})(StatusCode = exports.StatusCode || (exports.StatusCode = {}));
/**
 * Is the content type binary or "string"?
 * @param {string} contentType
 * @returns {ResponseMode.binary | ResponseMode.string}
 */
function responseMode(contentType) {
    if (contentType.match(exports.contentPatternString)) {
        return ResponseMode.string;
    }
    if (contentType.match(exports.contentPatternBinary)) {
        return ResponseMode.binary;
    }
    return ResponseMode.unknown;
}
exports.responseMode = responseMode;
/**
 * Does this content type have a UTF-8 charset?
 * @param contentType
 * @returns match if it exists
 */
function isUtf8(contentType) {
    return contentType.match(/;.*\bcharset\b=\butf-8\b/i);
}
exports.isUtf8 = isUtf8;
/**
 * Converts `Values` to query string parameter format
 * @param values Name/value collection to encode
 * @returns {string} query string parameter formatted values. Both `false` and `null` are included. Only `undefined` are omitted.
 */
function encodeParams(values) {
    if (!values)
        return "";
    var keys = Object.keys(values);
    var params = keys
        .filter(function (k) { return values[k] !== undefined; }) // `null` and `false` will both be passe
        .map(function (k) { return k + '=' + encodeURIComponent(values[k]); })
        .join('&');
    return params;
}
exports.encodeParams = encodeParams;
/**
 * constructs the path argument including any optional query parameters
 * @param path the base path of the request
 * @param obj optional collection of query parameters to encode and append to the path
 */
function addQueryParams(path, obj) {
    if (!obj) {
        return path;
    }
    var qp = encodeParams(obj);
    return "" + path + (qp ? '?' + qp : '');
}
exports.addQueryParams = addQueryParams;
/**
 * SDK error handler
 * @param result any kind of error
 * @returns a new `Error` object with the failure message
 */
function sdkError(result) {
    if ('message' in result && typeof result.message === 'string') {
        return new Error(result.message);
    }
    if ('error' in result && 'message' in result.error && typeof result.error.message === 'string') {
        return new Error(result.error.message);
    }
    var error = JSON.stringify(result);
    return new Error("Unknown error with SDK method " + error);
}
exports.sdkError = sdkError;
/** A helper method for simplifying error handling of SDK responses.
 *
 * Pass in a promise returned by any SDK method, and it will return a promise
 * that rejects if the `SDKResponse` is not `ok`. This will swallow the type
 * information in the error case, but allows you to route all the error cases
 * into a single promise rejection.
 *
 * The promise will have an `Error` rejection reason with a string `message`.
 * If the server error contains a `message` field, it will be provided, otherwise a
 * generic message will occur.
 *
 * ```ts
 * const sdk = LookerSDK({...})
 * let look
 * try {
 *    look = await sdkOk(sdk.create_look({...}))
 *    // do something with look
 * }
 * catch(e) {
 *    // handle error case
 * }
 * ```
 */
function sdkOk(promise) {
    return __awaiter(this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, promise];
                case 1:
                    result = _a.sent();
                    if (result.ok) {
                        return [2 /*return*/, result.value];
                    }
                    else {
                        throw sdkError(result);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.sdkOk = sdkOk;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/transport.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/transport.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/sdk/methods.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/sdk/methods.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 337 API methods
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// NOTE: Do not edit this file generated by Looker SDK Codegen for Looker 7.0 API 3.1
var apiMethods_1 = __webpack_require__(/*! ../rtl/apiMethods */ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/apiMethods.js");
var streams_1 = __webpack_require__(/*! ./streams */ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/sdk/streams.js");
var LookerSDK = /** @class */ (function (_super) {
    __extends(LookerSDK, _super);
    function LookerSDK(authSession) {
        var _this = _super.call(this, authSession) || this;
        _this.stream = new streams_1.LookerSDKStream(authSession);
        return _this;
    }
    /**
     * POST /integration_hubs/{integration_hub_id}/accept_legal_agreement -> IIntegrationHub
     */
    LookerSDK.prototype.accept_integration_hub_legal_agreement = function (
    /**
     * @param {number} integration_hub_id Id of integration_hub
     */
    integration_hub_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/integration_hubs/" + integration_hub_id + "/accept_legal_agreement"), null, null, options)];
            });
        });
    };
    /**
     * GET /themes/active -> ITheme[]
     */
    LookerSDK.prototype.active_themes = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/themes/active', { name: request.name, ts: request.ts, fields: request.fields }, null, options)];
            });
        });
    };
    /**
     * POST /groups/{group_id}/groups -> IGroup
     */
    LookerSDK.prototype.add_group_group = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {Partial<IGroupIdForGroupInclusion>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/groups/" + group_id + "/groups"), null, body, options)];
            });
        });
    };
    /**
     * POST /groups/{group_id}/users -> IUser
     */
    LookerSDK.prototype.add_group_user = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {Partial<IGroupIdForGroupUserInclusion>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/groups/" + group_id + "/users"), null, body, options)];
            });
        });
    };
    /**
     * GET /color_collections -> IColorCollection[]
     */
    LookerSDK.prototype.all_color_collections = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/color_collections', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /connections -> IDBConnection[]
     */
    LookerSDK.prototype.all_connections = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/connections', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_metadata_access -> IContentMetaGroupUser[]
     */
    LookerSDK.prototype.all_content_metadata_accesses = function (
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/content_metadata_access', { content_metadata_id: content_metadata_id, fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_metadata -> IContentMeta[]
     */
    LookerSDK.prototype.all_content_metadatas = function (
    /**
     * @param {number} parent_id Parent space of content.
     */
    parent_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/content_metadata', { parent_id: parent_id, fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards -> IDashboardBase[]
     */
    LookerSDK.prototype.all_dashboards = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/dashboards', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /datagroups -> IDatagroup[]
     */
    LookerSDK.prototype.all_datagroups = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/datagroups', null, null, options)];
            });
        });
    };
    /**
     * GET /dialect_info -> IDialectInfo[]
     */
    LookerSDK.prototype.all_dialect_infos = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/dialect_info', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders -> IFolder[]
     */
    LookerSDK.prototype.all_folders = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/folders', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_branches -> IGitBranch[]
     */
    LookerSDK.prototype.all_git_branches = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/git_branches"), null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_connection_tests -> IGitConnectionTest[]
     */
    LookerSDK.prototype.all_git_connection_tests = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
     */
    remote_url, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/git_connection_tests"), { remote_url: remote_url }, null, options)];
            });
        });
    };
    /**
     * GET /groups/{group_id}/groups -> IGroup[]
     */
    LookerSDK.prototype.all_group_groups = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/groups/" + group_id + "/groups"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /groups/{group_id}/users -> IUser[]
     */
    LookerSDK.prototype.all_group_users = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/groups/" + request.group_id + "/users"), {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /groups -> IGroup[]
     */
    LookerSDK.prototype.all_groups = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/groups', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        ids: request.ids,
                        content_metadata_id: request.content_metadata_id,
                        can_add_to_content_metadata: request.can_add_to_content_metadata,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /homepage_items -> IHomepageItem[]
     */
    LookerSDK.prototype.all_homepage_items = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/homepage_items', {
                        fields: request.fields,
                        sorts: request.sorts,
                        homepage_section_id: request.homepage_section_id,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /homepage_sections -> IHomepageSection[]
     */
    LookerSDK.prototype.all_homepage_sections = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/homepage_sections', { fields: request.fields, sorts: request.sorts }, null, options)];
            });
        });
    };
    /**
     * GET /homepages -> IHomepage[]
     */
    LookerSDK.prototype.all_homepages = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/homepages', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /integration_hubs -> IIntegrationHub[]
     */
    LookerSDK.prototype.all_integration_hubs = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/integration_hubs', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /integrations -> IIntegration[]
     */
    LookerSDK.prototype.all_integrations = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/integrations', {
                        fields: request.fields,
                        integration_hub_id: request.integration_hub_id,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /legacy_features -> ILegacyFeature[]
     */
    LookerSDK.prototype.all_legacy_features = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/legacy_features', null, null, options)];
            });
        });
    };
    /**
     * GET /locales -> ILocale[]
     */
    LookerSDK.prototype.all_locales = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/locales', null, null, options)];
            });
        });
    };
    /**
     * GET /lookml_models -> ILookmlModel[]
     */
    LookerSDK.prototype.all_lookml_models = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/lookml_models', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/lookml_tests -> ILookmlTest[]
     */
    LookerSDK.prototype.all_lookml_tests = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} file_id File Id
     */
    file_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/lookml_tests"), { file_id: file_id }, null, options)];
            });
        });
    };
    /**
     * GET /looks -> ILook[]
     */
    LookerSDK.prototype.all_looks = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/looks', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /model_sets -> IModelSet[]
     */
    LookerSDK.prototype.all_model_sets = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/model_sets', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /permission_sets -> IPermissionSet[]
     */
    LookerSDK.prototype.all_permission_sets = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/permission_sets', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /permissions -> IPermission[]
     */
    LookerSDK.prototype.all_permissions = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/permissions', null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/files -> IProjectFile[]
     */
    LookerSDK.prototype.all_project_files = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/files"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects -> IProject[]
     */
    LookerSDK.prototype.all_projects = function (
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/projects', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /roles -> IRole[]
     */
    LookerSDK.prototype.all_roles = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/roles', { fields: request.fields, ids: request.ids }, null, options)];
            });
        });
    };
    /**
     * GET /running_queries -> IRunningQueries[]
     */
    LookerSDK.prototype.all_running_queries = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/running_queries', null, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans -> IScheduledPlan[]
     */
    LookerSDK.prototype.all_scheduled_plans = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/scheduled_plans', {
                        user_id: request.user_id,
                        fields: request.fields,
                        all_users: request.all_users,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /spaces -> ISpaceBase[]
     */
    LookerSDK.prototype.all_spaces = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/spaces', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /themes -> ITheme[]
     */
    LookerSDK.prototype.all_themes = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/themes', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /timezones -> ITimezone[]
     */
    LookerSDK.prototype.all_timezones = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/timezones', null, null, options)];
            });
        });
    };
    /**
     * GET /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]
     */
    LookerSDK.prototype.all_user_attribute_group_values = function (
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/user_attributes/" + user_attribute_id + "/group_values"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /user_attributes -> IUserAttribute[]
     */
    LookerSDK.prototype.all_user_attributes = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/user_attributes', { fields: request.fields, sorts: request.sorts }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_api3 -> ICredentialsApi3[]
     */
    LookerSDK.prototype.all_user_credentials_api3s = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_api3"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_embed -> ICredentialsEmbed[]
     */
    LookerSDK.prototype.all_user_credentials_embeds = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_embed"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /user_login_lockouts -> IUserLoginLockout[]
     */
    LookerSDK.prototype.all_user_login_lockouts = function (
    /**
     * @param {string} fields Include only these fields in the response
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/user_login_lockouts', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/sessions -> ISession[]
     */
    LookerSDK.prototype.all_user_sessions = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/sessions"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users -> IUser[]
     */
    LookerSDK.prototype.all_users = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/users', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        ids: request.ids,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /workspaces -> IWorkspace[]
     */
    LookerSDK.prototype.all_workspaces = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/workspaces', null, null, options)];
            });
        });
    };
    /**
     * GET /backup_configuration -> IBackupConfiguration
     */
    LookerSDK.prototype.backup_configuration = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/backup_configuration', null, null, options)];
            });
        });
    };
    /**
     * GET /color_collections/{collection_id} -> IColorCollection
     */
    LookerSDK.prototype.color_collection = function (
    /**
     * @param {string} collection_id Id of Color Collection
     */
    collection_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/color_collections/" + collection_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /color_collections/custom -> IColorCollection[]
     */
    LookerSDK.prototype.color_collections_custom = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/color_collections/custom', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /color_collections/standard -> IColorCollection[]
     */
    LookerSDK.prototype.color_collections_standard = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/color_collections/standard', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /connections/{connection_name} -> IDBConnection
     */
    LookerSDK.prototype.connection = function (
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/connections/" + connection_name), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_favorite/{content_favorite_id} -> IContentFavorite
     */
    LookerSDK.prototype.content_favorite = function (
    /**
     * @param {number} content_favorite_id Id of favorite content
     */
    content_favorite_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/content_favorite/" + content_favorite_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_metadata/{content_metadata_id} -> IContentMeta
     */
    LookerSDK.prototype.content_metadata = function (
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/content_metadata/" + content_metadata_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_validation -> IContentValidation
     */
    LookerSDK.prototype.content_validation = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/content_validation', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /color_collections -> IColorCollection
     */
    LookerSDK.prototype.create_color_collection = function (
    /**
     * @param {Partial<IWriteColorCollection>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/color_collections', null, body, options)];
            });
        });
    };
    /**
     * POST /connections -> IDBConnection
     */
    LookerSDK.prototype.create_connection = function (
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/connections', null, body, options)];
            });
        });
    };
    /**
     * POST /content_favorite -> IContentFavorite
     */
    LookerSDK.prototype.create_content_favorite = function (
    /**
     * @param {Partial<IWriteContentFavorite>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/content_favorite', null, body, options)];
            });
        });
    };
    /**
     * POST /content_metadata_access -> IContentMetaGroupUser
     */
    LookerSDK.prototype.create_content_metadata_access = function (
    /**
     * @param {Partial<IContentMetaGroupUser>} body
     */
    body, 
    /**
     * @param {boolean} send_boards_notification_email Optionally sends notification email when granting access to a board.
     */
    send_boards_notification_email, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/content_metadata_access', { send_boards_notification_email: send_boards_notification_email }, body, options)];
            });
        });
    };
    /**
     * POST /dashboards -> IDashboard
     */
    LookerSDK.prototype.create_dashboard = function (
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/dashboards', null, body, options)];
            });
        });
    };
    /**
     * POST /dashboard_elements -> IDashboardElement
     */
    LookerSDK.prototype.create_dashboard_element = function (
    /**
     * @param {Partial<IWriteDashboardElement>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/dashboard_elements', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /dashboard_filters -> IDashboardFilter
     */
    LookerSDK.prototype.create_dashboard_filter = function (
    /**
     * @param {Partial<IWriteCreateDashboardFilter>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/dashboard_filters', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /dashboard_layouts -> IDashboardLayout
     */
    LookerSDK.prototype.create_dashboard_layout = function (
    /**
     * @param {Partial<IWriteDashboardLayout>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/dashboard_layouts', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /render_tasks/dashboards/{dashboard_id}/{result_format} -> IRenderTask
     */
    LookerSDK.prototype.create_dashboard_render_task = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/render_tasks/dashboards/" + request.dashboard_id + "/" + request.result_format), {
                        width: request.width,
                        height: request.height,
                        fields: request.fields,
                        pdf_paper_size: request.pdf_paper_size,
                        pdf_landscape: request.pdf_landscape,
                    }, request.body, options)];
            });
        });
    };
    /**
     * POST /folders -> IFolder
     */
    LookerSDK.prototype.create_folder = function (
    /**
     * @param {Partial<IWriteCreateFolder>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/folders', null, body, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/git_branch -> IGitBranch
     */
    LookerSDK.prototype.create_git_branch = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {Partial<IWriteGitBranch>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/projects/" + project_id + "/git_branch"), null, body, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/git/deploy_key -> string
     */
    LookerSDK.prototype.create_git_deploy_key = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/projects/" + project_id + "/git/deploy_key"), null, null, options)];
            });
        });
    };
    /**
     * POST /groups -> IGroup
     */
    LookerSDK.prototype.create_group = function (
    /**
     * @param {Partial<IWriteGroup>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/groups', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /homepages -> IHomepage
     */
    LookerSDK.prototype.create_homepage = function (
    /**
     * @param {Partial<IWriteHomepage>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/homepages', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /homepage_items -> IHomepageItem
     */
    LookerSDK.prototype.create_homepage_item = function (
    /**
     * @param {Partial<IWriteHomepageItem>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/homepage_items', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /homepage_sections -> IHomepageSection
     */
    LookerSDK.prototype.create_homepage_section = function (
    /**
     * @param {Partial<IWriteHomepageSection>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/homepage_sections', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /integration_hubs -> IIntegrationHub
     */
    LookerSDK.prototype.create_integration_hub = function (
    /**
     * @param {Partial<IWriteIntegrationHub>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/integration_hubs', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /looks -> ILookWithQuery
     */
    LookerSDK.prototype.create_look = function (
    /**
     * @param {Partial<IWriteLookWithQuery>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/looks', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /render_tasks/looks/{look_id}/{result_format} -> IRenderTask
     */
    LookerSDK.prototype.create_look_render_task = function (
    /**
     * @param {number} look_id Id of look to render
     */
    look_id, 
    /**
     * @param {string} result_format Output type: png, or jpg
     */
    result_format, 
    /**
     * @param {number} width Output width in pixels
     */
    width, 
    /**
     * @param {number} height Output height in pixels
     */
    height, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/render_tasks/looks/" + look_id + "/" + result_format), { width: width, height: height, fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /render_tasks/lookml_dashboards/{dashboard_id}/{result_format} -> IRenderTask
     */
    LookerSDK.prototype.create_lookml_dashboard_render_task = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/render_tasks/lookml_dashboards/" + request.dashboard_id + "/" + request.result_format), {
                        width: request.width,
                        height: request.height,
                        fields: request.fields,
                        pdf_paper_size: request.pdf_paper_size,
                        pdf_landscape: request.pdf_landscape,
                    }, request.body, options)];
            });
        });
    };
    /**
     * POST /lookml_models -> ILookmlModel
     */
    LookerSDK.prototype.create_lookml_model = function (
    /**
     * @param {Partial<IWriteLookmlModel>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/lookml_models', null, body, options)];
            });
        });
    };
    /**
     * POST /merge_queries -> IMergeQuery
     */
    LookerSDK.prototype.create_merge_query = function (
    /**
     * @param {Partial<IWriteMergeQuery>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/merge_queries', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /model_sets -> IModelSet
     */
    LookerSDK.prototype.create_model_set = function (
    /**
     * @param {Partial<IWriteModelSet>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/model_sets', null, body, options)];
            });
        });
    };
    /**
     * POST /oidc_test_configs -> IOIDCConfig
     */
    LookerSDK.prototype.create_oidc_test_config = function (
    /**
     * @param {Partial<IWriteOIDCConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/oidc_test_configs', null, body, options)];
            });
        });
    };
    /**
     * POST /permission_sets -> IPermissionSet
     */
    LookerSDK.prototype.create_permission_set = function (
    /**
     * @param {Partial<IWritePermissionSet>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/permission_sets', null, body, options)];
            });
        });
    };
    /**
     * POST /projects -> IProject
     */
    LookerSDK.prototype.create_project = function (
    /**
     * @param {Partial<IWriteProject>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/projects', null, body, options)];
            });
        });
    };
    /**
     * POST /queries -> IQuery
     */
    LookerSDK.prototype.create_query = function (
    /**
     * @param {Partial<IWriteQuery>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/queries', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /render_tasks/queries/{query_id}/{result_format} -> IRenderTask
     */
    LookerSDK.prototype.create_query_render_task = function (
    /**
     * @param {number} query_id Id of the query to render
     */
    query_id, 
    /**
     * @param {string} result_format Output type: png or jpg
     */
    result_format, 
    /**
     * @param {number} width Output width in pixels
     */
    width, 
    /**
     * @param {number} height Output height in pixels
     */
    height, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/render_tasks/queries/" + query_id + "/" + result_format), { width: width, height: height, fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /query_tasks -> IQueryTask
     */
    LookerSDK.prototype.create_query_task = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/query_tasks', {
                        limit: request.limit,
                        apply_formatting: request.apply_formatting,
                        apply_vis: request.apply_vis,
                        cache: request.cache,
                        image_width: request.image_width,
                        image_height: request.image_height,
                        generate_drill_links: request.generate_drill_links,
                        force_production: request.force_production,
                        cache_only: request.cache_only,
                        path_prefix: request.path_prefix,
                        rebuild_pdts: request.rebuild_pdts,
                        server_table_calcs: request.server_table_calcs,
                        fields: request.fields,
                    }, request.body, options)];
            });
        });
    };
    /**
     * POST /roles -> IRole
     */
    LookerSDK.prototype.create_role = function (
    /**
     * @param {Partial<IWriteRole>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/roles', null, body, options)];
            });
        });
    };
    /**
     * POST /saml_test_configs -> ISamlConfig
     */
    LookerSDK.prototype.create_saml_test_config = function (
    /**
     * @param {Partial<IWriteSamlConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/saml_test_configs', null, body, options)];
            });
        });
    };
    /**
     * POST /scheduled_plans -> IScheduledPlan
     */
    LookerSDK.prototype.create_scheduled_plan = function (
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/scheduled_plans', null, body, options)];
            });
        });
    };
    /**
     * POST /spaces -> ISpace
     */
    LookerSDK.prototype.create_space = function (
    /**
     * @param {Partial<IWriteCreateSpace>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/spaces', null, body, options)];
            });
        });
    };
    /**
     * POST /sql_queries -> ISqlQuery
     */
    LookerSDK.prototype.create_sql_query = function (
    /**
     * @param {Partial<IWriteSqlQueryCreate>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/sql_queries', null, body, options)];
            });
        });
    };
    /**
     * POST /embed/sso_url -> IEmbedSsoUrl
     */
    LookerSDK.prototype.create_sso_embed_url = function (
    /**
     * @param {Partial<IWriteEmbedSsoUrlParams>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/embed/sso_url', null, body, options)];
            });
        });
    };
    /**
     * POST /themes -> ITheme
     */
    LookerSDK.prototype.create_theme = function (
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/themes', null, body, options)];
            });
        });
    };
    /**
     * POST /users -> IUser
     */
    LookerSDK.prototype.create_user = function (
    /**
     * @param {Partial<IWriteUser>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/users', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /user_attributes -> IUserAttribute
     */
    LookerSDK.prototype.create_user_attribute = function (
    /**
     * @param {Partial<IWriteUserAttribute>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/user_attributes', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /users/{user_id}/credentials_api3 -> ICredentialsApi3
     */
    LookerSDK.prototype.create_user_credentials_api3 = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<ICredentialsApi3>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/users/" + user_id + "/credentials_api3"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /users/{user_id}/credentials_email -> ICredentialsEmail
     */
    LookerSDK.prototype.create_user_credentials_email = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<IWriteCredentialsEmail>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/users/" + user_id + "/credentials_email"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /users/{user_id}/credentials_email/password_reset -> ICredentialsEmail
     */
    LookerSDK.prototype.create_user_credentials_email_password_reset = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/users/" + request.user_id + "/credentials_email/password_reset"), { expires: request.expires, fields: request.fields }, null, options)];
            });
        });
    };
    /**
     * POST /users/{user_id}/credentials_totp -> ICredentialsTotp
     */
    LookerSDK.prototype.create_user_credentials_totp = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<ICredentialsTotp>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/users/" + user_id + "/credentials_totp"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * GET /custom_welcome_email -> ICustomWelcomeEmail
     */
    LookerSDK.prototype.custom_welcome_email = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/custom_welcome_email', null, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/{dashboard_id} -> IDashboard
     */
    LookerSDK.prototype.dashboard = function (
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboards/" + dashboard_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/{dashboard_id}/dashboard_elements -> IDashboardElement[]
     */
    LookerSDK.prototype.dashboard_dashboard_elements = function (
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboards/" + dashboard_id + "/dashboard_elements"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/{dashboard_id}/dashboard_filters -> IDashboardFilter[]
     */
    LookerSDK.prototype.dashboard_dashboard_filters = function (
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboards/" + dashboard_id + "/dashboard_filters"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/{dashboard_id}/dashboard_layouts -> IDashboardLayout[]
     */
    LookerSDK.prototype.dashboard_dashboard_layouts = function (
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboards/" + dashboard_id + "/dashboard_layouts"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_elements/{dashboard_element_id} -> IDashboardElement
     */
    LookerSDK.prototype.dashboard_element = function (
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboard_elements/" + dashboard_element_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter
     */
    LookerSDK.prototype.dashboard_filter = function (
    /**
     * @param {string} dashboard_filter_id Id of dashboard filters
     */
    dashboard_filter_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboard_filters/" + dashboard_filter_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout
     */
    LookerSDK.prototype.dashboard_layout = function (
    /**
     * @param {string} dashboard_layout_id Id of dashboard layouts
     */
    dashboard_layout_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboard_layouts/" + dashboard_layout_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent
     */
    LookerSDK.prototype.dashboard_layout_component = function (
    /**
     * @param {string} dashboard_layout_component_id Id of dashboard layout component
     */
    dashboard_layout_component_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboard_layout_components/" + dashboard_layout_component_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components -> IDashboardLayoutComponent[]
     */
    LookerSDK.prototype.dashboard_layout_dashboard_layout_components = function (
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout component
     */
    dashboard_layout_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboard_layouts/" + dashboard_layout_id + "/dashboard_layout_components"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /datagroups/{datagroup_id} -> IDatagroup
     */
    LookerSDK.prototype.datagroup = function (
    /**
     * @param {string} datagroup_id ID of datagroup.
     */
    datagroup_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/datagroups/" + datagroup_id), null, null, options)];
            });
        });
    };
    /**
     * GET /color_collections/default -> IColorCollection
     */
    LookerSDK.prototype.default_color_collection = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/color_collections/default', null, null, options)];
            });
        });
    };
    /**
     * GET /themes/default -> ITheme
     */
    LookerSDK.prototype.default_theme = function (
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/themes/default', { ts: ts }, null, options)];
            });
        });
    };
    /**
     * DELETE /color_collections/{collection_id} -> string
     */
    LookerSDK.prototype.delete_color_collection = function (
    /**
     * @param {string} collection_id Id of Color Collection
     */
    collection_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/color_collections/" + collection_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /connections/{connection_name} -> string
     */
    LookerSDK.prototype.delete_connection = function (
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/connections/" + connection_name), null, null, options)];
            });
        });
    };
    /**
     * DELETE /connections/{connection_name}/connection_override/{override_context} -> string
     */
    LookerSDK.prototype.delete_connection_override = function (
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, 
    /**
     * @param {string} override_context Context of connection override
     */
    override_context, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/connections/" + connection_name + "/connection_override/" + override_context), null, null, options)];
            });
        });
    };
    /**
     * DELETE /content_favorite/{content_favorite_id} -> string
     */
    LookerSDK.prototype.delete_content_favorite = function (
    /**
     * @param {number} content_favorite_id Id of favorite content
     */
    content_favorite_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/content_favorite/" + content_favorite_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /content_metadata_access/{content_metadata_access_id} -> string
     */
    LookerSDK.prototype.delete_content_metadata_access = function (
    /**
     * @param {number} content_metadata_access_id Id of content metadata access
     */
    content_metadata_access_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/content_metadata_access/" + content_metadata_access_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /dashboards/{dashboard_id} -> string
     */
    LookerSDK.prototype.delete_dashboard = function (
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/dashboards/" + dashboard_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /dashboard_elements/{dashboard_element_id} -> string
     */
    LookerSDK.prototype.delete_dashboard_element = function (
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/dashboard_elements/" + dashboard_element_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /dashboard_filters/{dashboard_filter_id} -> string
     */
    LookerSDK.prototype.delete_dashboard_filter = function (
    /**
     * @param {string} dashboard_filter_id Id of dashboard filter
     */
    dashboard_filter_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/dashboard_filters/" + dashboard_filter_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /dashboard_layouts/{dashboard_layout_id} -> string
     */
    LookerSDK.prototype.delete_dashboard_layout = function (
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout
     */
    dashboard_layout_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/dashboard_layouts/" + dashboard_layout_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /folders/{folder_id} -> string
     */
    LookerSDK.prototype.delete_folder = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/folders/" + folder_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /projects/{project_id}/git_branch/{branch_name} -> string
     */
    LookerSDK.prototype.delete_git_branch = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} branch_name Branch Name
     */
    branch_name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/projects/" + project_id + "/git_branch/" + branch_name), null, null, options)];
            });
        });
    };
    /**
     * DELETE /groups/{group_id} -> string
     */
    LookerSDK.prototype.delete_group = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/groups/" + group_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /groups/{group_id}/groups/{deleting_group_id} -> void
     */
    LookerSDK.prototype.delete_group_from_group = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {number} deleting_group_id Id of group to delete
     */
    deleting_group_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/groups/" + group_id + "/groups/" + deleting_group_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /groups/{group_id}/users/{user_id} -> void
     */
    LookerSDK.prototype.delete_group_user = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {number} user_id Id of user to remove from group
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/groups/" + group_id + "/users/" + user_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /homepages/{homepage_id} -> string
     */
    LookerSDK.prototype.delete_homepage = function (
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/homepages/" + homepage_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /homepage_items/{homepage_item_id} -> string
     */
    LookerSDK.prototype.delete_homepage_item = function (
    /**
     * @param {number} homepage_item_id Id of homepage_item
     */
    homepage_item_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/homepage_items/" + homepage_item_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /homepage_sections/{homepage_section_id} -> string
     */
    LookerSDK.prototype.delete_homepage_section = function (
    /**
     * @param {number} homepage_section_id Id of homepage_section
     */
    homepage_section_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/homepage_sections/" + homepage_section_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /integration_hubs/{integration_hub_id} -> string
     */
    LookerSDK.prototype.delete_integration_hub = function (
    /**
     * @param {number} integration_hub_id Id of integration_hub
     */
    integration_hub_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/integration_hubs/" + integration_hub_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /looks/{look_id} -> string
     */
    LookerSDK.prototype.delete_look = function (
    /**
     * @param {number} look_id Id of look
     */
    look_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/looks/" + look_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /lookml_models/{lookml_model_name} -> string
     */
    LookerSDK.prototype.delete_lookml_model = function (
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/lookml_models/" + lookml_model_name), null, null, options)];
            });
        });
    };
    /**
     * DELETE /model_sets/{model_set_id} -> string
     */
    LookerSDK.prototype.delete_model_set = function (
    /**
     * @param {number} model_set_id id of model set
     */
    model_set_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/model_sets/" + model_set_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /oidc_test_configs/{test_slug} -> string
     */
    LookerSDK.prototype.delete_oidc_test_config = function (
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/oidc_test_configs/" + test_slug), null, null, options)];
            });
        });
    };
    /**
     * DELETE /permission_sets/{permission_set_id} -> string
     */
    LookerSDK.prototype.delete_permission_set = function (
    /**
     * @param {number} permission_set_id Id of permission set
     */
    permission_set_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/permission_sets/" + permission_set_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /projects/{root_project_id}/credential/{credential_id} -> string
     */
    LookerSDK.prototype.delete_repository_credential = function (
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id, 
    /**
     * @param {string} credential_id Credential Id
     */
    credential_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/projects/" + root_project_id + "/credential/" + credential_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /roles/{role_id} -> string
     */
    LookerSDK.prototype.delete_role = function (
    /**
     * @param {number} role_id id of role
     */
    role_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/roles/" + role_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /saml_test_configs/{test_slug} -> string
     */
    LookerSDK.prototype.delete_saml_test_config = function (
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/saml_test_configs/" + test_slug), null, null, options)];
            });
        });
    };
    /**
     * DELETE /scheduled_plans/{scheduled_plan_id} -> string
     */
    LookerSDK.prototype.delete_scheduled_plan = function (
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/scheduled_plans/" + scheduled_plan_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /spaces/{space_id} -> string
     */
    LookerSDK.prototype.delete_space = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/spaces/" + space_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /themes/{theme_id} -> string
     */
    LookerSDK.prototype.delete_theme = function (
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/themes/" + theme_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id} -> string
     */
    LookerSDK.prototype.delete_user = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /user_attributes/{user_attribute_id} -> string
     */
    LookerSDK.prototype.delete_user_attribute = function (
    /**
     * @param {number} user_attribute_id Id of user_attribute
     */
    user_attribute_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/user_attributes/" + user_attribute_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /groups/{group_id}/attribute_values/{user_attribute_id} -> void
     */
    LookerSDK.prototype.delete_user_attribute_group_value = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/groups/" + group_id + "/attribute_values/" + user_attribute_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/attribute_values/{user_attribute_id} -> void
     */
    LookerSDK.prototype.delete_user_attribute_user_value = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/attribute_values/" + user_attribute_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_api3/{credentials_api3_id} -> string
     */
    LookerSDK.prototype.delete_user_credentials_api3 = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {number} credentials_api3_id id of API 3 Credential
     */
    credentials_api3_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_api3/" + credentials_api3_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_email -> string
     */
    LookerSDK.prototype.delete_user_credentials_email = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_email"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_embed/{credentials_embed_id} -> string
     */
    LookerSDK.prototype.delete_user_credentials_embed = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {number} credentials_embed_id id of Embedding Credential
     */
    credentials_embed_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_embed/" + credentials_embed_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_google -> string
     */
    LookerSDK.prototype.delete_user_credentials_google = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_google"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_ldap -> string
     */
    LookerSDK.prototype.delete_user_credentials_ldap = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_ldap"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_looker_openid -> string
     */
    LookerSDK.prototype.delete_user_credentials_looker_openid = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_looker_openid"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_oidc -> string
     */
    LookerSDK.prototype.delete_user_credentials_oidc = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_oidc"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_saml -> string
     */
    LookerSDK.prototype.delete_user_credentials_saml = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_saml"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_totp -> string
     */
    LookerSDK.prototype.delete_user_credentials_totp = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_totp"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /user_login_lockout/{key} -> string
     */
    LookerSDK.prototype.delete_user_login_lockout = function (
    /**
     * @param {string} key The key associated with the locked user
     */
    key, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/user_login_lockout/" + key), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/sessions/{session_id} -> string
     */
    LookerSDK.prototype.delete_user_session = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {number} session_id id of Web Login Session
     */
    session_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/sessions/" + session_id), null, null, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/deploy_to_production -> string
     */
    LookerSDK.prototype.deploy_to_production = function (
    /**
     * @param {string} project_id Id of project
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/projects/" + project_id + "/deploy_to_production"), null, null, options)];
            });
        });
    };
    /**
     * POST /fetch_and_parse_saml_idp_metadata -> ISamlMetadataParseResult
     */
    LookerSDK.prototype.fetch_and_parse_saml_idp_metadata = function (
    /**
     * @param {Partial<string>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/fetch_and_parse_saml_idp_metadata', null, body, options)];
            });
        });
    };
    /**
     * POST /integrations/{integration_id}/form -> IDataActionForm
     */
    LookerSDK.prototype.fetch_integration_form = function (
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/integrations/" + integration_id + "/form"), null, null, options)];
            });
        });
    };
    /**
     * POST /data_actions/form -> IDataActionForm
     */
    LookerSDK.prototype.fetch_remote_data_action_form = function (
    /**
     * @param {Partial<IDictionary<string>>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/data_actions/form', null, body, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_branch/{branch_name} -> IGitBranch
     */
    LookerSDK.prototype.find_git_branch = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} branch_name Branch Name
     */
    branch_name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/git_branch/" + branch_name), null, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id} -> IFolder
     */
    LookerSDK.prototype.folder = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + folder_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/ancestors -> IFolder[]
     */
    LookerSDK.prototype.folder_ancestors = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + folder_id + "/ancestors"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/children -> IFolder[]
     */
    LookerSDK.prototype.folder_children = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + request.folder_id + "/children"), {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/children/search -> IFolder[]
     */
    LookerSDK.prototype.folder_children_search = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + request.folder_id + "/children/search"), { fields: request.fields, sorts: request.sorts, name: request.name }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/dashboards -> IDashboard[]
     */
    LookerSDK.prototype.folder_dashboards = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + folder_id + "/dashboards"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/looks -> ILookWithQuery[]
     */
    LookerSDK.prototype.folder_looks = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + folder_id + "/looks"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/parent -> IFolder
     */
    LookerSDK.prototype.folder_parent = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + folder_id + "/parent"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * PUT /password_config/force_password_reset_at_next_login_for_all_users -> string
     */
    LookerSDK.prototype.force_password_reset_at_next_login_for_all_users = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/password_config/force_password_reset_at_next_login_for_all_users', null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{root_project_id}/credentials -> IRepositoryCredential[]
     */
    LookerSDK.prototype.get_all_repository_credentials = function (
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + root_project_id + "/credentials"), null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_branch -> IGitBranch
     */
    LookerSDK.prototype.git_branch = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/git_branch"), null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git/deploy_key -> string
     */
    LookerSDK.prototype.git_deploy_key = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/git/deploy_key"), null, null, options)];
            });
        });
    };
    /**
     * GET /groups/{group_id} -> IGroup
     */
    LookerSDK.prototype.group = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/groups/" + group_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /homepages/{homepage_id} -> IHomepage
     */
    LookerSDK.prototype.homepage = function (
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/homepages/" + homepage_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /homepage_items/{homepage_item_id} -> IHomepageItem
     */
    LookerSDK.prototype.homepage_item = function (
    /**
     * @param {number} homepage_item_id Id of homepage item
     */
    homepage_item_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/homepage_items/" + homepage_item_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /homepage_sections/{homepage_section_id} -> IHomepageSection
     */
    LookerSDK.prototype.homepage_section = function (
    /**
     * @param {number} homepage_section_id Id of homepage section
     */
    homepage_section_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/homepage_sections/" + homepage_section_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /dashboards/{lookml_dashboard_id}/import/{space_id} -> IDashboard
     */
    LookerSDK.prototype.import_lookml_dashboard = function (
    /**
     * @param {string} lookml_dashboard_id Id of LookML dashboard
     */
    lookml_dashboard_id, 
    /**
     * @param {string} space_id Id of space to import the dashboard to
     */
    space_id, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body, 
    /**
     * @param {boolean} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
     */
    raw_locale, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/dashboards/" + lookml_dashboard_id + "/import/" + space_id), { raw_locale: raw_locale }, body, options)];
            });
        });
    };
    /**
     * GET /integrations/{integration_id} -> IIntegration
     */
    LookerSDK.prototype.integration = function (
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/integrations/" + integration_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /integration_hubs/{integration_hub_id} -> IIntegrationHub
     */
    LookerSDK.prototype.integration_hub = function (
    /**
     * @param {number} integration_hub_id Id of Integration Hub
     */
    integration_hub_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/integration_hubs/" + integration_hub_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /internal_help_resources_enabled -> IInternalHelpResources
     */
    LookerSDK.prototype.internal_help_resources = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/internal_help_resources_enabled', null, null, options)];
            });
        });
    };
    /**
     * GET /internal_help_resources_content -> IInternalHelpResourcesContent
     */
    LookerSDK.prototype.internal_help_resources_content = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/internal_help_resources_content', null, null, options)];
            });
        });
    };
    /**
     * DELETE /running_queries/{query_task_id} -> string
     */
    LookerSDK.prototype.kill_query = function (
    /**
     * @param {string} query_task_id Query task id.
     */
    query_task_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/running_queries/" + query_task_id), null, null, options)];
            });
        });
    };
    /**
     * GET /ldap_config -> ILDAPConfig
     */
    LookerSDK.prototype.ldap_config = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/ldap_config', null, null, options)];
            });
        });
    };
    /**
     * GET /legacy_features/{legacy_feature_id} -> ILegacyFeature
     */
    LookerSDK.prototype.legacy_feature = function (
    /**
     * @param {number} legacy_feature_id id of legacy feature
     */
    legacy_feature_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/legacy_features/" + legacy_feature_id), null, null, options)];
            });
        });
    };
    /**
     * POST /login -> IAccessToken
     */
    LookerSDK.prototype.login = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/login', { client_id: request.client_id, client_secret: request.client_secret }, null, options)];
            });
        });
    };
    /**
     * POST /login/{user_id} -> IAccessToken
     */
    LookerSDK.prototype.login_user = function (
    /**
     * @param {number} user_id Id of user.
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/login/" + user_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /logout -> string
     */
    LookerSDK.prototype.logout = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete('/logout', null, null, options)];
            });
        });
    };
    /**
     * GET /looks/{look_id} -> ILookWithQuery
     */
    LookerSDK.prototype.look = function (
    /**
     * @param {number} look_id Id of look
     */
    look_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/looks/" + look_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /lookml_models/{lookml_model_name} -> ILookmlModel
     */
    LookerSDK.prototype.lookml_model = function (
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/lookml_models/" + lookml_model_name), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /lookml_models/{lookml_model_name}/explores/{explore_name} -> ILookmlModelExplore
     */
    LookerSDK.prototype.lookml_model_explore = function (
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name, 
    /**
     * @param {string} explore_name Name of explore.
     */
    explore_name, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/lookml_models/" + lookml_model_name + "/explores/" + explore_name), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/manifest -> IManifest
     */
    LookerSDK.prototype.manifest = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/manifest"), null, null, options)];
            });
        });
    };
    /**
     * GET /user -> IUser
     */
    LookerSDK.prototype.me = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/user', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /merge_queries/{merge_query_id} -> IMergeQuery
     */
    LookerSDK.prototype.merge_query = function (
    /**
     * @param {string} merge_query_id Merge Query Id
     */
    merge_query_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/merge_queries/" + merge_query_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /model_sets/{model_set_id} -> IModelSet
     */
    LookerSDK.prototype.model_set = function (
    /**
     * @param {number} model_set_id Id of model set
     */
    model_set_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/model_sets/" + model_set_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /oidc_config -> IOIDCConfig
     */
    LookerSDK.prototype.oidc_config = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/oidc_config', null, null, options)];
            });
        });
    };
    /**
     * GET /oidc_test_configs/{test_slug} -> IOIDCConfig
     */
    LookerSDK.prototype.oidc_test_config = function (
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/oidc_test_configs/" + test_slug), null, null, options)];
            });
        });
    };
    /**
     * POST /parse_saml_idp_metadata -> ISamlMetadataParseResult
     */
    LookerSDK.prototype.parse_saml_idp_metadata = function (
    /**
     * @param {Partial<string>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/parse_saml_idp_metadata', null, body, options)];
            });
        });
    };
    /**
     * GET /password_config -> IPasswordConfig
     */
    LookerSDK.prototype.password_config = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/password_config', null, null, options)];
            });
        });
    };
    /**
     * POST /data_actions -> IDataActionResponse
     */
    LookerSDK.prototype.perform_data_action = function (
    /**
     * @param {Partial<IWriteDataActionRequest>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/data_actions', null, body, options)];
            });
        });
    };
    /**
     * GET /permission_sets/{permission_set_id} -> IPermissionSet
     */
    LookerSDK.prototype.permission_set = function (
    /**
     * @param {number} permission_set_id Id of permission set
     */
    permission_set_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/permission_sets/" + permission_set_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id} -> IProject
     */
    LookerSDK.prototype.project = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/files/file -> IProjectFile
     */
    LookerSDK.prototype.project_file = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} file_id File Id
     */
    file_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/files/file"), { file_id: file_id, fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/validate -> IProjectValidationCache
     */
    LookerSDK.prototype.project_validation_results = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/validate"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/current_workspace -> IProjectWorkspace
     */
    LookerSDK.prototype.project_workspace = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/current_workspace"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /queries/{query_id} -> IQuery
     */
    LookerSDK.prototype.query = function (
    /**
     * @param {number} query_id Id of query
     */
    query_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/queries/" + query_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /queries/slug/{slug} -> IQuery
     */
    LookerSDK.prototype.query_for_slug = function (
    /**
     * @param {string} slug Slug of query
     */
    slug, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/queries/slug/" + slug), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /query_tasks/{query_task_id} -> IQueryTask
     */
    LookerSDK.prototype.query_task = function (
    /**
     * @param {string} query_task_id ID of the Query Task
     */
    query_task_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/query_tasks/" + query_task_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /query_tasks/multi_results -> IDictionary<string>
     */
    LookerSDK.prototype.query_task_multi_results = function (
    /**
     * @param {DelimArray<string>} query_task_ids List of Query Task IDs
     */
    query_task_ids, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/query_tasks/multi_results', { query_task_ids: query_task_ids }, null, options)];
            });
        });
    };
    /**
     * GET /query_tasks/{query_task_id}/results -> IDictionary<string>
     */
    LookerSDK.prototype.query_task_results = function (
    /**
     * @param {string} query_task_id ID of the Query Task
     */
    query_task_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/query_tasks/" + query_task_id + "/results"), null, null, options)];
            });
        });
    };
    /**
     * GET /render_tasks/{render_task_id} -> IRenderTask
     */
    LookerSDK.prototype.render_task = function (
    /**
     * @param {string} render_task_id Id of render task
     */
    render_task_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/render_tasks/" + render_task_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /render_tasks/{render_task_id}/results -> string
     *
     * **Note**: Binary content is returned by this method.
     */
    LookerSDK.prototype.render_task_results = function (
    /**
     * @param {string} render_task_id Id of render task
     */
    render_task_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/render_tasks/" + render_task_id + "/results"), null, null, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/reset_to_production -> string
     */
    LookerSDK.prototype.reset_project_to_production = function (
    /**
     * @param {string} project_id Id of project
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/projects/" + project_id + "/reset_to_production"), null, null, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/reset_to_remote -> string
     */
    LookerSDK.prototype.reset_project_to_remote = function (
    /**
     * @param {string} project_id Id of project
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/projects/" + project_id + "/reset_to_remote"), null, null, options)];
            });
        });
    };
    /**
     * GET /roles/{role_id} -> IRole
     */
    LookerSDK.prototype.role = function (
    /**
     * @param {number} role_id id of role
     */
    role_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/roles/" + role_id), null, null, options)];
            });
        });
    };
    /**
     * GET /roles/{role_id}/groups -> IGroup[]
     */
    LookerSDK.prototype.role_groups = function (
    /**
     * @param {number} role_id id of role
     */
    role_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/roles/" + role_id + "/groups"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /roles/{role_id}/users -> IUser[]
     */
    LookerSDK.prototype.role_users = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/roles/" + request.role_id + "/users"), {
                        fields: request.fields,
                        direct_association_only: request.direct_association_only,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_connection_tests/{test_id} -> IGitConnectionTestResult
     */
    LookerSDK.prototype.run_git_connection_test = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} test_id Test Id
     */
    test_id, 
    /**
     * @param {string} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
     */
    remote_url, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/git_connection_tests/" + test_id), { remote_url: remote_url }, null, options)];
            });
        });
    };
    /**
     * POST /queries/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDK.prototype.run_inline_query = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/queries/run/" + request.result_format), {
                        limit: request.limit,
                        apply_formatting: request.apply_formatting,
                        apply_vis: request.apply_vis,
                        cache: request.cache,
                        image_width: request.image_width,
                        image_height: request.image_height,
                        generate_drill_links: request.generate_drill_links,
                        force_production: request.force_production,
                        cache_only: request.cache_only,
                        path_prefix: request.path_prefix,
                        rebuild_pdts: request.rebuild_pdts,
                        server_table_calcs: request.server_table_calcs,
                    }, request.body, options)];
            });
        });
    };
    /**
     * GET /looks/{look_id}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDK.prototype.run_look = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/looks/" + request.look_id + "/run/" + request.result_format), {
                        limit: request.limit,
                        apply_formatting: request.apply_formatting,
                        apply_vis: request.apply_vis,
                        cache: request.cache,
                        image_width: request.image_width,
                        image_height: request.image_height,
                        generate_drill_links: request.generate_drill_links,
                        force_production: request.force_production,
                        cache_only: request.cache_only,
                        path_prefix: request.path_prefix,
                        rebuild_pdts: request.rebuild_pdts,
                        server_table_calcs: request.server_table_calcs,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/lookml_tests/run -> ILookmlTestResult[]
     */
    LookerSDK.prototype.run_lookml_test = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + request.project_id + "/lookml_tests/run"), { file_id: request.file_id, test: request.test, model: request.model }, null, options)];
            });
        });
    };
    /**
     * GET /queries/{query_id}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDK.prototype.run_query = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/queries/" + request.query_id + "/run/" + request.result_format), {
                        limit: request.limit,
                        apply_formatting: request.apply_formatting,
                        apply_vis: request.apply_vis,
                        cache: request.cache,
                        image_width: request.image_width,
                        image_height: request.image_height,
                        generate_drill_links: request.generate_drill_links,
                        force_production: request.force_production,
                        cache_only: request.cache_only,
                        path_prefix: request.path_prefix,
                        rebuild_pdts: request.rebuild_pdts,
                        server_table_calcs: request.server_table_calcs,
                    }, null, options)];
            });
        });
    };
    /**
     * POST /sql_queries/{slug}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDK.prototype.run_sql_query = function (
    /**
     * @param {string} slug slug of query
     */
    slug, 
    /**
     * @param {string} result_format Format of result, options are: ["json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml", "json_label"]
     */
    result_format, 
    /**
     * @param {string} download Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.
     */
    download, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/sql_queries/" + slug + "/run/" + result_format), { download: download }, null, options)];
            });
        });
    };
    /**
     * GET /queries/models/{model_name}/views/{view_name}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDK.prototype.run_url_encoded_query = function (
    /**
     * @param {string} model_name Model name
     */
    model_name, 
    /**
     * @param {string} view_name View name
     */
    view_name, 
    /**
     * @param {string} result_format Format of result
     */
    result_format, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/queries/models/" + model_name + "/views/" + view_name + "/run/" + result_format), null, null, options)];
            });
        });
    };
    /**
     * GET /saml_config -> ISamlConfig
     */
    LookerSDK.prototype.saml_config = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/saml_config', null, null, options)];
            });
        });
    };
    /**
     * GET /saml_test_configs/{test_slug} -> ISamlConfig
     */
    LookerSDK.prototype.saml_test_config = function (
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/saml_test_configs/" + test_slug), null, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan
     */
    LookerSDK.prototype.scheduled_plan = function (
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/scheduled_plans/" + scheduled_plan_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /scheduled_plans/run_once -> IScheduledPlan
     */
    LookerSDK.prototype.scheduled_plan_run_once = function (
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/scheduled_plans/run_once', null, body, options)];
            });
        });
    };
    /**
     * POST /scheduled_plans/{scheduled_plan_id}/run_once -> IScheduledPlan
     */
    LookerSDK.prototype.scheduled_plan_run_once_by_id = function (
    /**
     * @param {number} scheduled_plan_id Id of schedule plan to copy and run
     */
    scheduled_plan_id, 
    /**
     * @param {Partial<IWriteWriteScheduledPlan>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/scheduled_plans/" + scheduled_plan_id + "/run_once"), null, body, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/dashboard/{dashboard_id} -> IScheduledPlan[]
     */
    LookerSDK.prototype.scheduled_plans_for_dashboard = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/scheduled_plans/dashboard/" + request.dashboard_id), {
                        user_id: request.user_id,
                        all_users: request.all_users,
                        fields: request.fields,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/look/{look_id} -> IScheduledPlan[]
     */
    LookerSDK.prototype.scheduled_plans_for_look = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/scheduled_plans/look/" + request.look_id), {
                        user_id: request.user_id,
                        fields: request.fields,
                        all_users: request.all_users,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/lookml_dashboard/{lookml_dashboard_id} -> IScheduledPlan[]
     */
    LookerSDK.prototype.scheduled_plans_for_lookml_dashboard = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/scheduled_plans/lookml_dashboard/" + request.lookml_dashboard_id), {
                        user_id: request.user_id,
                        fields: request.fields,
                        all_users: request.all_users,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/space/{space_id} -> IScheduledPlan[]
     */
    LookerSDK.prototype.scheduled_plans_for_space = function (
    /**
     * @param {number} space_id Space Id
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/scheduled_plans/space/" + space_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_favorite/search -> IContentFavorite[]
     */
    LookerSDK.prototype.search_content_favorites = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/content_favorite/search', {
                        id: request.id,
                        user_id: request.user_id,
                        content_metadata_id: request.content_metadata_id,
                        dashboard_id: request.dashboard_id,
                        look_id: request.look_id,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        fields: request.fields,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /content_view/search -> IContentView[]
     */
    LookerSDK.prototype.search_content_views = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/content_view/search', {
                        view_count: request.view_count,
                        group_id: request.group_id,
                        look_id: request.look_id,
                        dashboard_id: request.dashboard_id,
                        content_metadata_id: request.content_metadata_id,
                        start_of_week_date: request.start_of_week_date,
                        all_time: request.all_time,
                        user_id: request.user_id,
                        fields: request.fields,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_elements/search -> IDashboardElement[]
     */
    LookerSDK.prototype.search_dashboard_elements = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/dashboard_elements/search', {
                        dashboard_id: request.dashboard_id,
                        look_id: request.look_id,
                        title: request.title,
                        deleted: request.deleted,
                        fields: request.fields,
                        filter_or: request.filter_or,
                        sorts: request.sorts,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/search -> IDashboard[]
     */
    LookerSDK.prototype.search_dashboards = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/dashboards/search', {
                        id: request.id,
                        slug: request.slug,
                        title: request.title,
                        description: request.description,
                        content_favorite_id: request.content_favorite_id,
                        space_id: request.space_id,
                        deleted: request.deleted,
                        user_id: request.user_id,
                        view_count: request.view_count,
                        content_metadata_id: request.content_metadata_id,
                        curate: request.curate,
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /folders/search -> IFolder[]
     */
    LookerSDK.prototype.search_folders = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/folders/search', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        name: request.name,
                        id: request.id,
                        parent_id: request.parent_id,
                        creator_id: request.creator_id,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /groups/search -> IGroup[]
     */
    LookerSDK.prototype.search_groups = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/groups/search', {
                        fields: request.fields,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        filter_or: request.filter_or,
                        id: request.id,
                        name: request.name,
                        external_group_id: request.external_group_id,
                        externally_managed: request.externally_managed,
                        externally_orphaned: request.externally_orphaned,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /homepages/search -> IHomepage[]
     */
    LookerSDK.prototype.search_homepages = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/homepages/search', {
                        title: request.title,
                        created_at: request.created_at,
                        first_name: request.first_name,
                        last_name: request.last_name,
                        fields: request.fields,
                        favorited: request.favorited,
                        creator_id: request.creator_id,
                        sorts: request.sorts,
                        page: request.page,
                        per_page: request.per_page,
                        offset: request.offset,
                        limit: request.limit,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /looks/search -> ILook[]
     */
    LookerSDK.prototype.search_looks = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/looks/search', {
                        title: request.title,
                        description: request.description,
                        content_favorite_id: request.content_favorite_id,
                        space_id: request.space_id,
                        user_id: request.user_id,
                        view_count: request.view_count,
                        deleted: request.deleted,
                        query_id: request.query_id,
                        curate: request.curate,
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /model_sets/search -> IModelSet[]
     */
    LookerSDK.prototype.search_model_sets = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/model_sets/search', {
                        fields: request.fields,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        id: request.id,
                        name: request.name,
                        all_access: request.all_access,
                        built_in: request.built_in,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /permission_sets/search -> IPermissionSet[]
     */
    LookerSDK.prototype.search_permission_sets = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/permission_sets/search', {
                        fields: request.fields,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        id: request.id,
                        name: request.name,
                        all_access: request.all_access,
                        built_in: request.built_in,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /roles/search -> IRole[]
     */
    LookerSDK.prototype.search_roles = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/roles/search', {
                        fields: request.fields,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        id: request.id,
                        name: request.name,
                        built_in: request.built_in,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/search -> ISpace[]
     */
    LookerSDK.prototype.search_spaces = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/spaces/search', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        name: request.name,
                        id: request.id,
                        parent_id: request.parent_id,
                        creator_id: request.creator_id,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /themes/search -> ITheme[]
     */
    LookerSDK.prototype.search_themes = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/themes/search', {
                        id: request.id,
                        name: request.name,
                        begin_at: request.begin_at,
                        end_at: request.end_at,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        fields: request.fields,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /user_login_lockouts/search -> IUserLoginLockout[]
     */
    LookerSDK.prototype.search_user_login_lockouts = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/user_login_lockouts/search', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        auth_type: request.auth_type,
                        full_name: request.full_name,
                        email: request.email,
                        remote_id: request.remote_id,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /users/search -> IUser[]
     */
    LookerSDK.prototype.search_users = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/users/search', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        id: request.id,
                        first_name: request.first_name,
                        last_name: request.last_name,
                        verified_looker_employee: request.verified_looker_employee,
                        email: request.email,
                        is_disabled: request.is_disabled,
                        filter_or: request.filter_or,
                        content_metadata_id: request.content_metadata_id,
                        group_id: request.group_id,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /users/search/names/{pattern} -> IUser[]
     */
    LookerSDK.prototype.search_users_names = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/search/names/" + request.pattern), {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        id: request.id,
                        first_name: request.first_name,
                        last_name: request.last_name,
                        verified_looker_employee: request.verified_looker_employee,
                        email: request.email,
                        is_disabled: request.is_disabled,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /session -> IApiSession
     */
    LookerSDK.prototype.session = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/session', null, null, options)];
            });
        });
    };
    /**
     * GET /session_config -> ISessionConfig
     */
    LookerSDK.prototype.session_config = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/session_config', null, null, options)];
            });
        });
    };
    /**
     * PUT /color_collections/default -> IColorCollection
     */
    LookerSDK.prototype.set_default_color_collection = function (
    /**
     * @param {string} collection_id ID of color collection to set as default
     */
    collection_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/color_collections/default', { collection_id: collection_id }, null, options)];
            });
        });
    };
    /**
     * PUT /themes/default -> ITheme
     */
    LookerSDK.prototype.set_default_theme = function (
    /**
     * @param {string} name Name of theme to set as default
     */
    name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/themes/default', { name: name }, null, options)];
            });
        });
    };
    /**
     * PUT /roles/{role_id}/groups -> IGroup[]
     */
    LookerSDK.prototype.set_role_groups = function (
    /**
     * @param {number} role_id Id of Role
     */
    role_id, 
    /**
     * @param {Partial<number[]>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/roles/" + role_id + "/groups"), null, body, options)];
            });
        });
    };
    /**
     * PUT /roles/{role_id}/users -> IUser[]
     */
    LookerSDK.prototype.set_role_users = function (
    /**
     * @param {number} role_id id of role
     */
    role_id, 
    /**
     * @param {Partial<number[]>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/roles/" + role_id + "/users"), null, body, options)];
            });
        });
    };
    /**
     * POST /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]
     */
    LookerSDK.prototype.set_user_attribute_group_values = function (
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {Partial<IUserAttributeGroupValue[]>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/user_attributes/" + user_attribute_id + "/group_values"), null, body, options)];
            });
        });
    };
    /**
     * PATCH /users/{user_id}/attribute_values/{user_attribute_id} -> IUserAttributeWithValue
     */
    LookerSDK.prototype.set_user_attribute_user_value = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {Partial<IWriteUserAttributeWithValue>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/users/" + user_id + "/attribute_values/" + user_attribute_id), null, body, options)];
            });
        });
    };
    /**
     * PUT /users/{user_id}/roles -> IRole[]
     */
    LookerSDK.prototype.set_user_roles = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<number[]>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/users/" + user_id + "/roles"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id} -> ISpace
     */
    LookerSDK.prototype.space = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + space_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/ancestors -> ISpace[]
     */
    LookerSDK.prototype.space_ancestors = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + space_id + "/ancestors"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/children -> ISpace[]
     */
    LookerSDK.prototype.space_children = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + request.space_id + "/children"), {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/children/search -> ISpace[]
     */
    LookerSDK.prototype.space_children_search = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + request.space_id + "/children/search"), { fields: request.fields, sorts: request.sorts, name: request.name }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/dashboards -> IDashboard[]
     */
    LookerSDK.prototype.space_dashboards = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + space_id + "/dashboards"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/looks -> ILookWithQuery[]
     */
    LookerSDK.prototype.space_looks = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + space_id + "/looks"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/parent -> ISpace
     */
    LookerSDK.prototype.space_parent = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + space_id + "/parent"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /sql_queries/{slug} -> ISqlQuery
     */
    LookerSDK.prototype.sql_query = function (
    /**
     * @param {string} slug slug of query
     */
    slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/sql_queries/" + slug), null, null, options)];
            });
        });
    };
    /**
     * PATCH /dashboards/{lookml_dashboard_id}/sync -> number[]
     */
    LookerSDK.prototype.sync_lookml_dashboard = function (
    /**
     * @param {string} lookml_dashboard_id Id of LookML dashboard, in the form 'model::dashboardname'
     */
    lookml_dashboard_id, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body, 
    /**
     * @param {boolean} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
     */
    raw_locale, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/dashboards/" + lookml_dashboard_id + "/sync"), { raw_locale: raw_locale }, body, options)];
            });
        });
    };
    /**
     * PUT /connections/{connection_name}/test -> IDBConnectionTestResult[]
     */
    LookerSDK.prototype.test_connection = function (
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, 
    /**
     * @param {DelimArray<string>} tests Array of names of tests to run
     */
    tests, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/connections/" + connection_name + "/test"), { tests: tests }, null, options)];
            });
        });
    };
    /**
     * PUT /connections/test -> IDBConnectionTestResult[]
     */
    LookerSDK.prototype.test_connection_config = function (
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body, 
    /**
     * @param {DelimArray<string>} tests Array of names of tests to run
     */
    tests, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/connections/test', { tests: tests }, body, options)];
            });
        });
    };
    /**
     * POST /integrations/{integration_id}/test -> IIntegrationTestResult
     */
    LookerSDK.prototype.test_integration = function (
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/integrations/" + integration_id + "/test"), null, null, options)];
            });
        });
    };
    /**
     * PUT /ldap_config/test_auth -> ILDAPConfigTestResult
     */
    LookerSDK.prototype.test_ldap_config_auth = function (
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/ldap_config/test_auth', null, body, options)];
            });
        });
    };
    /**
     * PUT /ldap_config/test_connection -> ILDAPConfigTestResult
     */
    LookerSDK.prototype.test_ldap_config_connection = function (
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/ldap_config/test_connection', null, body, options)];
            });
        });
    };
    /**
     * PUT /ldap_config/test_user_auth -> ILDAPConfigTestResult
     */
    LookerSDK.prototype.test_ldap_config_user_auth = function (
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/ldap_config/test_user_auth', null, body, options)];
            });
        });
    };
    /**
     * PUT /ldap_config/test_user_info -> ILDAPConfigTestResult
     */
    LookerSDK.prototype.test_ldap_config_user_info = function (
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/ldap_config/test_user_info', null, body, options)];
            });
        });
    };
    /**
     * GET /themes/{theme_id} -> ITheme
     */
    LookerSDK.prototype.theme = function (
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/themes/" + theme_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /themes/theme_or_default -> ITheme
     */
    LookerSDK.prototype.theme_or_default = function (
    /**
     * @param {string} name Name of theme
     */
    name, 
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/themes/theme_or_default', { name: name, ts: ts }, null, options)];
            });
        });
    };
    /**
     * PATCH /backup_configuration -> IBackupConfiguration
     */
    LookerSDK.prototype.update_backup_configuration = function (
    /**
     * @param {Partial<IWriteBackupConfiguration>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/backup_configuration', null, body, options)];
            });
        });
    };
    /**
     * PATCH /color_collections/{collection_id} -> IColorCollection
     */
    LookerSDK.prototype.update_color_collection = function (
    /**
     * @param {string} collection_id Id of Custom Color Collection
     */
    collection_id, 
    /**
     * @param {Partial<IWriteColorCollection>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/color_collections/" + collection_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /connections/{connection_name} -> IDBConnection
     */
    LookerSDK.prototype.update_connection = function (
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, 
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/connections/" + connection_name), null, body, options)];
            });
        });
    };
    /**
     * PATCH /content_metadata/{content_metadata_id} -> IContentMeta
     */
    LookerSDK.prototype.update_content_metadata = function (
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id, 
    /**
     * @param {Partial<IWriteContentMeta>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/content_metadata/" + content_metadata_id), null, body, options)];
            });
        });
    };
    /**
     * PUT /content_metadata_access/{content_metadata_access_id} -> IContentMetaGroupUser
     */
    LookerSDK.prototype.update_content_metadata_access = function (
    /**
     * @param {number} content_metadata_access_id Id of content metadata access
     */
    content_metadata_access_id, 
    /**
     * @param {Partial<IContentMetaGroupUser>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/content_metadata_access/" + content_metadata_access_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /custom_welcome_email -> ICustomWelcomeEmail
     */
    LookerSDK.prototype.update_custom_welcome_email = function (
    /**
     * @param {Partial<IWriteCustomWelcomeEmail>} body
     */
    body, 
    /**
     * @param {boolean} send_test_welcome_email If true a test email with the content from the request will be sent to the current user after saving
     */
    send_test_welcome_email, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/custom_welcome_email', { send_test_welcome_email: send_test_welcome_email }, body, options)];
            });
        });
    };
    /**
     * PUT /custom_welcome_email_test -> IWelcomeEmailTest
     */
    LookerSDK.prototype.update_custom_welcome_email_test = function (
    /**
     * @param {Partial<IWriteWelcomeEmailTest>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/custom_welcome_email_test', null, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboards/{dashboard_id} -> IDashboard
     */
    LookerSDK.prototype.update_dashboard = function (
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/dashboards/" + dashboard_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboard_elements/{dashboard_element_id} -> IDashboardElement
     */
    LookerSDK.prototype.update_dashboard_element = function (
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id, 
    /**
     * @param {Partial<IWriteDashboardElement>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/dashboard_elements/" + dashboard_element_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter
     */
    LookerSDK.prototype.update_dashboard_filter = function (
    /**
     * @param {string} dashboard_filter_id Id of dashboard filter
     */
    dashboard_filter_id, 
    /**
     * @param {Partial<IWriteDashboardFilter>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/dashboard_filters/" + dashboard_filter_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout
     */
    LookerSDK.prototype.update_dashboard_layout = function (
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout
     */
    dashboard_layout_id, 
    /**
     * @param {Partial<IWriteDashboardLayout>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/dashboard_layouts/" + dashboard_layout_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent
     */
    LookerSDK.prototype.update_dashboard_layout_component = function (
    /**
     * @param {string} dashboard_layout_component_id Id of dashboard layout component
     */
    dashboard_layout_component_id, 
    /**
     * @param {Partial<IWriteDashboardLayoutComponent>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/dashboard_layout_components/" + dashboard_layout_component_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /datagroups/{datagroup_id} -> IDatagroup
     */
    LookerSDK.prototype.update_datagroup = function (
    /**
     * @param {string} datagroup_id ID of datagroup.
     */
    datagroup_id, 
    /**
     * @param {Partial<IWriteDatagroup>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/datagroups/" + datagroup_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /folders/{folder_id} -> IFolder
     */
    LookerSDK.prototype.update_folder = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {Partial<IWriteUpdateFolder>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/folders/" + folder_id), null, body, options)];
            });
        });
    };
    /**
     * PUT /projects/{project_id}/git_branch -> IGitBranch
     */
    LookerSDK.prototype.update_git_branch = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {Partial<IWriteGitBranch>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/projects/" + project_id + "/git_branch"), null, body, options)];
            });
        });
    };
    /**
     * PATCH /groups/{group_id} -> IGroup
     */
    LookerSDK.prototype.update_group = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {Partial<IWriteGroup>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/groups/" + group_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /homepages/{homepage_id} -> IHomepage
     */
    LookerSDK.prototype.update_homepage = function (
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id, 
    /**
     * @param {Partial<IWriteHomepage>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/homepages/" + homepage_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /homepage_items/{homepage_item_id} -> IHomepageItem
     */
    LookerSDK.prototype.update_homepage_item = function (
    /**
     * @param {number} homepage_item_id Id of homepage item
     */
    homepage_item_id, 
    /**
     * @param {Partial<IWriteHomepageItem>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/homepage_items/" + homepage_item_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /homepage_sections/{homepage_section_id} -> IHomepageSection
     */
    LookerSDK.prototype.update_homepage_section = function (
    /**
     * @param {number} homepage_section_id Id of homepage section
     */
    homepage_section_id, 
    /**
     * @param {Partial<IWriteHomepageSection>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/homepage_sections/" + homepage_section_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /integrations/{integration_id} -> IIntegration
     */
    LookerSDK.prototype.update_integration = function (
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id, 
    /**
     * @param {Partial<IWriteIntegration>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/integrations/" + integration_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /integration_hubs/{integration_hub_id} -> IIntegrationHub
     */
    LookerSDK.prototype.update_integration_hub = function (
    /**
     * @param {number} integration_hub_id Id of Integration Hub
     */
    integration_hub_id, 
    /**
     * @param {Partial<IWriteIntegrationHub>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/integration_hubs/" + integration_hub_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /internal_help_resources -> IInternalHelpResources
     */
    LookerSDK.prototype.update_internal_help_resources = function (
    /**
     * @param {Partial<IWriteInternalHelpResources>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/internal_help_resources', null, body, options)];
            });
        });
    };
    /**
     * PATCH /internal_help_resources_content -> IInternalHelpResourcesContent
     */
    LookerSDK.prototype.update_internal_help_resources_content = function (
    /**
     * @param {Partial<IWriteInternalHelpResourcesContent>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/internal_help_resources_content', null, body, options)];
            });
        });
    };
    /**
     * PATCH /ldap_config -> ILDAPConfig
     */
    LookerSDK.prototype.update_ldap_config = function (
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/ldap_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /legacy_features/{legacy_feature_id} -> ILegacyFeature
     */
    LookerSDK.prototype.update_legacy_feature = function (
    /**
     * @param {number} legacy_feature_id id of legacy feature
     */
    legacy_feature_id, 
    /**
     * @param {Partial<IWriteLegacyFeature>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/legacy_features/" + legacy_feature_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /looks/{look_id} -> ILookWithQuery
     */
    LookerSDK.prototype.update_look = function (
    /**
     * @param {number} look_id Id of look
     */
    look_id, 
    /**
     * @param {Partial<IWriteLookWithQuery>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/looks/" + look_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /lookml_models/{lookml_model_name} -> ILookmlModel
     */
    LookerSDK.prototype.update_lookml_model = function (
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name, 
    /**
     * @param {Partial<IWriteLookmlModel>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/lookml_models/" + lookml_model_name), null, body, options)];
            });
        });
    };
    /**
     * PATCH /model_sets/{model_set_id} -> IModelSet
     */
    LookerSDK.prototype.update_model_set = function (
    /**
     * @param {number} model_set_id id of model set
     */
    model_set_id, 
    /**
     * @param {Partial<IWriteModelSet>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/model_sets/" + model_set_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /oidc_config -> IOIDCConfig
     */
    LookerSDK.prototype.update_oidc_config = function (
    /**
     * @param {Partial<IWriteOIDCConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/oidc_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /password_config -> IPasswordConfig
     */
    LookerSDK.prototype.update_password_config = function (
    /**
     * @param {Partial<IWritePasswordConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/password_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /permission_sets/{permission_set_id} -> IPermissionSet
     */
    LookerSDK.prototype.update_permission_set = function (
    /**
     * @param {number} permission_set_id id of permission set
     */
    permission_set_id, 
    /**
     * @param {Partial<IWritePermissionSet>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/permission_sets/" + permission_set_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /projects/{project_id} -> IProject
     */
    LookerSDK.prototype.update_project = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {Partial<IWriteProject>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/projects/" + project_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PUT /projects/{root_project_id}/credential/{credential_id} -> IRepositoryCredential
     */
    LookerSDK.prototype.update_repository_credential = function (
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id, 
    /**
     * @param {string} credential_id Credential Id
     */
    credential_id, 
    /**
     * @param {Partial<IWriteRepositoryCredential>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/projects/" + root_project_id + "/credential/" + credential_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /roles/{role_id} -> IRole
     */
    LookerSDK.prototype.update_role = function (
    /**
     * @param {number} role_id id of role
     */
    role_id, 
    /**
     * @param {Partial<IWriteRole>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/roles/" + role_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /saml_config -> ISamlConfig
     */
    LookerSDK.prototype.update_saml_config = function (
    /**
     * @param {Partial<IWriteSamlConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/saml_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan
     */
    LookerSDK.prototype.update_scheduled_plan = function (
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id, 
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/scheduled_plans/" + scheduled_plan_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /session -> IApiSession
     */
    LookerSDK.prototype.update_session = function (
    /**
     * @param {Partial<IWriteApiSession>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/session', null, body, options)];
            });
        });
    };
    /**
     * PATCH /session_config -> ISessionConfig
     */
    LookerSDK.prototype.update_session_config = function (
    /**
     * @param {Partial<IWriteSessionConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/session_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /spaces/{space_id} -> ISpace
     */
    LookerSDK.prototype.update_space = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {Partial<IWriteUpdateSpace>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/spaces/" + space_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /themes/{theme_id} -> ITheme
     */
    LookerSDK.prototype.update_theme = function (
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id, 
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/themes/" + theme_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /users/{user_id} -> IUser
     */
    LookerSDK.prototype.update_user = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {Partial<IWriteUser>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/users/" + user_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /user_attributes/{user_attribute_id} -> IUserAttribute
     */
    LookerSDK.prototype.update_user_attribute = function (
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {Partial<IWriteUserAttribute>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/user_attributes/" + user_attribute_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /groups/{group_id}/attribute_values/{user_attribute_id} -> IUserAttributeGroupValue
     */
    LookerSDK.prototype.update_user_attribute_group_value = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {Partial<IUserAttributeGroupValue>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/groups/" + group_id + "/attribute_values/" + user_attribute_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /users/{user_id}/credentials_email -> ICredentialsEmail
     */
    LookerSDK.prototype.update_user_credentials_email = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<IWriteCredentialsEmail>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/users/" + user_id + "/credentials_email"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PUT /whitelabel_configuration -> IWhitelabelConfiguration
     */
    LookerSDK.prototype.update_whitelabel_configuration = function (
    /**
     * @param {Partial<IWriteWhitelabelConfiguration>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/whitelabel_configuration', null, body, options)];
            });
        });
    };
    /**
     * GET /users/{user_id} -> IUser
     */
    LookerSDK.prototype.user = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /user_attributes/{user_attribute_id} -> IUserAttribute
     */
    LookerSDK.prototype.user_attribute = function (
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/user_attributes/" + user_attribute_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/attribute_values -> IUserAttributeWithValue[]
     */
    LookerSDK.prototype.user_attribute_user_values = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + request.user_id + "/attribute_values"), {
                        fields: request.fields,
                        user_attribute_ids: request.user_attribute_ids,
                        all_values: request.all_values,
                        include_unset: request.include_unset,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_api3/{credentials_api3_id} -> ICredentialsApi3
     */
    LookerSDK.prototype.user_credentials_api3 = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} credentials_api3_id Id of API 3 Credential
     */
    credentials_api3_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_api3/" + credentials_api3_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_email -> ICredentialsEmail
     */
    LookerSDK.prototype.user_credentials_email = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_email"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_embed/{credentials_embed_id} -> ICredentialsEmbed
     */
    LookerSDK.prototype.user_credentials_embed = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} credentials_embed_id Id of Embedding Credential
     */
    credentials_embed_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_embed/" + credentials_embed_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_google -> ICredentialsGoogle
     */
    LookerSDK.prototype.user_credentials_google = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_google"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_ldap -> ICredentialsLDAP
     */
    LookerSDK.prototype.user_credentials_ldap = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_ldap"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_looker_openid -> ICredentialsLookerOpenid
     */
    LookerSDK.prototype.user_credentials_looker_openid = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_looker_openid"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_oidc -> ICredentialsOIDC
     */
    LookerSDK.prototype.user_credentials_oidc = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_oidc"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_saml -> ICredentialsSaml
     */
    LookerSDK.prototype.user_credentials_saml = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_saml"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_totp -> ICredentialsTotp
     */
    LookerSDK.prototype.user_credentials_totp = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_totp"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/credential/{credential_type}/{credential_id} -> IUser
     */
    LookerSDK.prototype.user_for_credential = function (
    /**
     * @param {string} credential_type Type name of credential
     */
    credential_type, 
    /**
     * @param {string} credential_id Id of credential
     */
    credential_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/credential/" + credential_type + "/" + credential_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/roles -> IRole[]
     */
    LookerSDK.prototype.user_roles = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + request.user_id + "/roles"), {
                        fields: request.fields,
                        direct_association_only: request.direct_association_only,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/sessions/{session_id} -> ISession
     */
    LookerSDK.prototype.user_session = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} session_id Id of Web Login Session
     */
    session_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/sessions/" + session_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/validate -> IProjectValidation
     */
    LookerSDK.prototype.validate_project = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/projects/" + project_id + "/validate"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /themes/validate -> IValidationError
     */
    LookerSDK.prototype.validate_theme = function (
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/themes/validate', null, body, options)];
            });
        });
    };
    /**
     * GET /versions -> IApiVersion
     */
    LookerSDK.prototype.versions = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/versions', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /whitelabel_configuration -> IWhitelabelConfiguration
     */
    LookerSDK.prototype.whitelabel_configuration = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/whitelabel_configuration', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /workspaces/{workspace_id} -> IWorkspace
     */
    LookerSDK.prototype.workspace = function (
    /**
     * @param {string} workspace_id Id of the workspace
     */
    workspace_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/workspaces/" + workspace_id), null, null, options)];
            });
        });
    };
    return LookerSDK;
}(apiMethods_1.APIMethods));
exports.LookerSDK = LookerSDK;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/sdk/methods.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/sdk/methods.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/sdk/streams.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/sdk/streams.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 337 API methods
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var apiMethods_1 = __webpack_require__(/*! ../rtl/apiMethods */ "./node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/rtl/apiMethods.js");
var LookerSDKStream = /** @class */ (function (_super) {
    __extends(LookerSDKStream, _super);
    function LookerSDKStream() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * POST /integration_hubs/{integration_hub_id}/accept_legal_agreement -> IIntegrationHub
     */
    LookerSDKStream.prototype.accept_integration_hub_legal_agreement = function (callback, 
    /**
     * @param {number} integration_hub_id Id of integration_hub
     */
    integration_hub_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/integration_hubs/" + integration_hub_id + "/accept_legal_agreement"), null, null, options)];
            });
        });
    };
    /**
     * GET /themes/active -> ITheme[]
     */
    LookerSDKStream.prototype.active_themes = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/themes/active', { name: request.name, ts: request.ts, fields: request.fields }, null, options)];
            });
        });
    };
    /**
     * POST /groups/{group_id}/groups -> IGroup
     */
    LookerSDKStream.prototype.add_group_group = function (callback, 
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {Partial<IGroupIdForGroupInclusion>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/groups/" + group_id + "/groups"), null, body, options)];
            });
        });
    };
    /**
     * POST /groups/{group_id}/users -> IUser
     */
    LookerSDKStream.prototype.add_group_user = function (callback, 
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {Partial<IGroupIdForGroupUserInclusion>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/groups/" + group_id + "/users"), null, body, options)];
            });
        });
    };
    /**
     * GET /color_collections -> IColorCollection[]
     */
    LookerSDKStream.prototype.all_color_collections = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/color_collections', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /connections -> IDBConnection[]
     */
    LookerSDKStream.prototype.all_connections = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/connections', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_metadata_access -> IContentMetaGroupUser[]
     */
    LookerSDKStream.prototype.all_content_metadata_accesses = function (callback, 
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/content_metadata_access', { content_metadata_id: content_metadata_id, fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_metadata -> IContentMeta[]
     */
    LookerSDKStream.prototype.all_content_metadatas = function (callback, 
    /**
     * @param {number} parent_id Parent space of content.
     */
    parent_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/content_metadata', { parent_id: parent_id, fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards -> IDashboardBase[]
     */
    LookerSDKStream.prototype.all_dashboards = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/dashboards', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /datagroups -> IDatagroup[]
     */
    LookerSDKStream.prototype.all_datagroups = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/datagroups', null, null, options)];
            });
        });
    };
    /**
     * GET /dialect_info -> IDialectInfo[]
     */
    LookerSDKStream.prototype.all_dialect_infos = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/dialect_info', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders -> IFolder[]
     */
    LookerSDKStream.prototype.all_folders = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/folders', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_branches -> IGitBranch[]
     */
    LookerSDKStream.prototype.all_git_branches = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id + "/git_branches"), null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_connection_tests -> IGitConnectionTest[]
     */
    LookerSDKStream.prototype.all_git_connection_tests = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
     */
    remote_url, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id + "/git_connection_tests"), { remote_url: remote_url }, null, options)];
            });
        });
    };
    /**
     * GET /groups/{group_id}/groups -> IGroup[]
     */
    LookerSDKStream.prototype.all_group_groups = function (callback, 
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/groups/" + group_id + "/groups"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /groups/{group_id}/users -> IUser[]
     */
    LookerSDKStream.prototype.all_group_users = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/groups/" + request.group_id + "/users"), {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /groups -> IGroup[]
     */
    LookerSDKStream.prototype.all_groups = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/groups', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        ids: request.ids,
                        content_metadata_id: request.content_metadata_id,
                        can_add_to_content_metadata: request.can_add_to_content_metadata,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /homepage_items -> IHomepageItem[]
     */
    LookerSDKStream.prototype.all_homepage_items = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/homepage_items', {
                        fields: request.fields,
                        sorts: request.sorts,
                        homepage_section_id: request.homepage_section_id,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /homepage_sections -> IHomepageSection[]
     */
    LookerSDKStream.prototype.all_homepage_sections = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/homepage_sections', { fields: request.fields, sorts: request.sorts }, null, options)];
            });
        });
    };
    /**
     * GET /homepages -> IHomepage[]
     */
    LookerSDKStream.prototype.all_homepages = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/homepages', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /integration_hubs -> IIntegrationHub[]
     */
    LookerSDKStream.prototype.all_integration_hubs = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/integration_hubs', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /integrations -> IIntegration[]
     */
    LookerSDKStream.prototype.all_integrations = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/integrations', {
                        fields: request.fields,
                        integration_hub_id: request.integration_hub_id,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /legacy_features -> ILegacyFeature[]
     */
    LookerSDKStream.prototype.all_legacy_features = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/legacy_features', null, null, options)];
            });
        });
    };
    /**
     * GET /locales -> ILocale[]
     */
    LookerSDKStream.prototype.all_locales = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/locales', null, null, options)];
            });
        });
    };
    /**
     * GET /lookml_models -> ILookmlModel[]
     */
    LookerSDKStream.prototype.all_lookml_models = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/lookml_models', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/lookml_tests -> ILookmlTest[]
     */
    LookerSDKStream.prototype.all_lookml_tests = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} file_id File Id
     */
    file_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id + "/lookml_tests"), { file_id: file_id }, null, options)];
            });
        });
    };
    /**
     * GET /looks -> ILook[]
     */
    LookerSDKStream.prototype.all_looks = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/looks', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /model_sets -> IModelSet[]
     */
    LookerSDKStream.prototype.all_model_sets = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/model_sets', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /permission_sets -> IPermissionSet[]
     */
    LookerSDKStream.prototype.all_permission_sets = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/permission_sets', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /permissions -> IPermission[]
     */
    LookerSDKStream.prototype.all_permissions = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/permissions', null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/files -> IProjectFile[]
     */
    LookerSDKStream.prototype.all_project_files = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id + "/files"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects -> IProject[]
     */
    LookerSDKStream.prototype.all_projects = function (callback, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/projects', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /roles -> IRole[]
     */
    LookerSDKStream.prototype.all_roles = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/roles', { fields: request.fields, ids: request.ids }, null, options)];
            });
        });
    };
    /**
     * GET /running_queries -> IRunningQueries[]
     */
    LookerSDKStream.prototype.all_running_queries = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/running_queries', null, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans -> IScheduledPlan[]
     */
    LookerSDKStream.prototype.all_scheduled_plans = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/scheduled_plans', {
                        user_id: request.user_id,
                        fields: request.fields,
                        all_users: request.all_users,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /spaces -> ISpaceBase[]
     */
    LookerSDKStream.prototype.all_spaces = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/spaces', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /themes -> ITheme[]
     */
    LookerSDKStream.prototype.all_themes = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/themes', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /timezones -> ITimezone[]
     */
    LookerSDKStream.prototype.all_timezones = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/timezones', null, null, options)];
            });
        });
    };
    /**
     * GET /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]
     */
    LookerSDKStream.prototype.all_user_attribute_group_values = function (callback, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/user_attributes/" + user_attribute_id + "/group_values"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /user_attributes -> IUserAttribute[]
     */
    LookerSDKStream.prototype.all_user_attributes = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/user_attributes', { fields: request.fields, sorts: request.sorts }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_api3 -> ICredentialsApi3[]
     */
    LookerSDKStream.prototype.all_user_credentials_api3s = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/credentials_api3"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_embed -> ICredentialsEmbed[]
     */
    LookerSDKStream.prototype.all_user_credentials_embeds = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/credentials_embed"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /user_login_lockouts -> IUserLoginLockout[]
     */
    LookerSDKStream.prototype.all_user_login_lockouts = function (callback, 
    /**
     * @param {string} fields Include only these fields in the response
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/user_login_lockouts', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/sessions -> ISession[]
     */
    LookerSDKStream.prototype.all_user_sessions = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/sessions"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users -> IUser[]
     */
    LookerSDKStream.prototype.all_users = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/users', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        ids: request.ids,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /workspaces -> IWorkspace[]
     */
    LookerSDKStream.prototype.all_workspaces = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/workspaces', null, null, options)];
            });
        });
    };
    /**
     * GET /backup_configuration -> IBackupConfiguration
     */
    LookerSDKStream.prototype.backup_configuration = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/backup_configuration', null, null, options)];
            });
        });
    };
    /**
     * GET /color_collections/{collection_id} -> IColorCollection
     */
    LookerSDKStream.prototype.color_collection = function (callback, 
    /**
     * @param {string} collection_id Id of Color Collection
     */
    collection_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/color_collections/" + collection_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /color_collections/custom -> IColorCollection[]
     */
    LookerSDKStream.prototype.color_collections_custom = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/color_collections/custom', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /color_collections/standard -> IColorCollection[]
     */
    LookerSDKStream.prototype.color_collections_standard = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/color_collections/standard', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /connections/{connection_name} -> IDBConnection
     */
    LookerSDKStream.prototype.connection = function (callback, 
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/connections/" + connection_name), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_favorite/{content_favorite_id} -> IContentFavorite
     */
    LookerSDKStream.prototype.content_favorite = function (callback, 
    /**
     * @param {number} content_favorite_id Id of favorite content
     */
    content_favorite_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/content_favorite/" + content_favorite_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_metadata/{content_metadata_id} -> IContentMeta
     */
    LookerSDKStream.prototype.content_metadata = function (callback, 
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/content_metadata/" + content_metadata_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_validation -> IContentValidation
     */
    LookerSDKStream.prototype.content_validation = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/content_validation', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /color_collections -> IColorCollection
     */
    LookerSDKStream.prototype.create_color_collection = function (callback, 
    /**
     * @param {Partial<IWriteColorCollection>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/color_collections', null, body, options)];
            });
        });
    };
    /**
     * POST /connections -> IDBConnection
     */
    LookerSDKStream.prototype.create_connection = function (callback, 
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/connections', null, body, options)];
            });
        });
    };
    /**
     * POST /content_favorite -> IContentFavorite
     */
    LookerSDKStream.prototype.create_content_favorite = function (callback, 
    /**
     * @param {Partial<IWriteContentFavorite>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/content_favorite', null, body, options)];
            });
        });
    };
    /**
     * POST /content_metadata_access -> IContentMetaGroupUser
     */
    LookerSDKStream.prototype.create_content_metadata_access = function (callback, 
    /**
     * @param {Partial<IContentMetaGroupUser>} body
     */
    body, 
    /**
     * @param {boolean} send_boards_notification_email Optionally sends notification email when granting access to a board.
     */
    send_boards_notification_email, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/content_metadata_access', { send_boards_notification_email: send_boards_notification_email }, body, options)];
            });
        });
    };
    /**
     * POST /dashboards -> IDashboard
     */
    LookerSDKStream.prototype.create_dashboard = function (callback, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/dashboards', null, body, options)];
            });
        });
    };
    /**
     * POST /dashboard_elements -> IDashboardElement
     */
    LookerSDKStream.prototype.create_dashboard_element = function (callback, 
    /**
     * @param {Partial<IWriteDashboardElement>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/dashboard_elements', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /dashboard_filters -> IDashboardFilter
     */
    LookerSDKStream.prototype.create_dashboard_filter = function (callback, 
    /**
     * @param {Partial<IWriteCreateDashboardFilter>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/dashboard_filters', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /dashboard_layouts -> IDashboardLayout
     */
    LookerSDKStream.prototype.create_dashboard_layout = function (callback, 
    /**
     * @param {Partial<IWriteDashboardLayout>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/dashboard_layouts', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /render_tasks/dashboards/{dashboard_id}/{result_format} -> IRenderTask
     */
    LookerSDKStream.prototype.create_dashboard_render_task = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/render_tasks/dashboards/" + request.dashboard_id + "/" + request.result_format), {
                        width: request.width,
                        height: request.height,
                        fields: request.fields,
                        pdf_paper_size: request.pdf_paper_size,
                        pdf_landscape: request.pdf_landscape,
                    }, request.body, options)];
            });
        });
    };
    /**
     * POST /folders -> IFolder
     */
    LookerSDKStream.prototype.create_folder = function (callback, 
    /**
     * @param {Partial<IWriteCreateFolder>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/folders', null, body, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/git_branch -> IGitBranch
     */
    LookerSDKStream.prototype.create_git_branch = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {Partial<IWriteGitBranch>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/projects/" + project_id + "/git_branch"), null, body, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/git/deploy_key -> string
     */
    LookerSDKStream.prototype.create_git_deploy_key = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/projects/" + project_id + "/git/deploy_key"), null, null, options)];
            });
        });
    };
    /**
     * POST /groups -> IGroup
     */
    LookerSDKStream.prototype.create_group = function (callback, 
    /**
     * @param {Partial<IWriteGroup>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/groups', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /homepages -> IHomepage
     */
    LookerSDKStream.prototype.create_homepage = function (callback, 
    /**
     * @param {Partial<IWriteHomepage>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/homepages', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /homepage_items -> IHomepageItem
     */
    LookerSDKStream.prototype.create_homepage_item = function (callback, 
    /**
     * @param {Partial<IWriteHomepageItem>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/homepage_items', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /homepage_sections -> IHomepageSection
     */
    LookerSDKStream.prototype.create_homepage_section = function (callback, 
    /**
     * @param {Partial<IWriteHomepageSection>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/homepage_sections', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /integration_hubs -> IIntegrationHub
     */
    LookerSDKStream.prototype.create_integration_hub = function (callback, 
    /**
     * @param {Partial<IWriteIntegrationHub>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/integration_hubs', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /looks -> ILookWithQuery
     */
    LookerSDKStream.prototype.create_look = function (callback, 
    /**
     * @param {Partial<IWriteLookWithQuery>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/looks', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /render_tasks/looks/{look_id}/{result_format} -> IRenderTask
     */
    LookerSDKStream.prototype.create_look_render_task = function (callback, 
    /**
     * @param {number} look_id Id of look to render
     */
    look_id, 
    /**
     * @param {string} result_format Output type: png, or jpg
     */
    result_format, 
    /**
     * @param {number} width Output width in pixels
     */
    width, 
    /**
     * @param {number} height Output height in pixels
     */
    height, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/render_tasks/looks/" + look_id + "/" + result_format), { width: width, height: height, fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /render_tasks/lookml_dashboards/{dashboard_id}/{result_format} -> IRenderTask
     */
    LookerSDKStream.prototype.create_lookml_dashboard_render_task = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/render_tasks/lookml_dashboards/" + request.dashboard_id + "/" + request.result_format), {
                        width: request.width,
                        height: request.height,
                        fields: request.fields,
                        pdf_paper_size: request.pdf_paper_size,
                        pdf_landscape: request.pdf_landscape,
                    }, request.body, options)];
            });
        });
    };
    /**
     * POST /lookml_models -> ILookmlModel
     */
    LookerSDKStream.prototype.create_lookml_model = function (callback, 
    /**
     * @param {Partial<IWriteLookmlModel>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/lookml_models', null, body, options)];
            });
        });
    };
    /**
     * POST /merge_queries -> IMergeQuery
     */
    LookerSDKStream.prototype.create_merge_query = function (callback, 
    /**
     * @param {Partial<IWriteMergeQuery>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/merge_queries', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /model_sets -> IModelSet
     */
    LookerSDKStream.prototype.create_model_set = function (callback, 
    /**
     * @param {Partial<IWriteModelSet>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/model_sets', null, body, options)];
            });
        });
    };
    /**
     * POST /oidc_test_configs -> IOIDCConfig
     */
    LookerSDKStream.prototype.create_oidc_test_config = function (callback, 
    /**
     * @param {Partial<IWriteOIDCConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/oidc_test_configs', null, body, options)];
            });
        });
    };
    /**
     * POST /permission_sets -> IPermissionSet
     */
    LookerSDKStream.prototype.create_permission_set = function (callback, 
    /**
     * @param {Partial<IWritePermissionSet>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/permission_sets', null, body, options)];
            });
        });
    };
    /**
     * POST /projects -> IProject
     */
    LookerSDKStream.prototype.create_project = function (callback, 
    /**
     * @param {Partial<IWriteProject>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/projects', null, body, options)];
            });
        });
    };
    /**
     * POST /queries -> IQuery
     */
    LookerSDKStream.prototype.create_query = function (callback, 
    /**
     * @param {Partial<IWriteQuery>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/queries', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /render_tasks/queries/{query_id}/{result_format} -> IRenderTask
     */
    LookerSDKStream.prototype.create_query_render_task = function (callback, 
    /**
     * @param {number} query_id Id of the query to render
     */
    query_id, 
    /**
     * @param {string} result_format Output type: png or jpg
     */
    result_format, 
    /**
     * @param {number} width Output width in pixels
     */
    width, 
    /**
     * @param {number} height Output height in pixels
     */
    height, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/render_tasks/queries/" + query_id + "/" + result_format), { width: width, height: height, fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /query_tasks -> IQueryTask
     */
    LookerSDKStream.prototype.create_query_task = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/query_tasks', {
                        limit: request.limit,
                        apply_formatting: request.apply_formatting,
                        apply_vis: request.apply_vis,
                        cache: request.cache,
                        image_width: request.image_width,
                        image_height: request.image_height,
                        generate_drill_links: request.generate_drill_links,
                        force_production: request.force_production,
                        cache_only: request.cache_only,
                        path_prefix: request.path_prefix,
                        rebuild_pdts: request.rebuild_pdts,
                        server_table_calcs: request.server_table_calcs,
                        fields: request.fields,
                    }, request.body, options)];
            });
        });
    };
    /**
     * POST /roles -> IRole
     */
    LookerSDKStream.prototype.create_role = function (callback, 
    /**
     * @param {Partial<IWriteRole>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/roles', null, body, options)];
            });
        });
    };
    /**
     * POST /saml_test_configs -> ISamlConfig
     */
    LookerSDKStream.prototype.create_saml_test_config = function (callback, 
    /**
     * @param {Partial<IWriteSamlConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/saml_test_configs', null, body, options)];
            });
        });
    };
    /**
     * POST /scheduled_plans -> IScheduledPlan
     */
    LookerSDKStream.prototype.create_scheduled_plan = function (callback, 
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/scheduled_plans', null, body, options)];
            });
        });
    };
    /**
     * POST /spaces -> ISpace
     */
    LookerSDKStream.prototype.create_space = function (callback, 
    /**
     * @param {Partial<IWriteCreateSpace>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/spaces', null, body, options)];
            });
        });
    };
    /**
     * POST /sql_queries -> ISqlQuery
     */
    LookerSDKStream.prototype.create_sql_query = function (callback, 
    /**
     * @param {Partial<IWriteSqlQueryCreate>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/sql_queries', null, body, options)];
            });
        });
    };
    /**
     * POST /embed/sso_url -> IEmbedSsoUrl
     */
    LookerSDKStream.prototype.create_sso_embed_url = function (callback, 
    /**
     * @param {Partial<IWriteEmbedSsoUrlParams>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/embed/sso_url', null, body, options)];
            });
        });
    };
    /**
     * POST /themes -> ITheme
     */
    LookerSDKStream.prototype.create_theme = function (callback, 
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/themes', null, body, options)];
            });
        });
    };
    /**
     * POST /users -> IUser
     */
    LookerSDKStream.prototype.create_user = function (callback, 
    /**
     * @param {Partial<IWriteUser>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/users', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /user_attributes -> IUserAttribute
     */
    LookerSDKStream.prototype.create_user_attribute = function (callback, 
    /**
     * @param {Partial<IWriteUserAttribute>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/user_attributes', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /users/{user_id}/credentials_api3 -> ICredentialsApi3
     */
    LookerSDKStream.prototype.create_user_credentials_api3 = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<ICredentialsApi3>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/users/" + user_id + "/credentials_api3"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /users/{user_id}/credentials_email -> ICredentialsEmail
     */
    LookerSDKStream.prototype.create_user_credentials_email = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<IWriteCredentialsEmail>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/users/" + user_id + "/credentials_email"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /users/{user_id}/credentials_email/password_reset -> ICredentialsEmail
     */
    LookerSDKStream.prototype.create_user_credentials_email_password_reset = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/users/" + request.user_id + "/credentials_email/password_reset"), { expires: request.expires, fields: request.fields }, null, options)];
            });
        });
    };
    /**
     * POST /users/{user_id}/credentials_totp -> ICredentialsTotp
     */
    LookerSDKStream.prototype.create_user_credentials_totp = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<ICredentialsTotp>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/users/" + user_id + "/credentials_totp"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * GET /custom_welcome_email -> ICustomWelcomeEmail
     */
    LookerSDKStream.prototype.custom_welcome_email = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/custom_welcome_email', null, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/{dashboard_id} -> IDashboard
     */
    LookerSDKStream.prototype.dashboard = function (callback, 
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/dashboards/" + dashboard_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/{dashboard_id}/dashboard_elements -> IDashboardElement[]
     */
    LookerSDKStream.prototype.dashboard_dashboard_elements = function (callback, 
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/dashboards/" + dashboard_id + "/dashboard_elements"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/{dashboard_id}/dashboard_filters -> IDashboardFilter[]
     */
    LookerSDKStream.prototype.dashboard_dashboard_filters = function (callback, 
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/dashboards/" + dashboard_id + "/dashboard_filters"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/{dashboard_id}/dashboard_layouts -> IDashboardLayout[]
     */
    LookerSDKStream.prototype.dashboard_dashboard_layouts = function (callback, 
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/dashboards/" + dashboard_id + "/dashboard_layouts"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_elements/{dashboard_element_id} -> IDashboardElement
     */
    LookerSDKStream.prototype.dashboard_element = function (callback, 
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/dashboard_elements/" + dashboard_element_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter
     */
    LookerSDKStream.prototype.dashboard_filter = function (callback, 
    /**
     * @param {string} dashboard_filter_id Id of dashboard filters
     */
    dashboard_filter_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/dashboard_filters/" + dashboard_filter_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout
     */
    LookerSDKStream.prototype.dashboard_layout = function (callback, 
    /**
     * @param {string} dashboard_layout_id Id of dashboard layouts
     */
    dashboard_layout_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/dashboard_layouts/" + dashboard_layout_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent
     */
    LookerSDKStream.prototype.dashboard_layout_component = function (callback, 
    /**
     * @param {string} dashboard_layout_component_id Id of dashboard layout component
     */
    dashboard_layout_component_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/dashboard_layout_components/" + dashboard_layout_component_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components -> IDashboardLayoutComponent[]
     */
    LookerSDKStream.prototype.dashboard_layout_dashboard_layout_components = function (callback, 
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout component
     */
    dashboard_layout_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/dashboard_layouts/" + dashboard_layout_id + "/dashboard_layout_components"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /datagroups/{datagroup_id} -> IDatagroup
     */
    LookerSDKStream.prototype.datagroup = function (callback, 
    /**
     * @param {string} datagroup_id ID of datagroup.
     */
    datagroup_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/datagroups/" + datagroup_id), null, null, options)];
            });
        });
    };
    /**
     * GET /color_collections/default -> IColorCollection
     */
    LookerSDKStream.prototype.default_color_collection = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/color_collections/default', null, null, options)];
            });
        });
    };
    /**
     * GET /themes/default -> ITheme
     */
    LookerSDKStream.prototype.default_theme = function (callback, 
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/themes/default', { ts: ts }, null, options)];
            });
        });
    };
    /**
     * DELETE /color_collections/{collection_id} -> string
     */
    LookerSDKStream.prototype.delete_color_collection = function (callback, 
    /**
     * @param {string} collection_id Id of Color Collection
     */
    collection_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/color_collections/" + collection_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /connections/{connection_name} -> string
     */
    LookerSDKStream.prototype.delete_connection = function (callback, 
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/connections/" + connection_name), null, null, options)];
            });
        });
    };
    /**
     * DELETE /connections/{connection_name}/connection_override/{override_context} -> string
     */
    LookerSDKStream.prototype.delete_connection_override = function (callback, 
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, 
    /**
     * @param {string} override_context Context of connection override
     */
    override_context, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/connections/" + connection_name + "/connection_override/" + override_context), null, null, options)];
            });
        });
    };
    /**
     * DELETE /content_favorite/{content_favorite_id} -> string
     */
    LookerSDKStream.prototype.delete_content_favorite = function (callback, 
    /**
     * @param {number} content_favorite_id Id of favorite content
     */
    content_favorite_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/content_favorite/" + content_favorite_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /content_metadata_access/{content_metadata_access_id} -> string
     */
    LookerSDKStream.prototype.delete_content_metadata_access = function (callback, 
    /**
     * @param {number} content_metadata_access_id Id of content metadata access
     */
    content_metadata_access_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/content_metadata_access/" + content_metadata_access_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /dashboards/{dashboard_id} -> string
     */
    LookerSDKStream.prototype.delete_dashboard = function (callback, 
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/dashboards/" + dashboard_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /dashboard_elements/{dashboard_element_id} -> string
     */
    LookerSDKStream.prototype.delete_dashboard_element = function (callback, 
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/dashboard_elements/" + dashboard_element_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /dashboard_filters/{dashboard_filter_id} -> string
     */
    LookerSDKStream.prototype.delete_dashboard_filter = function (callback, 
    /**
     * @param {string} dashboard_filter_id Id of dashboard filter
     */
    dashboard_filter_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/dashboard_filters/" + dashboard_filter_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /dashboard_layouts/{dashboard_layout_id} -> string
     */
    LookerSDKStream.prototype.delete_dashboard_layout = function (callback, 
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout
     */
    dashboard_layout_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/dashboard_layouts/" + dashboard_layout_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /folders/{folder_id} -> string
     */
    LookerSDKStream.prototype.delete_folder = function (callback, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/folders/" + folder_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /projects/{project_id}/git_branch/{branch_name} -> string
     */
    LookerSDKStream.prototype.delete_git_branch = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} branch_name Branch Name
     */
    branch_name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/projects/" + project_id + "/git_branch/" + branch_name), null, null, options)];
            });
        });
    };
    /**
     * DELETE /groups/{group_id} -> string
     */
    LookerSDKStream.prototype.delete_group = function (callback, 
    /**
     * @param {number} group_id Id of group
     */
    group_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/groups/" + group_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /groups/{group_id}/groups/{deleting_group_id} -> void
     */
    LookerSDKStream.prototype.delete_group_from_group = function (callback, 
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {number} deleting_group_id Id of group to delete
     */
    deleting_group_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/groups/" + group_id + "/groups/" + deleting_group_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /groups/{group_id}/users/{user_id} -> void
     */
    LookerSDKStream.prototype.delete_group_user = function (callback, 
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {number} user_id Id of user to remove from group
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/groups/" + group_id + "/users/" + user_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /homepages/{homepage_id} -> string
     */
    LookerSDKStream.prototype.delete_homepage = function (callback, 
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/homepages/" + homepage_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /homepage_items/{homepage_item_id} -> string
     */
    LookerSDKStream.prototype.delete_homepage_item = function (callback, 
    /**
     * @param {number} homepage_item_id Id of homepage_item
     */
    homepage_item_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/homepage_items/" + homepage_item_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /homepage_sections/{homepage_section_id} -> string
     */
    LookerSDKStream.prototype.delete_homepage_section = function (callback, 
    /**
     * @param {number} homepage_section_id Id of homepage_section
     */
    homepage_section_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/homepage_sections/" + homepage_section_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /integration_hubs/{integration_hub_id} -> string
     */
    LookerSDKStream.prototype.delete_integration_hub = function (callback, 
    /**
     * @param {number} integration_hub_id Id of integration_hub
     */
    integration_hub_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/integration_hubs/" + integration_hub_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /looks/{look_id} -> string
     */
    LookerSDKStream.prototype.delete_look = function (callback, 
    /**
     * @param {number} look_id Id of look
     */
    look_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/looks/" + look_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /lookml_models/{lookml_model_name} -> string
     */
    LookerSDKStream.prototype.delete_lookml_model = function (callback, 
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/lookml_models/" + lookml_model_name), null, null, options)];
            });
        });
    };
    /**
     * DELETE /model_sets/{model_set_id} -> string
     */
    LookerSDKStream.prototype.delete_model_set = function (callback, 
    /**
     * @param {number} model_set_id id of model set
     */
    model_set_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/model_sets/" + model_set_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /oidc_test_configs/{test_slug} -> string
     */
    LookerSDKStream.prototype.delete_oidc_test_config = function (callback, 
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/oidc_test_configs/" + test_slug), null, null, options)];
            });
        });
    };
    /**
     * DELETE /permission_sets/{permission_set_id} -> string
     */
    LookerSDKStream.prototype.delete_permission_set = function (callback, 
    /**
     * @param {number} permission_set_id Id of permission set
     */
    permission_set_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/permission_sets/" + permission_set_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /projects/{root_project_id}/credential/{credential_id} -> string
     */
    LookerSDKStream.prototype.delete_repository_credential = function (callback, 
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id, 
    /**
     * @param {string} credential_id Credential Id
     */
    credential_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/projects/" + root_project_id + "/credential/" + credential_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /roles/{role_id} -> string
     */
    LookerSDKStream.prototype.delete_role = function (callback, 
    /**
     * @param {number} role_id id of role
     */
    role_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/roles/" + role_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /saml_test_configs/{test_slug} -> string
     */
    LookerSDKStream.prototype.delete_saml_test_config = function (callback, 
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/saml_test_configs/" + test_slug), null, null, options)];
            });
        });
    };
    /**
     * DELETE /scheduled_plans/{scheduled_plan_id} -> string
     */
    LookerSDKStream.prototype.delete_scheduled_plan = function (callback, 
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/scheduled_plans/" + scheduled_plan_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /spaces/{space_id} -> string
     */
    LookerSDKStream.prototype.delete_space = function (callback, 
    /**
     * @param {string} space_id Id of space
     */
    space_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/spaces/" + space_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /themes/{theme_id} -> string
     */
    LookerSDKStream.prototype.delete_theme = function (callback, 
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/themes/" + theme_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id} -> string
     */
    LookerSDKStream.prototype.delete_user = function (callback, 
    /**
     * @param {number} user_id Id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/users/" + user_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /user_attributes/{user_attribute_id} -> string
     */
    LookerSDKStream.prototype.delete_user_attribute = function (callback, 
    /**
     * @param {number} user_attribute_id Id of user_attribute
     */
    user_attribute_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/user_attributes/" + user_attribute_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /groups/{group_id}/attribute_values/{user_attribute_id} -> void
     */
    LookerSDKStream.prototype.delete_user_attribute_group_value = function (callback, 
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/groups/" + group_id + "/attribute_values/" + user_attribute_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/attribute_values/{user_attribute_id} -> void
     */
    LookerSDKStream.prototype.delete_user_attribute_user_value = function (callback, 
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/users/" + user_id + "/attribute_values/" + user_attribute_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_api3/{credentials_api3_id} -> string
     */
    LookerSDKStream.prototype.delete_user_credentials_api3 = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {number} credentials_api3_id id of API 3 Credential
     */
    credentials_api3_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/users/" + user_id + "/credentials_api3/" + credentials_api3_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_email -> string
     */
    LookerSDKStream.prototype.delete_user_credentials_email = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/users/" + user_id + "/credentials_email"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_embed/{credentials_embed_id} -> string
     */
    LookerSDKStream.prototype.delete_user_credentials_embed = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {number} credentials_embed_id id of Embedding Credential
     */
    credentials_embed_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/users/" + user_id + "/credentials_embed/" + credentials_embed_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_google -> string
     */
    LookerSDKStream.prototype.delete_user_credentials_google = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/users/" + user_id + "/credentials_google"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_ldap -> string
     */
    LookerSDKStream.prototype.delete_user_credentials_ldap = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/users/" + user_id + "/credentials_ldap"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_looker_openid -> string
     */
    LookerSDKStream.prototype.delete_user_credentials_looker_openid = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/users/" + user_id + "/credentials_looker_openid"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_oidc -> string
     */
    LookerSDKStream.prototype.delete_user_credentials_oidc = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/users/" + user_id + "/credentials_oidc"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_saml -> string
     */
    LookerSDKStream.prototype.delete_user_credentials_saml = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/users/" + user_id + "/credentials_saml"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_totp -> string
     */
    LookerSDKStream.prototype.delete_user_credentials_totp = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/users/" + user_id + "/credentials_totp"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /user_login_lockout/{key} -> string
     */
    LookerSDKStream.prototype.delete_user_login_lockout = function (callback, 
    /**
     * @param {string} key The key associated with the locked user
     */
    key, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/user_login_lockout/" + key), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/sessions/{session_id} -> string
     */
    LookerSDKStream.prototype.delete_user_session = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {number} session_id id of Web Login Session
     */
    session_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/users/" + user_id + "/sessions/" + session_id), null, null, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/deploy_to_production -> string
     */
    LookerSDKStream.prototype.deploy_to_production = function (callback, 
    /**
     * @param {string} project_id Id of project
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/projects/" + project_id + "/deploy_to_production"), null, null, options)];
            });
        });
    };
    /**
     * POST /fetch_and_parse_saml_idp_metadata -> ISamlMetadataParseResult
     */
    LookerSDKStream.prototype.fetch_and_parse_saml_idp_metadata = function (callback, 
    /**
     * @param {Partial<string>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/fetch_and_parse_saml_idp_metadata', null, body, options)];
            });
        });
    };
    /**
     * POST /integrations/{integration_id}/form -> IDataActionForm
     */
    LookerSDKStream.prototype.fetch_integration_form = function (callback, 
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/integrations/" + integration_id + "/form"), null, null, options)];
            });
        });
    };
    /**
     * POST /data_actions/form -> IDataActionForm
     */
    LookerSDKStream.prototype.fetch_remote_data_action_form = function (callback, 
    /**
     * @param {Partial<IDictionary<string>>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/data_actions/form', null, body, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_branch/{branch_name} -> IGitBranch
     */
    LookerSDKStream.prototype.find_git_branch = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} branch_name Branch Name
     */
    branch_name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id + "/git_branch/" + branch_name), null, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id} -> IFolder
     */
    LookerSDKStream.prototype.folder = function (callback, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/folders/" + folder_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/ancestors -> IFolder[]
     */
    LookerSDKStream.prototype.folder_ancestors = function (callback, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/folders/" + folder_id + "/ancestors"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/children -> IFolder[]
     */
    LookerSDKStream.prototype.folder_children = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/folders/" + request.folder_id + "/children"), {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/children/search -> IFolder[]
     */
    LookerSDKStream.prototype.folder_children_search = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/folders/" + request.folder_id + "/children/search"), { fields: request.fields, sorts: request.sorts, name: request.name }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/dashboards -> IDashboard[]
     */
    LookerSDKStream.prototype.folder_dashboards = function (callback, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/folders/" + folder_id + "/dashboards"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/looks -> ILookWithQuery[]
     */
    LookerSDKStream.prototype.folder_looks = function (callback, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/folders/" + folder_id + "/looks"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/parent -> IFolder
     */
    LookerSDKStream.prototype.folder_parent = function (callback, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/folders/" + folder_id + "/parent"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * PUT /password_config/force_password_reset_at_next_login_for_all_users -> string
     */
    LookerSDKStream.prototype.force_password_reset_at_next_login_for_all_users = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', '/password_config/force_password_reset_at_next_login_for_all_users', null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{root_project_id}/credentials -> IRepositoryCredential[]
     */
    LookerSDKStream.prototype.get_all_repository_credentials = function (callback, 
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + root_project_id + "/credentials"), null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_branch -> IGitBranch
     */
    LookerSDKStream.prototype.git_branch = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id + "/git_branch"), null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git/deploy_key -> string
     */
    LookerSDKStream.prototype.git_deploy_key = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id + "/git/deploy_key"), null, null, options)];
            });
        });
    };
    /**
     * GET /groups/{group_id} -> IGroup
     */
    LookerSDKStream.prototype.group = function (callback, 
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/groups/" + group_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /homepages/{homepage_id} -> IHomepage
     */
    LookerSDKStream.prototype.homepage = function (callback, 
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/homepages/" + homepage_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /homepage_items/{homepage_item_id} -> IHomepageItem
     */
    LookerSDKStream.prototype.homepage_item = function (callback, 
    /**
     * @param {number} homepage_item_id Id of homepage item
     */
    homepage_item_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/homepage_items/" + homepage_item_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /homepage_sections/{homepage_section_id} -> IHomepageSection
     */
    LookerSDKStream.prototype.homepage_section = function (callback, 
    /**
     * @param {number} homepage_section_id Id of homepage section
     */
    homepage_section_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/homepage_sections/" + homepage_section_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /dashboards/{lookml_dashboard_id}/import/{space_id} -> IDashboard
     */
    LookerSDKStream.prototype.import_lookml_dashboard = function (callback, 
    /**
     * @param {string} lookml_dashboard_id Id of LookML dashboard
     */
    lookml_dashboard_id, 
    /**
     * @param {string} space_id Id of space to import the dashboard to
     */
    space_id, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body, 
    /**
     * @param {boolean} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
     */
    raw_locale, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/dashboards/" + lookml_dashboard_id + "/import/" + space_id), { raw_locale: raw_locale }, body, options)];
            });
        });
    };
    /**
     * GET /integrations/{integration_id} -> IIntegration
     */
    LookerSDKStream.prototype.integration = function (callback, 
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/integrations/" + integration_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /integration_hubs/{integration_hub_id} -> IIntegrationHub
     */
    LookerSDKStream.prototype.integration_hub = function (callback, 
    /**
     * @param {number} integration_hub_id Id of Integration Hub
     */
    integration_hub_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/integration_hubs/" + integration_hub_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /internal_help_resources_enabled -> IInternalHelpResources
     */
    LookerSDKStream.prototype.internal_help_resources = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/internal_help_resources_enabled', null, null, options)];
            });
        });
    };
    /**
     * GET /internal_help_resources_content -> IInternalHelpResourcesContent
     */
    LookerSDKStream.prototype.internal_help_resources_content = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/internal_help_resources_content', null, null, options)];
            });
        });
    };
    /**
     * DELETE /running_queries/{query_task_id} -> string
     */
    LookerSDKStream.prototype.kill_query = function (callback, 
    /**
     * @param {string} query_task_id Query task id.
     */
    query_task_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', encodeURI("/running_queries/" + query_task_id), null, null, options)];
            });
        });
    };
    /**
     * GET /ldap_config -> ILDAPConfig
     */
    LookerSDKStream.prototype.ldap_config = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/ldap_config', null, null, options)];
            });
        });
    };
    /**
     * GET /legacy_features/{legacy_feature_id} -> ILegacyFeature
     */
    LookerSDKStream.prototype.legacy_feature = function (callback, 
    /**
     * @param {number} legacy_feature_id id of legacy feature
     */
    legacy_feature_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/legacy_features/" + legacy_feature_id), null, null, options)];
            });
        });
    };
    /**
     * POST /login -> IAccessToken
     */
    LookerSDKStream.prototype.login = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/login', { client_id: request.client_id, client_secret: request.client_secret }, null, options)];
            });
        });
    };
    /**
     * POST /login/{user_id} -> IAccessToken
     */
    LookerSDKStream.prototype.login_user = function (callback, 
    /**
     * @param {number} user_id Id of user.
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/login/" + user_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /logout -> string
     */
    LookerSDKStream.prototype.logout = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'DELETE', '/logout', null, null, options)];
            });
        });
    };
    /**
     * GET /looks/{look_id} -> ILookWithQuery
     */
    LookerSDKStream.prototype.look = function (callback, 
    /**
     * @param {number} look_id Id of look
     */
    look_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/looks/" + look_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /lookml_models/{lookml_model_name} -> ILookmlModel
     */
    LookerSDKStream.prototype.lookml_model = function (callback, 
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/lookml_models/" + lookml_model_name), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /lookml_models/{lookml_model_name}/explores/{explore_name} -> ILookmlModelExplore
     */
    LookerSDKStream.prototype.lookml_model_explore = function (callback, 
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name, 
    /**
     * @param {string} explore_name Name of explore.
     */
    explore_name, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/lookml_models/" + lookml_model_name + "/explores/" + explore_name), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/manifest -> IManifest
     */
    LookerSDKStream.prototype.manifest = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id + "/manifest"), null, null, options)];
            });
        });
    };
    /**
     * GET /user -> IUser
     */
    LookerSDKStream.prototype.me = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/user', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /merge_queries/{merge_query_id} -> IMergeQuery
     */
    LookerSDKStream.prototype.merge_query = function (callback, 
    /**
     * @param {string} merge_query_id Merge Query Id
     */
    merge_query_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/merge_queries/" + merge_query_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /model_sets/{model_set_id} -> IModelSet
     */
    LookerSDKStream.prototype.model_set = function (callback, 
    /**
     * @param {number} model_set_id Id of model set
     */
    model_set_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/model_sets/" + model_set_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /oidc_config -> IOIDCConfig
     */
    LookerSDKStream.prototype.oidc_config = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/oidc_config', null, null, options)];
            });
        });
    };
    /**
     * GET /oidc_test_configs/{test_slug} -> IOIDCConfig
     */
    LookerSDKStream.prototype.oidc_test_config = function (callback, 
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/oidc_test_configs/" + test_slug), null, null, options)];
            });
        });
    };
    /**
     * POST /parse_saml_idp_metadata -> ISamlMetadataParseResult
     */
    LookerSDKStream.prototype.parse_saml_idp_metadata = function (callback, 
    /**
     * @param {Partial<string>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/parse_saml_idp_metadata', null, body, options)];
            });
        });
    };
    /**
     * GET /password_config -> IPasswordConfig
     */
    LookerSDKStream.prototype.password_config = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/password_config', null, null, options)];
            });
        });
    };
    /**
     * POST /data_actions -> IDataActionResponse
     */
    LookerSDKStream.prototype.perform_data_action = function (callback, 
    /**
     * @param {Partial<IWriteDataActionRequest>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/data_actions', null, body, options)];
            });
        });
    };
    /**
     * GET /permission_sets/{permission_set_id} -> IPermissionSet
     */
    LookerSDKStream.prototype.permission_set = function (callback, 
    /**
     * @param {number} permission_set_id Id of permission set
     */
    permission_set_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/permission_sets/" + permission_set_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id} -> IProject
     */
    LookerSDKStream.prototype.project = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/files/file -> IProjectFile
     */
    LookerSDKStream.prototype.project_file = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} file_id File Id
     */
    file_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id + "/files/file"), { file_id: file_id, fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/validate -> IProjectValidationCache
     */
    LookerSDKStream.prototype.project_validation_results = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id + "/validate"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/current_workspace -> IProjectWorkspace
     */
    LookerSDKStream.prototype.project_workspace = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id + "/current_workspace"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /queries/{query_id} -> IQuery
     */
    LookerSDKStream.prototype.query = function (callback, 
    /**
     * @param {number} query_id Id of query
     */
    query_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/queries/" + query_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /queries/slug/{slug} -> IQuery
     */
    LookerSDKStream.prototype.query_for_slug = function (callback, 
    /**
     * @param {string} slug Slug of query
     */
    slug, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/queries/slug/" + slug), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /query_tasks/{query_task_id} -> IQueryTask
     */
    LookerSDKStream.prototype.query_task = function (callback, 
    /**
     * @param {string} query_task_id ID of the Query Task
     */
    query_task_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/query_tasks/" + query_task_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /query_tasks/multi_results -> IDictionary<string>
     */
    LookerSDKStream.prototype.query_task_multi_results = function (callback, 
    /**
     * @param {DelimArray<string>} query_task_ids List of Query Task IDs
     */
    query_task_ids, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/query_tasks/multi_results', { query_task_ids: query_task_ids }, null, options)];
            });
        });
    };
    /**
     * GET /query_tasks/{query_task_id}/results -> IDictionary<string>
     */
    LookerSDKStream.prototype.query_task_results = function (callback, 
    /**
     * @param {string} query_task_id ID of the Query Task
     */
    query_task_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/query_tasks/" + query_task_id + "/results"), null, null, options)];
            });
        });
    };
    /**
     * GET /render_tasks/{render_task_id} -> IRenderTask
     */
    LookerSDKStream.prototype.render_task = function (callback, 
    /**
     * @param {string} render_task_id Id of render task
     */
    render_task_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/render_tasks/" + render_task_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /render_tasks/{render_task_id}/results -> string
     *
     * **Note**: Binary content is returned by this method.
     */
    LookerSDKStream.prototype.render_task_results = function (callback, 
    /**
     * @param {string} render_task_id Id of render task
     */
    render_task_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/render_tasks/" + render_task_id + "/results"), null, null, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/reset_to_production -> string
     */
    LookerSDKStream.prototype.reset_project_to_production = function (callback, 
    /**
     * @param {string} project_id Id of project
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/projects/" + project_id + "/reset_to_production"), null, null, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/reset_to_remote -> string
     */
    LookerSDKStream.prototype.reset_project_to_remote = function (callback, 
    /**
     * @param {string} project_id Id of project
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/projects/" + project_id + "/reset_to_remote"), null, null, options)];
            });
        });
    };
    /**
     * GET /roles/{role_id} -> IRole
     */
    LookerSDKStream.prototype.role = function (callback, 
    /**
     * @param {number} role_id id of role
     */
    role_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/roles/" + role_id), null, null, options)];
            });
        });
    };
    /**
     * GET /roles/{role_id}/groups -> IGroup[]
     */
    LookerSDKStream.prototype.role_groups = function (callback, 
    /**
     * @param {number} role_id id of role
     */
    role_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/roles/" + role_id + "/groups"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /roles/{role_id}/users -> IUser[]
     */
    LookerSDKStream.prototype.role_users = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/roles/" + request.role_id + "/users"), {
                        fields: request.fields,
                        direct_association_only: request.direct_association_only,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_connection_tests/{test_id} -> IGitConnectionTestResult
     */
    LookerSDKStream.prototype.run_git_connection_test = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} test_id Test Id
     */
    test_id, 
    /**
     * @param {string} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
     */
    remote_url, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + project_id + "/git_connection_tests/" + test_id), { remote_url: remote_url }, null, options)];
            });
        });
    };
    /**
     * POST /queries/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDKStream.prototype.run_inline_query = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/queries/run/" + request.result_format), {
                        limit: request.limit,
                        apply_formatting: request.apply_formatting,
                        apply_vis: request.apply_vis,
                        cache: request.cache,
                        image_width: request.image_width,
                        image_height: request.image_height,
                        generate_drill_links: request.generate_drill_links,
                        force_production: request.force_production,
                        cache_only: request.cache_only,
                        path_prefix: request.path_prefix,
                        rebuild_pdts: request.rebuild_pdts,
                        server_table_calcs: request.server_table_calcs,
                    }, request.body, options)];
            });
        });
    };
    /**
     * GET /looks/{look_id}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDKStream.prototype.run_look = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/looks/" + request.look_id + "/run/" + request.result_format), {
                        limit: request.limit,
                        apply_formatting: request.apply_formatting,
                        apply_vis: request.apply_vis,
                        cache: request.cache,
                        image_width: request.image_width,
                        image_height: request.image_height,
                        generate_drill_links: request.generate_drill_links,
                        force_production: request.force_production,
                        cache_only: request.cache_only,
                        path_prefix: request.path_prefix,
                        rebuild_pdts: request.rebuild_pdts,
                        server_table_calcs: request.server_table_calcs,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/lookml_tests/run -> ILookmlTestResult[]
     */
    LookerSDKStream.prototype.run_lookml_test = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/projects/" + request.project_id + "/lookml_tests/run"), { file_id: request.file_id, test: request.test, model: request.model }, null, options)];
            });
        });
    };
    /**
     * GET /queries/{query_id}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDKStream.prototype.run_query = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/queries/" + request.query_id + "/run/" + request.result_format), {
                        limit: request.limit,
                        apply_formatting: request.apply_formatting,
                        apply_vis: request.apply_vis,
                        cache: request.cache,
                        image_width: request.image_width,
                        image_height: request.image_height,
                        generate_drill_links: request.generate_drill_links,
                        force_production: request.force_production,
                        cache_only: request.cache_only,
                        path_prefix: request.path_prefix,
                        rebuild_pdts: request.rebuild_pdts,
                        server_table_calcs: request.server_table_calcs,
                    }, null, options)];
            });
        });
    };
    /**
     * POST /sql_queries/{slug}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDKStream.prototype.run_sql_query = function (callback, 
    /**
     * @param {string} slug slug of query
     */
    slug, 
    /**
     * @param {string} result_format Format of result, options are: ["json", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml", "json_label"]
     */
    result_format, 
    /**
     * @param {string} download Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.
     */
    download, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/sql_queries/" + slug + "/run/" + result_format), { download: download }, null, options)];
            });
        });
    };
    /**
     * GET /queries/models/{model_name}/views/{view_name}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDKStream.prototype.run_url_encoded_query = function (callback, 
    /**
     * @param {string} model_name Model name
     */
    model_name, 
    /**
     * @param {string} view_name View name
     */
    view_name, 
    /**
     * @param {string} result_format Format of result
     */
    result_format, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/queries/models/" + model_name + "/views/" + view_name + "/run/" + result_format), null, null, options)];
            });
        });
    };
    /**
     * GET /saml_config -> ISamlConfig
     */
    LookerSDKStream.prototype.saml_config = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/saml_config', null, null, options)];
            });
        });
    };
    /**
     * GET /saml_test_configs/{test_slug} -> ISamlConfig
     */
    LookerSDKStream.prototype.saml_test_config = function (callback, 
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/saml_test_configs/" + test_slug), null, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan
     */
    LookerSDKStream.prototype.scheduled_plan = function (callback, 
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/scheduled_plans/" + scheduled_plan_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /scheduled_plans/run_once -> IScheduledPlan
     */
    LookerSDKStream.prototype.scheduled_plan_run_once = function (callback, 
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/scheduled_plans/run_once', null, body, options)];
            });
        });
    };
    /**
     * POST /scheduled_plans/{scheduled_plan_id}/run_once -> IScheduledPlan
     */
    LookerSDKStream.prototype.scheduled_plan_run_once_by_id = function (callback, 
    /**
     * @param {number} scheduled_plan_id Id of schedule plan to copy and run
     */
    scheduled_plan_id, 
    /**
     * @param {Partial<IWriteWriteScheduledPlan>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/scheduled_plans/" + scheduled_plan_id + "/run_once"), null, body, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/dashboard/{dashboard_id} -> IScheduledPlan[]
     */
    LookerSDKStream.prototype.scheduled_plans_for_dashboard = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/scheduled_plans/dashboard/" + request.dashboard_id), {
                        user_id: request.user_id,
                        all_users: request.all_users,
                        fields: request.fields,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/look/{look_id} -> IScheduledPlan[]
     */
    LookerSDKStream.prototype.scheduled_plans_for_look = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/scheduled_plans/look/" + request.look_id), {
                        user_id: request.user_id,
                        fields: request.fields,
                        all_users: request.all_users,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/lookml_dashboard/{lookml_dashboard_id} -> IScheduledPlan[]
     */
    LookerSDKStream.prototype.scheduled_plans_for_lookml_dashboard = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/scheduled_plans/lookml_dashboard/" + request.lookml_dashboard_id), {
                        user_id: request.user_id,
                        fields: request.fields,
                        all_users: request.all_users,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/space/{space_id} -> IScheduledPlan[]
     */
    LookerSDKStream.prototype.scheduled_plans_for_space = function (callback, 
    /**
     * @param {number} space_id Space Id
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/scheduled_plans/space/" + space_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_favorite/search -> IContentFavorite[]
     */
    LookerSDKStream.prototype.search_content_favorites = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/content_favorite/search', {
                        id: request.id,
                        user_id: request.user_id,
                        content_metadata_id: request.content_metadata_id,
                        dashboard_id: request.dashboard_id,
                        look_id: request.look_id,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        fields: request.fields,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /content_view/search -> IContentView[]
     */
    LookerSDKStream.prototype.search_content_views = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/content_view/search', {
                        view_count: request.view_count,
                        group_id: request.group_id,
                        look_id: request.look_id,
                        dashboard_id: request.dashboard_id,
                        content_metadata_id: request.content_metadata_id,
                        start_of_week_date: request.start_of_week_date,
                        all_time: request.all_time,
                        user_id: request.user_id,
                        fields: request.fields,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_elements/search -> IDashboardElement[]
     */
    LookerSDKStream.prototype.search_dashboard_elements = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/dashboard_elements/search', {
                        dashboard_id: request.dashboard_id,
                        look_id: request.look_id,
                        title: request.title,
                        deleted: request.deleted,
                        fields: request.fields,
                        filter_or: request.filter_or,
                        sorts: request.sorts,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/search -> IDashboard[]
     */
    LookerSDKStream.prototype.search_dashboards = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/dashboards/search', {
                        id: request.id,
                        slug: request.slug,
                        title: request.title,
                        description: request.description,
                        content_favorite_id: request.content_favorite_id,
                        space_id: request.space_id,
                        deleted: request.deleted,
                        user_id: request.user_id,
                        view_count: request.view_count,
                        content_metadata_id: request.content_metadata_id,
                        curate: request.curate,
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /folders/search -> IFolder[]
     */
    LookerSDKStream.prototype.search_folders = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/folders/search', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        name: request.name,
                        id: request.id,
                        parent_id: request.parent_id,
                        creator_id: request.creator_id,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /groups/search -> IGroup[]
     */
    LookerSDKStream.prototype.search_groups = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/groups/search', {
                        fields: request.fields,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        filter_or: request.filter_or,
                        id: request.id,
                        name: request.name,
                        external_group_id: request.external_group_id,
                        externally_managed: request.externally_managed,
                        externally_orphaned: request.externally_orphaned,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /homepages/search -> IHomepage[]
     */
    LookerSDKStream.prototype.search_homepages = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/homepages/search', {
                        title: request.title,
                        created_at: request.created_at,
                        first_name: request.first_name,
                        last_name: request.last_name,
                        fields: request.fields,
                        favorited: request.favorited,
                        creator_id: request.creator_id,
                        sorts: request.sorts,
                        page: request.page,
                        per_page: request.per_page,
                        offset: request.offset,
                        limit: request.limit,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /looks/search -> ILook[]
     */
    LookerSDKStream.prototype.search_looks = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/looks/search', {
                        title: request.title,
                        description: request.description,
                        content_favorite_id: request.content_favorite_id,
                        space_id: request.space_id,
                        user_id: request.user_id,
                        view_count: request.view_count,
                        deleted: request.deleted,
                        query_id: request.query_id,
                        curate: request.curate,
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /model_sets/search -> IModelSet[]
     */
    LookerSDKStream.prototype.search_model_sets = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/model_sets/search', {
                        fields: request.fields,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        id: request.id,
                        name: request.name,
                        all_access: request.all_access,
                        built_in: request.built_in,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /permission_sets/search -> IPermissionSet[]
     */
    LookerSDKStream.prototype.search_permission_sets = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/permission_sets/search', {
                        fields: request.fields,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        id: request.id,
                        name: request.name,
                        all_access: request.all_access,
                        built_in: request.built_in,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /roles/search -> IRole[]
     */
    LookerSDKStream.prototype.search_roles = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/roles/search', {
                        fields: request.fields,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        id: request.id,
                        name: request.name,
                        built_in: request.built_in,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/search -> ISpace[]
     */
    LookerSDKStream.prototype.search_spaces = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/spaces/search', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        name: request.name,
                        id: request.id,
                        parent_id: request.parent_id,
                        creator_id: request.creator_id,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /themes/search -> ITheme[]
     */
    LookerSDKStream.prototype.search_themes = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/themes/search', {
                        id: request.id,
                        name: request.name,
                        begin_at: request.begin_at,
                        end_at: request.end_at,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        fields: request.fields,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /user_login_lockouts/search -> IUserLoginLockout[]
     */
    LookerSDKStream.prototype.search_user_login_lockouts = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/user_login_lockouts/search', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        auth_type: request.auth_type,
                        full_name: request.full_name,
                        email: request.email,
                        remote_id: request.remote_id,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /users/search -> IUser[]
     */
    LookerSDKStream.prototype.search_users = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/users/search', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        id: request.id,
                        first_name: request.first_name,
                        last_name: request.last_name,
                        verified_looker_employee: request.verified_looker_employee,
                        email: request.email,
                        is_disabled: request.is_disabled,
                        filter_or: request.filter_or,
                        content_metadata_id: request.content_metadata_id,
                        group_id: request.group_id,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /users/search/names/{pattern} -> IUser[]
     */
    LookerSDKStream.prototype.search_users_names = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/search/names/" + request.pattern), {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        id: request.id,
                        first_name: request.first_name,
                        last_name: request.last_name,
                        verified_looker_employee: request.verified_looker_employee,
                        email: request.email,
                        is_disabled: request.is_disabled,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /session -> IApiSession
     */
    LookerSDKStream.prototype.session = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/session', null, null, options)];
            });
        });
    };
    /**
     * GET /session_config -> ISessionConfig
     */
    LookerSDKStream.prototype.session_config = function (callback, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/session_config', null, null, options)];
            });
        });
    };
    /**
     * PUT /color_collections/default -> IColorCollection
     */
    LookerSDKStream.prototype.set_default_color_collection = function (callback, 
    /**
     * @param {string} collection_id ID of color collection to set as default
     */
    collection_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', '/color_collections/default', { collection_id: collection_id }, null, options)];
            });
        });
    };
    /**
     * PUT /themes/default -> ITheme
     */
    LookerSDKStream.prototype.set_default_theme = function (callback, 
    /**
     * @param {string} name Name of theme to set as default
     */
    name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', '/themes/default', { name: name }, null, options)];
            });
        });
    };
    /**
     * PUT /roles/{role_id}/groups -> IGroup[]
     */
    LookerSDKStream.prototype.set_role_groups = function (callback, 
    /**
     * @param {number} role_id Id of Role
     */
    role_id, 
    /**
     * @param {Partial<number[]>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', encodeURI("/roles/" + role_id + "/groups"), null, body, options)];
            });
        });
    };
    /**
     * PUT /roles/{role_id}/users -> IUser[]
     */
    LookerSDKStream.prototype.set_role_users = function (callback, 
    /**
     * @param {number} role_id id of role
     */
    role_id, 
    /**
     * @param {Partial<number[]>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', encodeURI("/roles/" + role_id + "/users"), null, body, options)];
            });
        });
    };
    /**
     * POST /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]
     */
    LookerSDKStream.prototype.set_user_attribute_group_values = function (callback, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {Partial<IUserAttributeGroupValue[]>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/user_attributes/" + user_attribute_id + "/group_values"), null, body, options)];
            });
        });
    };
    /**
     * PATCH /users/{user_id}/attribute_values/{user_attribute_id} -> IUserAttributeWithValue
     */
    LookerSDKStream.prototype.set_user_attribute_user_value = function (callback, 
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {Partial<IWriteUserAttributeWithValue>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/users/" + user_id + "/attribute_values/" + user_attribute_id), null, body, options)];
            });
        });
    };
    /**
     * PUT /users/{user_id}/roles -> IRole[]
     */
    LookerSDKStream.prototype.set_user_roles = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<number[]>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', encodeURI("/users/" + user_id + "/roles"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id} -> ISpace
     */
    LookerSDKStream.prototype.space = function (callback, 
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/spaces/" + space_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/ancestors -> ISpace[]
     */
    LookerSDKStream.prototype.space_ancestors = function (callback, 
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/spaces/" + space_id + "/ancestors"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/children -> ISpace[]
     */
    LookerSDKStream.prototype.space_children = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/spaces/" + request.space_id + "/children"), {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/children/search -> ISpace[]
     */
    LookerSDKStream.prototype.space_children_search = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/spaces/" + request.space_id + "/children/search"), { fields: request.fields, sorts: request.sorts, name: request.name }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/dashboards -> IDashboard[]
     */
    LookerSDKStream.prototype.space_dashboards = function (callback, 
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/spaces/" + space_id + "/dashboards"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/looks -> ILookWithQuery[]
     */
    LookerSDKStream.prototype.space_looks = function (callback, 
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/spaces/" + space_id + "/looks"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/parent -> ISpace
     */
    LookerSDKStream.prototype.space_parent = function (callback, 
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/spaces/" + space_id + "/parent"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /sql_queries/{slug} -> ISqlQuery
     */
    LookerSDKStream.prototype.sql_query = function (callback, 
    /**
     * @param {string} slug slug of query
     */
    slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/sql_queries/" + slug), null, null, options)];
            });
        });
    };
    /**
     * PATCH /dashboards/{lookml_dashboard_id}/sync -> number[]
     */
    LookerSDKStream.prototype.sync_lookml_dashboard = function (callback, 
    /**
     * @param {string} lookml_dashboard_id Id of LookML dashboard, in the form 'model::dashboardname'
     */
    lookml_dashboard_id, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body, 
    /**
     * @param {boolean} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
     */
    raw_locale, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/dashboards/" + lookml_dashboard_id + "/sync"), { raw_locale: raw_locale }, body, options)];
            });
        });
    };
    /**
     * PUT /connections/{connection_name}/test -> IDBConnectionTestResult[]
     */
    LookerSDKStream.prototype.test_connection = function (callback, 
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, 
    /**
     * @param {DelimArray<string>} tests Array of names of tests to run
     */
    tests, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', encodeURI("/connections/" + connection_name + "/test"), { tests: tests }, null, options)];
            });
        });
    };
    /**
     * PUT /connections/test -> IDBConnectionTestResult[]
     */
    LookerSDKStream.prototype.test_connection_config = function (callback, 
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body, 
    /**
     * @param {DelimArray<string>} tests Array of names of tests to run
     */
    tests, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', '/connections/test', { tests: tests }, body, options)];
            });
        });
    };
    /**
     * POST /integrations/{integration_id}/test -> IIntegrationTestResult
     */
    LookerSDKStream.prototype.test_integration = function (callback, 
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/integrations/" + integration_id + "/test"), null, null, options)];
            });
        });
    };
    /**
     * PUT /ldap_config/test_auth -> ILDAPConfigTestResult
     */
    LookerSDKStream.prototype.test_ldap_config_auth = function (callback, 
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', '/ldap_config/test_auth', null, body, options)];
            });
        });
    };
    /**
     * PUT /ldap_config/test_connection -> ILDAPConfigTestResult
     */
    LookerSDKStream.prototype.test_ldap_config_connection = function (callback, 
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', '/ldap_config/test_connection', null, body, options)];
            });
        });
    };
    /**
     * PUT /ldap_config/test_user_auth -> ILDAPConfigTestResult
     */
    LookerSDKStream.prototype.test_ldap_config_user_auth = function (callback, 
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', '/ldap_config/test_user_auth', null, body, options)];
            });
        });
    };
    /**
     * PUT /ldap_config/test_user_info -> ILDAPConfigTestResult
     */
    LookerSDKStream.prototype.test_ldap_config_user_info = function (callback, 
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', '/ldap_config/test_user_info', null, body, options)];
            });
        });
    };
    /**
     * GET /themes/{theme_id} -> ITheme
     */
    LookerSDKStream.prototype.theme = function (callback, 
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/themes/" + theme_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /themes/theme_or_default -> ITheme
     */
    LookerSDKStream.prototype.theme_or_default = function (callback, 
    /**
     * @param {string} name Name of theme
     */
    name, 
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/themes/theme_or_default', { name: name, ts: ts }, null, options)];
            });
        });
    };
    /**
     * PATCH /backup_configuration -> IBackupConfiguration
     */
    LookerSDKStream.prototype.update_backup_configuration = function (callback, 
    /**
     * @param {Partial<IWriteBackupConfiguration>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', '/backup_configuration', null, body, options)];
            });
        });
    };
    /**
     * PATCH /color_collections/{collection_id} -> IColorCollection
     */
    LookerSDKStream.prototype.update_color_collection = function (callback, 
    /**
     * @param {string} collection_id Id of Custom Color Collection
     */
    collection_id, 
    /**
     * @param {Partial<IWriteColorCollection>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/color_collections/" + collection_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /connections/{connection_name} -> IDBConnection
     */
    LookerSDKStream.prototype.update_connection = function (callback, 
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, 
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/connections/" + connection_name), null, body, options)];
            });
        });
    };
    /**
     * PATCH /content_metadata/{content_metadata_id} -> IContentMeta
     */
    LookerSDKStream.prototype.update_content_metadata = function (callback, 
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id, 
    /**
     * @param {Partial<IWriteContentMeta>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/content_metadata/" + content_metadata_id), null, body, options)];
            });
        });
    };
    /**
     * PUT /content_metadata_access/{content_metadata_access_id} -> IContentMetaGroupUser
     */
    LookerSDKStream.prototype.update_content_metadata_access = function (callback, 
    /**
     * @param {number} content_metadata_access_id Id of content metadata access
     */
    content_metadata_access_id, 
    /**
     * @param {Partial<IContentMetaGroupUser>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', encodeURI("/content_metadata_access/" + content_metadata_access_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /custom_welcome_email -> ICustomWelcomeEmail
     */
    LookerSDKStream.prototype.update_custom_welcome_email = function (callback, 
    /**
     * @param {Partial<IWriteCustomWelcomeEmail>} body
     */
    body, 
    /**
     * @param {boolean} send_test_welcome_email If true a test email with the content from the request will be sent to the current user after saving
     */
    send_test_welcome_email, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', '/custom_welcome_email', { send_test_welcome_email: send_test_welcome_email }, body, options)];
            });
        });
    };
    /**
     * PUT /custom_welcome_email_test -> IWelcomeEmailTest
     */
    LookerSDKStream.prototype.update_custom_welcome_email_test = function (callback, 
    /**
     * @param {Partial<IWriteWelcomeEmailTest>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', '/custom_welcome_email_test', null, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboards/{dashboard_id} -> IDashboard
     */
    LookerSDKStream.prototype.update_dashboard = function (callback, 
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/dashboards/" + dashboard_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboard_elements/{dashboard_element_id} -> IDashboardElement
     */
    LookerSDKStream.prototype.update_dashboard_element = function (callback, 
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id, 
    /**
     * @param {Partial<IWriteDashboardElement>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/dashboard_elements/" + dashboard_element_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter
     */
    LookerSDKStream.prototype.update_dashboard_filter = function (callback, 
    /**
     * @param {string} dashboard_filter_id Id of dashboard filter
     */
    dashboard_filter_id, 
    /**
     * @param {Partial<IWriteDashboardFilter>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/dashboard_filters/" + dashboard_filter_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout
     */
    LookerSDKStream.prototype.update_dashboard_layout = function (callback, 
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout
     */
    dashboard_layout_id, 
    /**
     * @param {Partial<IWriteDashboardLayout>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/dashboard_layouts/" + dashboard_layout_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent
     */
    LookerSDKStream.prototype.update_dashboard_layout_component = function (callback, 
    /**
     * @param {string} dashboard_layout_component_id Id of dashboard layout component
     */
    dashboard_layout_component_id, 
    /**
     * @param {Partial<IWriteDashboardLayoutComponent>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/dashboard_layout_components/" + dashboard_layout_component_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /datagroups/{datagroup_id} -> IDatagroup
     */
    LookerSDKStream.prototype.update_datagroup = function (callback, 
    /**
     * @param {string} datagroup_id ID of datagroup.
     */
    datagroup_id, 
    /**
     * @param {Partial<IWriteDatagroup>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/datagroups/" + datagroup_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /folders/{folder_id} -> IFolder
     */
    LookerSDKStream.prototype.update_folder = function (callback, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {Partial<IWriteUpdateFolder>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/folders/" + folder_id), null, body, options)];
            });
        });
    };
    /**
     * PUT /projects/{project_id}/git_branch -> IGitBranch
     */
    LookerSDKStream.prototype.update_git_branch = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {Partial<IWriteGitBranch>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', encodeURI("/projects/" + project_id + "/git_branch"), null, body, options)];
            });
        });
    };
    /**
     * PATCH /groups/{group_id} -> IGroup
     */
    LookerSDKStream.prototype.update_group = function (callback, 
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {Partial<IWriteGroup>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/groups/" + group_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /homepages/{homepage_id} -> IHomepage
     */
    LookerSDKStream.prototype.update_homepage = function (callback, 
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id, 
    /**
     * @param {Partial<IWriteHomepage>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/homepages/" + homepage_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /homepage_items/{homepage_item_id} -> IHomepageItem
     */
    LookerSDKStream.prototype.update_homepage_item = function (callback, 
    /**
     * @param {number} homepage_item_id Id of homepage item
     */
    homepage_item_id, 
    /**
     * @param {Partial<IWriteHomepageItem>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/homepage_items/" + homepage_item_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /homepage_sections/{homepage_section_id} -> IHomepageSection
     */
    LookerSDKStream.prototype.update_homepage_section = function (callback, 
    /**
     * @param {number} homepage_section_id Id of homepage section
     */
    homepage_section_id, 
    /**
     * @param {Partial<IWriteHomepageSection>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/homepage_sections/" + homepage_section_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /integrations/{integration_id} -> IIntegration
     */
    LookerSDKStream.prototype.update_integration = function (callback, 
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id, 
    /**
     * @param {Partial<IWriteIntegration>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/integrations/" + integration_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /integration_hubs/{integration_hub_id} -> IIntegrationHub
     */
    LookerSDKStream.prototype.update_integration_hub = function (callback, 
    /**
     * @param {number} integration_hub_id Id of Integration Hub
     */
    integration_hub_id, 
    /**
     * @param {Partial<IWriteIntegrationHub>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/integration_hubs/" + integration_hub_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /internal_help_resources -> IInternalHelpResources
     */
    LookerSDKStream.prototype.update_internal_help_resources = function (callback, 
    /**
     * @param {Partial<IWriteInternalHelpResources>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', '/internal_help_resources', null, body, options)];
            });
        });
    };
    /**
     * PATCH /internal_help_resources_content -> IInternalHelpResourcesContent
     */
    LookerSDKStream.prototype.update_internal_help_resources_content = function (callback, 
    /**
     * @param {Partial<IWriteInternalHelpResourcesContent>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', '/internal_help_resources_content', null, body, options)];
            });
        });
    };
    /**
     * PATCH /ldap_config -> ILDAPConfig
     */
    LookerSDKStream.prototype.update_ldap_config = function (callback, 
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', '/ldap_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /legacy_features/{legacy_feature_id} -> ILegacyFeature
     */
    LookerSDKStream.prototype.update_legacy_feature = function (callback, 
    /**
     * @param {number} legacy_feature_id id of legacy feature
     */
    legacy_feature_id, 
    /**
     * @param {Partial<IWriteLegacyFeature>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/legacy_features/" + legacy_feature_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /looks/{look_id} -> ILookWithQuery
     */
    LookerSDKStream.prototype.update_look = function (callback, 
    /**
     * @param {number} look_id Id of look
     */
    look_id, 
    /**
     * @param {Partial<IWriteLookWithQuery>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/looks/" + look_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /lookml_models/{lookml_model_name} -> ILookmlModel
     */
    LookerSDKStream.prototype.update_lookml_model = function (callback, 
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name, 
    /**
     * @param {Partial<IWriteLookmlModel>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/lookml_models/" + lookml_model_name), null, body, options)];
            });
        });
    };
    /**
     * PATCH /model_sets/{model_set_id} -> IModelSet
     */
    LookerSDKStream.prototype.update_model_set = function (callback, 
    /**
     * @param {number} model_set_id id of model set
     */
    model_set_id, 
    /**
     * @param {Partial<IWriteModelSet>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/model_sets/" + model_set_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /oidc_config -> IOIDCConfig
     */
    LookerSDKStream.prototype.update_oidc_config = function (callback, 
    /**
     * @param {Partial<IWriteOIDCConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', '/oidc_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /password_config -> IPasswordConfig
     */
    LookerSDKStream.prototype.update_password_config = function (callback, 
    /**
     * @param {Partial<IWritePasswordConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', '/password_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /permission_sets/{permission_set_id} -> IPermissionSet
     */
    LookerSDKStream.prototype.update_permission_set = function (callback, 
    /**
     * @param {number} permission_set_id id of permission set
     */
    permission_set_id, 
    /**
     * @param {Partial<IWritePermissionSet>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/permission_sets/" + permission_set_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /projects/{project_id} -> IProject
     */
    LookerSDKStream.prototype.update_project = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {Partial<IWriteProject>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/projects/" + project_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PUT /projects/{root_project_id}/credential/{credential_id} -> IRepositoryCredential
     */
    LookerSDKStream.prototype.update_repository_credential = function (callback, 
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id, 
    /**
     * @param {string} credential_id Credential Id
     */
    credential_id, 
    /**
     * @param {Partial<IWriteRepositoryCredential>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', encodeURI("/projects/" + root_project_id + "/credential/" + credential_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /roles/{role_id} -> IRole
     */
    LookerSDKStream.prototype.update_role = function (callback, 
    /**
     * @param {number} role_id id of role
     */
    role_id, 
    /**
     * @param {Partial<IWriteRole>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/roles/" + role_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /saml_config -> ISamlConfig
     */
    LookerSDKStream.prototype.update_saml_config = function (callback, 
    /**
     * @param {Partial<IWriteSamlConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', '/saml_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan
     */
    LookerSDKStream.prototype.update_scheduled_plan = function (callback, 
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id, 
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/scheduled_plans/" + scheduled_plan_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /session -> IApiSession
     */
    LookerSDKStream.prototype.update_session = function (callback, 
    /**
     * @param {Partial<IWriteApiSession>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', '/session', null, body, options)];
            });
        });
    };
    /**
     * PATCH /session_config -> ISessionConfig
     */
    LookerSDKStream.prototype.update_session_config = function (callback, 
    /**
     * @param {Partial<IWriteSessionConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', '/session_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /spaces/{space_id} -> ISpace
     */
    LookerSDKStream.prototype.update_space = function (callback, 
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {Partial<IWriteUpdateSpace>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/spaces/" + space_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /themes/{theme_id} -> ITheme
     */
    LookerSDKStream.prototype.update_theme = function (callback, 
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id, 
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/themes/" + theme_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /users/{user_id} -> IUser
     */
    LookerSDKStream.prototype.update_user = function (callback, 
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {Partial<IWriteUser>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/users/" + user_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /user_attributes/{user_attribute_id} -> IUserAttribute
     */
    LookerSDKStream.prototype.update_user_attribute = function (callback, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {Partial<IWriteUserAttribute>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/user_attributes/" + user_attribute_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /groups/{group_id}/attribute_values/{user_attribute_id} -> IUserAttributeGroupValue
     */
    LookerSDKStream.prototype.update_user_attribute_group_value = function (callback, 
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {Partial<IUserAttributeGroupValue>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/groups/" + group_id + "/attribute_values/" + user_attribute_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /users/{user_id}/credentials_email -> ICredentialsEmail
     */
    LookerSDKStream.prototype.update_user_credentials_email = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<IWriteCredentialsEmail>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PATCH', encodeURI("/users/" + user_id + "/credentials_email"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PUT /whitelabel_configuration -> IWhitelabelConfiguration
     */
    LookerSDKStream.prototype.update_whitelabel_configuration = function (callback, 
    /**
     * @param {Partial<IWriteWhitelabelConfiguration>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'PUT', '/whitelabel_configuration', null, body, options)];
            });
        });
    };
    /**
     * GET /users/{user_id} -> IUser
     */
    LookerSDKStream.prototype.user = function (callback, 
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /user_attributes/{user_attribute_id} -> IUserAttribute
     */
    LookerSDKStream.prototype.user_attribute = function (callback, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/user_attributes/" + user_attribute_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/attribute_values -> IUserAttributeWithValue[]
     */
    LookerSDKStream.prototype.user_attribute_user_values = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + request.user_id + "/attribute_values"), {
                        fields: request.fields,
                        user_attribute_ids: request.user_attribute_ids,
                        all_values: request.all_values,
                        include_unset: request.include_unset,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_api3/{credentials_api3_id} -> ICredentialsApi3
     */
    LookerSDKStream.prototype.user_credentials_api3 = function (callback, 
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} credentials_api3_id Id of API 3 Credential
     */
    credentials_api3_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/credentials_api3/" + credentials_api3_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_email -> ICredentialsEmail
     */
    LookerSDKStream.prototype.user_credentials_email = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/credentials_email"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_embed/{credentials_embed_id} -> ICredentialsEmbed
     */
    LookerSDKStream.prototype.user_credentials_embed = function (callback, 
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} credentials_embed_id Id of Embedding Credential
     */
    credentials_embed_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/credentials_embed/" + credentials_embed_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_google -> ICredentialsGoogle
     */
    LookerSDKStream.prototype.user_credentials_google = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/credentials_google"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_ldap -> ICredentialsLDAP
     */
    LookerSDKStream.prototype.user_credentials_ldap = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/credentials_ldap"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_looker_openid -> ICredentialsLookerOpenid
     */
    LookerSDKStream.prototype.user_credentials_looker_openid = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/credentials_looker_openid"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_oidc -> ICredentialsOIDC
     */
    LookerSDKStream.prototype.user_credentials_oidc = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/credentials_oidc"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_saml -> ICredentialsSaml
     */
    LookerSDKStream.prototype.user_credentials_saml = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/credentials_saml"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_totp -> ICredentialsTotp
     */
    LookerSDKStream.prototype.user_credentials_totp = function (callback, 
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/credentials_totp"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/credential/{credential_type}/{credential_id} -> IUser
     */
    LookerSDKStream.prototype.user_for_credential = function (callback, 
    /**
     * @param {string} credential_type Type name of credential
     */
    credential_type, 
    /**
     * @param {string} credential_id Id of credential
     */
    credential_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/credential/" + credential_type + "/" + credential_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/roles -> IRole[]
     */
    LookerSDKStream.prototype.user_roles = function (callback, request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + request.user_id + "/roles"), {
                        fields: request.fields,
                        direct_association_only: request.direct_association_only,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/sessions/{session_id} -> ISession
     */
    LookerSDKStream.prototype.user_session = function (callback, 
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} session_id Id of Web Login Session
     */
    session_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/users/" + user_id + "/sessions/" + session_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/validate -> IProjectValidation
     */
    LookerSDKStream.prototype.validate_project = function (callback, 
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', encodeURI("/projects/" + project_id + "/validate"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /themes/validate -> IValidationError
     */
    LookerSDKStream.prototype.validate_theme = function (callback, 
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'POST', '/themes/validate', null, body, options)];
            });
        });
    };
    /**
     * GET /versions -> IApiVersion
     */
    LookerSDKStream.prototype.versions = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/versions', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /whitelabel_configuration -> IWhitelabelConfiguration
     */
    LookerSDKStream.prototype.whitelabel_configuration = function (callback, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', '/whitelabel_configuration', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /workspaces/{workspace_id} -> IWorkspace
     */
    LookerSDKStream.prototype.workspace = function (callback, 
    /**
     * @param {string} workspace_id Id of the workspace
     */
    workspace_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authStream(callback, 'GET', encodeURI("/workspaces/" + workspace_id), null, null, options)];
            });
        });
    };
    return LookerSDKStream;
}(apiMethods_1.APIMethods));
exports.LookerSDKStream = LookerSDKStream;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/sdk/streams.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/@looker/sdk/dist/sdk/streams.js"); } }(); 

/***/ }),

/***/ "./node_modules/@looker/extension-sdk/node_modules/semver/semver.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@looker/extension-sdk/node_modules/semver/semver.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = SemVer

var debug
/* istanbul ignore next */
if (typeof process === 'object' &&
    process.env &&
    process.env.NODE_DEBUG &&
    /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
  debug = function () {
    var args = Array.prototype.slice.call(arguments, 0)
    args.unshift('SEMVER')
    console.log.apply(console, args)
  }
} else {
  debug = function () {}
}

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
exports.SEMVER_SPEC_VERSION = '2.0.0'

var MAX_LENGTH = 256
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
  /* istanbul ignore next */ 9007199254740991

// Max safe segment length for coercion.
var MAX_SAFE_COMPONENT_LENGTH = 16

// The actual regexps go on exports.re
var re = exports.re = []
var src = exports.src = []
var t = exports.tokens = {}
var R = 0

function tok (n) {
  t[n] = R++
}

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

tok('NUMERICIDENTIFIER')
src[t.NUMERICIDENTIFIER] = '0|[1-9]\\d*'
tok('NUMERICIDENTIFIERLOOSE')
src[t.NUMERICIDENTIFIERLOOSE] = '[0-9]+'

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

tok('NONNUMERICIDENTIFIER')
src[t.NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*'

// ## Main Version
// Three dot-separated numeric identifiers.

tok('MAINVERSION')
src[t.MAINVERSION] = '(' + src[t.NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[t.NUMERICIDENTIFIER] + ')\\.' +
                   '(' + src[t.NUMERICIDENTIFIER] + ')'

tok('MAINVERSIONLOOSE')
src[t.MAINVERSIONLOOSE] = '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')\\.' +
                        '(' + src[t.NUMERICIDENTIFIERLOOSE] + ')'

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

tok('PRERELEASEIDENTIFIER')
src[t.PRERELEASEIDENTIFIER] = '(?:' + src[t.NUMERICIDENTIFIER] +
                            '|' + src[t.NONNUMERICIDENTIFIER] + ')'

tok('PRERELEASEIDENTIFIERLOOSE')
src[t.PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[t.NUMERICIDENTIFIERLOOSE] +
                                 '|' + src[t.NONNUMERICIDENTIFIER] + ')'

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

tok('PRERELEASE')
src[t.PRERELEASE] = '(?:-(' + src[t.PRERELEASEIDENTIFIER] +
                  '(?:\\.' + src[t.PRERELEASEIDENTIFIER] + ')*))'

tok('PRERELEASELOOSE')
src[t.PRERELEASELOOSE] = '(?:-?(' + src[t.PRERELEASEIDENTIFIERLOOSE] +
                       '(?:\\.' + src[t.PRERELEASEIDENTIFIERLOOSE] + ')*))'

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

tok('BUILDIDENTIFIER')
src[t.BUILDIDENTIFIER] = '[0-9A-Za-z-]+'

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

tok('BUILD')
src[t.BUILD] = '(?:\\+(' + src[t.BUILDIDENTIFIER] +
             '(?:\\.' + src[t.BUILDIDENTIFIER] + ')*))'

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

tok('FULL')
tok('FULLPLAIN')
src[t.FULLPLAIN] = 'v?' + src[t.MAINVERSION] +
                  src[t.PRERELEASE] + '?' +
                  src[t.BUILD] + '?'

src[t.FULL] = '^' + src[t.FULLPLAIN] + '$'

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
tok('LOOSEPLAIN')
src[t.LOOSEPLAIN] = '[v=\\s]*' + src[t.MAINVERSIONLOOSE] +
                  src[t.PRERELEASELOOSE] + '?' +
                  src[t.BUILD] + '?'

tok('LOOSE')
src[t.LOOSE] = '^' + src[t.LOOSEPLAIN] + '$'

tok('GTLT')
src[t.GTLT] = '((?:<|>)?=?)'

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
tok('XRANGEIDENTIFIERLOOSE')
src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + '|x|X|\\*'
tok('XRANGEIDENTIFIER')
src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + '|x|X|\\*'

tok('XRANGEPLAIN')
src[t.XRANGEPLAIN] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' +
                   '(?:\\.(' + src[t.XRANGEIDENTIFIER] + ')' +
                   '(?:' + src[t.PRERELEASE] + ')?' +
                   src[t.BUILD] + '?' +
                   ')?)?'

tok('XRANGEPLAINLOOSE')
src[t.XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:\\.(' + src[t.XRANGEIDENTIFIERLOOSE] + ')' +
                        '(?:' + src[t.PRERELEASELOOSE] + ')?' +
                        src[t.BUILD] + '?' +
                        ')?)?'

tok('XRANGE')
src[t.XRANGE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAIN] + '$'
tok('XRANGELOOSE')
src[t.XRANGELOOSE] = '^' + src[t.GTLT] + '\\s*' + src[t.XRANGEPLAINLOOSE] + '$'

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
tok('COERCE')
src[t.COERCE] = '(^|[^\\d])' +
              '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
              '(?:$|[^\\d])'
tok('COERCERTL')
re[t.COERCERTL] = new RegExp(src[t.COERCE], 'g')

// Tilde ranges.
// Meaning is "reasonably at or greater than"
tok('LONETILDE')
src[t.LONETILDE] = '(?:~>?)'

tok('TILDETRIM')
src[t.TILDETRIM] = '(\\s*)' + src[t.LONETILDE] + '\\s+'
re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], 'g')
var tildeTrimReplace = '$1~'

tok('TILDE')
src[t.TILDE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAIN] + '$'
tok('TILDELOOSE')
src[t.TILDELOOSE] = '^' + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + '$'

// Caret ranges.
// Meaning is "at least and backwards compatible with"
tok('LONECARET')
src[t.LONECARET] = '(?:\\^)'

tok('CARETTRIM')
src[t.CARETTRIM] = '(\\s*)' + src[t.LONECARET] + '\\s+'
re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], 'g')
var caretTrimReplace = '$1^'

tok('CARET')
src[t.CARET] = '^' + src[t.LONECARET] + src[t.XRANGEPLAIN] + '$'
tok('CARETLOOSE')
src[t.CARETLOOSE] = '^' + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + '$'

// A simple gt/lt/eq thing, or just "" to indicate "any version"
tok('COMPARATORLOOSE')
src[t.COMPARATORLOOSE] = '^' + src[t.GTLT] + '\\s*(' + src[t.LOOSEPLAIN] + ')$|^$'
tok('COMPARATOR')
src[t.COMPARATOR] = '^' + src[t.GTLT] + '\\s*(' + src[t.FULLPLAIN] + ')$|^$'

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
tok('COMPARATORTRIM')
src[t.COMPARATORTRIM] = '(\\s*)' + src[t.GTLT] +
                      '\\s*(' + src[t.LOOSEPLAIN] + '|' + src[t.XRANGEPLAIN] + ')'

// this one has to use the /g flag
re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], 'g')
var comparatorTrimReplace = '$1$2$3'

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
tok('HYPHENRANGE')
src[t.HYPHENRANGE] = '^\\s*(' + src[t.XRANGEPLAIN] + ')' +
                   '\\s+-\\s+' +
                   '(' + src[t.XRANGEPLAIN] + ')' +
                   '\\s*$'

tok('HYPHENRANGELOOSE')
src[t.HYPHENRANGELOOSE] = '^\\s*(' + src[t.XRANGEPLAINLOOSE] + ')' +
                        '\\s+-\\s+' +
                        '(' + src[t.XRANGEPLAINLOOSE] + ')' +
                        '\\s*$'

// Star ranges basically just allow anything at all.
tok('STAR')
src[t.STAR] = '(<|>)?=?\\s*\\*'

// Compile to actual regexp objects.
// All are flag-free, unless they were created above with a flag.
for (var i = 0; i < R; i++) {
  debug(i, src[i])
  if (!re[i]) {
    re[i] = new RegExp(src[i])
  }
}

exports.parse = parse
function parse (version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (version instanceof SemVer) {
    return version
  }

  if (typeof version !== 'string') {
    return null
  }

  if (version.length > MAX_LENGTH) {
    return null
  }

  var r = options.loose ? re[t.LOOSE] : re[t.FULL]
  if (!r.test(version)) {
    return null
  }

  try {
    return new SemVer(version, options)
  } catch (er) {
    return null
  }
}

exports.valid = valid
function valid (version, options) {
  var v = parse(version, options)
  return v ? v.version : null
}

exports.clean = clean
function clean (version, options) {
  var s = parse(version.trim().replace(/^[=v]+/, ''), options)
  return s ? s.version : null
}

exports.SemVer = SemVer

function SemVer (version, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }
  if (version instanceof SemVer) {
    if (version.loose === options.loose) {
      return version
    } else {
      version = version.version
    }
  } else if (typeof version !== 'string') {
    throw new TypeError('Invalid Version: ' + version)
  }

  if (version.length > MAX_LENGTH) {
    throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
  }

  if (!(this instanceof SemVer)) {
    return new SemVer(version, options)
  }

  debug('SemVer', version, options)
  this.options = options
  this.loose = !!options.loose

  var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])

  if (!m) {
    throw new TypeError('Invalid Version: ' + version)
  }

  this.raw = version

  // these are actually numbers
  this.major = +m[1]
  this.minor = +m[2]
  this.patch = +m[3]

  if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
    throw new TypeError('Invalid major version')
  }

  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
    throw new TypeError('Invalid minor version')
  }

  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
    throw new TypeError('Invalid patch version')
  }

  // numberify any prerelease numeric ids
  if (!m[4]) {
    this.prerelease = []
  } else {
    this.prerelease = m[4].split('.').map(function (id) {
      if (/^[0-9]+$/.test(id)) {
        var num = +id
        if (num >= 0 && num < MAX_SAFE_INTEGER) {
          return num
        }
      }
      return id
    })
  }

  this.build = m[5] ? m[5].split('.') : []
  this.format()
}

SemVer.prototype.format = function () {
  this.version = this.major + '.' + this.minor + '.' + this.patch
  if (this.prerelease.length) {
    this.version += '-' + this.prerelease.join('.')
  }
  return this.version
}

SemVer.prototype.toString = function () {
  return this.version
}

SemVer.prototype.compare = function (other) {
  debug('SemVer.compare', this.version, this.options, other)
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  return this.compareMain(other) || this.comparePre(other)
}

SemVer.prototype.compareMain = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  return compareIdentifiers(this.major, other.major) ||
         compareIdentifiers(this.minor, other.minor) ||
         compareIdentifiers(this.patch, other.patch)
}

SemVer.prototype.comparePre = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  // NOT having a prerelease is > having one
  if (this.prerelease.length && !other.prerelease.length) {
    return -1
  } else if (!this.prerelease.length && other.prerelease.length) {
    return 1
  } else if (!this.prerelease.length && !other.prerelease.length) {
    return 0
  }

  var i = 0
  do {
    var a = this.prerelease[i]
    var b = other.prerelease[i]
    debug('prerelease compare', i, a, b)
    if (a === undefined && b === undefined) {
      return 0
    } else if (b === undefined) {
      return 1
    } else if (a === undefined) {
      return -1
    } else if (a === b) {
      continue
    } else {
      return compareIdentifiers(a, b)
    }
  } while (++i)
}

SemVer.prototype.compareBuild = function (other) {
  if (!(other instanceof SemVer)) {
    other = new SemVer(other, this.options)
  }

  var i = 0
  do {
    var a = this.build[i]
    var b = other.build[i]
    debug('prerelease compare', i, a, b)
    if (a === undefined && b === undefined) {
      return 0
    } else if (b === undefined) {
      return 1
    } else if (a === undefined) {
      return -1
    } else if (a === b) {
      continue
    } else {
      return compareIdentifiers(a, b)
    }
  } while (++i)
}

// preminor will bump the version up to the next minor release, and immediately
// down to pre-release. premajor and prepatch work the same way.
SemVer.prototype.inc = function (release, identifier) {
  switch (release) {
    case 'premajor':
      this.prerelease.length = 0
      this.patch = 0
      this.minor = 0
      this.major++
      this.inc('pre', identifier)
      break
    case 'preminor':
      this.prerelease.length = 0
      this.patch = 0
      this.minor++
      this.inc('pre', identifier)
      break
    case 'prepatch':
      // If this is already a prerelease, it will bump to the next version
      // drop any prereleases that might already exist, since they are not
      // relevant at this point.
      this.prerelease.length = 0
      this.inc('patch', identifier)
      this.inc('pre', identifier)
      break
    // If the input is a non-prerelease version, this acts the same as
    // prepatch.
    case 'prerelease':
      if (this.prerelease.length === 0) {
        this.inc('patch', identifier)
      }
      this.inc('pre', identifier)
      break

    case 'major':
      // If this is a pre-major version, bump up to the same major version.
      // Otherwise increment major.
      // 1.0.0-5 bumps to 1.0.0
      // 1.1.0 bumps to 2.0.0
      if (this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0) {
        this.major++
      }
      this.minor = 0
      this.patch = 0
      this.prerelease = []
      break
    case 'minor':
      // If this is a pre-minor version, bump up to the same minor version.
      // Otherwise increment minor.
      // 1.2.0-5 bumps to 1.2.0
      // 1.2.1 bumps to 1.3.0
      if (this.patch !== 0 || this.prerelease.length === 0) {
        this.minor++
      }
      this.patch = 0
      this.prerelease = []
      break
    case 'patch':
      // If this is not a pre-release version, it will increment the patch.
      // If it is a pre-release it will bump up to the same patch version.
      // 1.2.0-5 patches to 1.2.0
      // 1.2.0 patches to 1.2.1
      if (this.prerelease.length === 0) {
        this.patch++
      }
      this.prerelease = []
      break
    // This probably shouldn't be used publicly.
    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
    case 'pre':
      if (this.prerelease.length === 0) {
        this.prerelease = [0]
      } else {
        var i = this.prerelease.length
        while (--i >= 0) {
          if (typeof this.prerelease[i] === 'number') {
            this.prerelease[i]++
            i = -2
          }
        }
        if (i === -1) {
          // didn't increment anything
          this.prerelease.push(0)
        }
      }
      if (identifier) {
        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
        if (this.prerelease[0] === identifier) {
          if (isNaN(this.prerelease[1])) {
            this.prerelease = [identifier, 0]
          }
        } else {
          this.prerelease = [identifier, 0]
        }
      }
      break

    default:
      throw new Error('invalid increment argument: ' + release)
  }
  this.format()
  this.raw = this.version
  return this
}

exports.inc = inc
function inc (version, release, loose, identifier) {
  if (typeof (loose) === 'string') {
    identifier = loose
    loose = undefined
  }

  try {
    return new SemVer(version, loose).inc(release, identifier).version
  } catch (er) {
    return null
  }
}

exports.diff = diff
function diff (version1, version2) {
  if (eq(version1, version2)) {
    return null
  } else {
    var v1 = parse(version1)
    var v2 = parse(version2)
    var prefix = ''
    if (v1.prerelease.length || v2.prerelease.length) {
      prefix = 'pre'
      var defaultResult = 'prerelease'
    }
    for (var key in v1) {
      if (key === 'major' || key === 'minor' || key === 'patch') {
        if (v1[key] !== v2[key]) {
          return prefix + key
        }
      }
    }
    return defaultResult // may be undefined
  }
}

exports.compareIdentifiers = compareIdentifiers

var numeric = /^[0-9]+$/
function compareIdentifiers (a, b) {
  var anum = numeric.test(a)
  var bnum = numeric.test(b)

  if (anum && bnum) {
    a = +a
    b = +b
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

exports.rcompareIdentifiers = rcompareIdentifiers
function rcompareIdentifiers (a, b) {
  return compareIdentifiers(b, a)
}

exports.major = major
function major (a, loose) {
  return new SemVer(a, loose).major
}

exports.minor = minor
function minor (a, loose) {
  return new SemVer(a, loose).minor
}

exports.patch = patch
function patch (a, loose) {
  return new SemVer(a, loose).patch
}

exports.compare = compare
function compare (a, b, loose) {
  return new SemVer(a, loose).compare(new SemVer(b, loose))
}

exports.compareLoose = compareLoose
function compareLoose (a, b) {
  return compare(a, b, true)
}

exports.compareBuild = compareBuild
function compareBuild (a, b, loose) {
  var versionA = new SemVer(a, loose)
  var versionB = new SemVer(b, loose)
  return versionA.compare(versionB) || versionA.compareBuild(versionB)
}

exports.rcompare = rcompare
function rcompare (a, b, loose) {
  return compare(b, a, loose)
}

exports.sort = sort
function sort (list, loose) {
  return list.sort(function (a, b) {
    return exports.compareBuild(a, b, loose)
  })
}

exports.rsort = rsort
function rsort (list, loose) {
  return list.sort(function (a, b) {
    return exports.compareBuild(b, a, loose)
  })
}

exports.gt = gt
function gt (a, b, loose) {
  return compare(a, b, loose) > 0
}

exports.lt = lt
function lt (a, b, loose) {
  return compare(a, b, loose) < 0
}

exports.eq = eq
function eq (a, b, loose) {
  return compare(a, b, loose) === 0
}

exports.neq = neq
function neq (a, b, loose) {
  return compare(a, b, loose) !== 0
}

exports.gte = gte
function gte (a, b, loose) {
  return compare(a, b, loose) >= 0
}

exports.lte = lte
function lte (a, b, loose) {
  return compare(a, b, loose) <= 0
}

exports.cmp = cmp
function cmp (a, op, b, loose) {
  switch (op) {
    case '===':
      if (typeof a === 'object')
        a = a.version
      if (typeof b === 'object')
        b = b.version
      return a === b

    case '!==':
      if (typeof a === 'object')
        a = a.version
      if (typeof b === 'object')
        b = b.version
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError('Invalid operator: ' + op)
  }
}

exports.Comparator = Comparator
function Comparator (comp, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (comp instanceof Comparator) {
    if (comp.loose === !!options.loose) {
      return comp
    } else {
      comp = comp.value
    }
  }

  if (!(this instanceof Comparator)) {
    return new Comparator(comp, options)
  }

  debug('comparator', comp, options)
  this.options = options
  this.loose = !!options.loose
  this.parse(comp)

  if (this.semver === ANY) {
    this.value = ''
  } else {
    this.value = this.operator + this.semver.version
  }

  debug('comp', this)
}

var ANY = {}
Comparator.prototype.parse = function (comp) {
  var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
  var m = comp.match(r)

  if (!m) {
    throw new TypeError('Invalid comparator: ' + comp)
  }

  this.operator = m[1] !== undefined ? m[1] : ''
  if (this.operator === '=') {
    this.operator = ''
  }

  // if it literally is just '>' or '' then allow anything.
  if (!m[2]) {
    this.semver = ANY
  } else {
    this.semver = new SemVer(m[2], this.options.loose)
  }
}

Comparator.prototype.toString = function () {
  return this.value
}

Comparator.prototype.test = function (version) {
  debug('Comparator.test', version, this.options.loose)

  if (this.semver === ANY || version === ANY) {
    return true
  }

  if (typeof version === 'string') {
    try {
      version = new SemVer(version, this.options)
    } catch (er) {
      return false
    }
  }

  return cmp(version, this.operator, this.semver, this.options)
}

Comparator.prototype.intersects = function (comp, options) {
  if (!(comp instanceof Comparator)) {
    throw new TypeError('a Comparator is required')
  }

  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  var rangeTmp

  if (this.operator === '') {
    if (this.value === '') {
      return true
    }
    rangeTmp = new Range(comp.value, options)
    return satisfies(this.value, rangeTmp, options)
  } else if (comp.operator === '') {
    if (comp.value === '') {
      return true
    }
    rangeTmp = new Range(this.value, options)
    return satisfies(comp.semver, rangeTmp, options)
  }

  var sameDirectionIncreasing =
    (this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '>=' || comp.operator === '>')
  var sameDirectionDecreasing =
    (this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '<=' || comp.operator === '<')
  var sameSemVer = this.semver.version === comp.semver.version
  var differentDirectionsInclusive =
    (this.operator === '>=' || this.operator === '<=') &&
    (comp.operator === '>=' || comp.operator === '<=')
  var oppositeDirectionsLessThan =
    cmp(this.semver, '<', comp.semver, options) &&
    ((this.operator === '>=' || this.operator === '>') &&
    (comp.operator === '<=' || comp.operator === '<'))
  var oppositeDirectionsGreaterThan =
    cmp(this.semver, '>', comp.semver, options) &&
    ((this.operator === '<=' || this.operator === '<') &&
    (comp.operator === '>=' || comp.operator === '>'))

  return sameDirectionIncreasing || sameDirectionDecreasing ||
    (sameSemVer && differentDirectionsInclusive) ||
    oppositeDirectionsLessThan || oppositeDirectionsGreaterThan
}

exports.Range = Range
function Range (range, options) {
  if (!options || typeof options !== 'object') {
    options = {
      loose: !!options,
      includePrerelease: false
    }
  }

  if (range instanceof Range) {
    if (range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease) {
      return range
    } else {
      return new Range(range.raw, options)
    }
  }

  if (range instanceof Comparator) {
    return new Range(range.value, options)
  }

  if (!(this instanceof Range)) {
    return new Range(range, options)
  }

  this.options = options
  this.loose = !!options.loose
  this.includePrerelease = !!options.includePrerelease

  // First, split based on boolean or ||
  this.raw = range
  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
    return this.parseRange(range.trim())
  }, this).filter(function (c) {
    // throw out any that are not relevant for whatever reason
    return c.length
  })

  if (!this.set.length) {
    throw new TypeError('Invalid SemVer Range: ' + range)
  }

  this.format()
}

Range.prototype.format = function () {
  this.range = this.set.map(function (comps) {
    return comps.join(' ').trim()
  }).join('||').trim()
  return this.range
}

Range.prototype.toString = function () {
  return this.range
}

Range.prototype.parseRange = function (range) {
  var loose = this.options.loose
  range = range.trim()
  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
  var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]
  range = range.replace(hr, hyphenReplace)
  debug('hyphen replace', range)
  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
  range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)
  debug('comparator trim', range, re[t.COMPARATORTRIM])

  // `~ 1.2.3` => `~1.2.3`
  range = range.replace(re[t.TILDETRIM], tildeTrimReplace)

  // `^ 1.2.3` => `^1.2.3`
  range = range.replace(re[t.CARETTRIM], caretTrimReplace)

  // normalize spaces
  range = range.split(/\s+/).join(' ')

  // At this point, the range is completely trimmed and
  // ready to be split into comparators.

  var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
  var set = range.split(' ').map(function (comp) {
    return parseComparator(comp, this.options)
  }, this).join(' ').split(/\s+/)
  if (this.options.loose) {
    // in loose mode, throw out any that are not valid comparators
    set = set.filter(function (comp) {
      return !!comp.match(compRe)
    })
  }
  set = set.map(function (comp) {
    return new Comparator(comp, this.options)
  }, this)

  return set
}

Range.prototype.intersects = function (range, options) {
  if (!(range instanceof Range)) {
    throw new TypeError('a Range is required')
  }

  return this.set.some(function (thisComparators) {
    return (
      isSatisfiable(thisComparators, options) &&
      range.set.some(function (rangeComparators) {
        return (
          isSatisfiable(rangeComparators, options) &&
          thisComparators.every(function (thisComparator) {
            return rangeComparators.every(function (rangeComparator) {
              return thisComparator.intersects(rangeComparator, options)
            })
          })
        )
      })
    )
  })
}

// take a set of comparators and determine whether there
// exists a version which can satisfy it
function isSatisfiable (comparators, options) {
  var result = true
  var remainingComparators = comparators.slice()
  var testComparator = remainingComparators.pop()

  while (result && remainingComparators.length) {
    result = remainingComparators.every(function (otherComparator) {
      return testComparator.intersects(otherComparator, options)
    })

    testComparator = remainingComparators.pop()
  }

  return result
}

// Mostly just for testing and legacy API reasons
exports.toComparators = toComparators
function toComparators (range, options) {
  return new Range(range, options).set.map(function (comp) {
    return comp.map(function (c) {
      return c.value
    }).join(' ').trim().split(' ')
  })
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
function parseComparator (comp, options) {
  debug('comp', comp, options)
  comp = replaceCarets(comp, options)
  debug('caret', comp)
  comp = replaceTildes(comp, options)
  debug('tildes', comp)
  comp = replaceXRanges(comp, options)
  debug('xrange', comp)
  comp = replaceStars(comp, options)
  debug('stars', comp)
  return comp
}

function isX (id) {
  return !id || id.toLowerCase() === 'x' || id === '*'
}

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
function replaceTildes (comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceTilde(comp, options)
  }).join(' ')
}

function replaceTilde (comp, options) {
  var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('tilde', comp, _, M, m, p, pr)
    var ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0
      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
    } else if (pr) {
      debug('replaceTilde pr', pr)
      ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
            ' <' + M + '.' + (+m + 1) + '.0'
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0
      ret = '>=' + M + '.' + m + '.' + p +
            ' <' + M + '.' + (+m + 1) + '.0'
    }

    debug('tilde return', ret)
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
// ^1.2.3 --> >=1.2.3 <2.0.0
// ^1.2.0 --> >=1.2.0 <2.0.0
function replaceCarets (comp, options) {
  return comp.trim().split(/\s+/).map(function (comp) {
    return replaceCaret(comp, options)
  }).join(' ')
}

function replaceCaret (comp, options) {
  debug('caret', comp, options)
  var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]
  return comp.replace(r, function (_, M, m, p, pr) {
    debug('caret', comp, _, M, m, p, pr)
    var ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0'
    } else if (isX(p)) {
      if (M === '0') {
        ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0'
      } else {
        ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0'
      }
    } else if (pr) {
      debug('replaceCaret pr', pr)
      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + m + '.' + (+p + 1)
        } else {
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + (+m + 1) + '.0'
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
              ' <' + (+M + 1) + '.0.0'
      }
    } else {
      debug('no pr')
      if (M === '0') {
        if (m === '0') {
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + m + '.' + (+p + 1)
        } else {
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + (+m + 1) + '.0'
        }
      } else {
        ret = '>=' + M + '.' + m + '.' + p +
              ' <' + (+M + 1) + '.0.0'
      }
    }

    debug('caret return', ret)
    return ret
  })
}

function replaceXRanges (comp, options) {
  debug('replaceXRanges', comp, options)
  return comp.split(/\s+/).map(function (comp) {
    return replaceXRange(comp, options)
  }).join(' ')
}

function replaceXRange (comp, options) {
  comp = comp.trim()
  var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]
  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
    debug('xRange', comp, ret, gtlt, M, m, p, pr)
    var xM = isX(M)
    var xm = xM || isX(m)
    var xp = xm || isX(p)
    var anyX = xp

    if (gtlt === '=' && anyX) {
      gtlt = ''
    }

    // if we're including prereleases in the match, then we need
    // to fix this to -0, the lowest possible prerelease value
    pr = options.includePrerelease ? '-0' : ''

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0-0'
      } else {
        // nothing is forbidden
        ret = '*'
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0
      }
      p = 0

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        // >1.2.3 => >= 1.2.4
        gtlt = '>='
        if (xm) {
          M = +M + 1
          m = 0
          p = 0
        } else {
          m = +m + 1
          p = 0
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<'
        if (xm) {
          M = +M + 1
        } else {
          m = +m + 1
        }
      }

      ret = gtlt + M + '.' + m + '.' + p + pr
    } else if (xm) {
      ret = '>=' + M + '.0.0' + pr + ' <' + (+M + 1) + '.0.0' + pr
    } else if (xp) {
      ret = '>=' + M + '.' + m + '.0' + pr +
        ' <' + M + '.' + (+m + 1) + '.0' + pr
    }

    debug('xRange return', ret)

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
function replaceStars (comp, options) {
  debug('replaceStars', comp, options)
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp.trim().replace(re[t.STAR], '')
}

// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0
function hyphenReplace ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr, tb) {
  if (isX(fM)) {
    from = ''
  } else if (isX(fm)) {
    from = '>=' + fM + '.0.0'
  } else if (isX(fp)) {
    from = '>=' + fM + '.' + fm + '.0'
  } else {
    from = '>=' + from
  }

  if (isX(tM)) {
    to = ''
  } else if (isX(tm)) {
    to = '<' + (+tM + 1) + '.0.0'
  } else if (isX(tp)) {
    to = '<' + tM + '.' + (+tm + 1) + '.0'
  } else if (tpr) {
    to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr
  } else {
    to = '<=' + to
  }

  return (from + ' ' + to).trim()
}

// if ANY of the sets match ALL of its comparators, then pass
Range.prototype.test = function (version) {
  if (!version) {
    return false
  }

  if (typeof version === 'string') {
    try {
      version = new SemVer(version, this.options)
    } catch (er) {
      return false
    }
  }

  for (var i = 0; i < this.set.length; i++) {
    if (testSet(this.set[i], version, this.options)) {
      return true
    }
  }
  return false
}

function testSet (set, version, options) {
  for (var i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (i = 0; i < set.length; i++) {
      debug(set[i].semver)
      if (set[i].semver === ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        var allowed = set[i].semver
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}

exports.satisfies = satisfies
function satisfies (version, range, options) {
  try {
    range = new Range(range, options)
  } catch (er) {
    return false
  }
  return range.test(version)
}

exports.maxSatisfying = maxSatisfying
function maxSatisfying (versions, range, options) {
  var max = null
  var maxSV = null
  try {
    var rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!max || maxSV.compare(v) === -1) {
        // compare(max, v, true)
        max = v
        maxSV = new SemVer(max, options)
      }
    }
  })
  return max
}

exports.minSatisfying = minSatisfying
function minSatisfying (versions, range, options) {
  var min = null
  var minSV = null
  try {
    var rangeObj = new Range(range, options)
  } catch (er) {
    return null
  }
  versions.forEach(function (v) {
    if (rangeObj.test(v)) {
      // satisfies(v, range, options)
      if (!min || minSV.compare(v) === 1) {
        // compare(min, v, true)
        min = v
        minSV = new SemVer(min, options)
      }
    }
  })
  return min
}

exports.minVersion = minVersion
function minVersion (range, loose) {
  range = new Range(range, loose)

  var minver = new SemVer('0.0.0')
  if (range.test(minver)) {
    return minver
  }

  minver = new SemVer('0.0.0-0')
  if (range.test(minver)) {
    return minver
  }

  minver = null
  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i]

    comparators.forEach(function (comparator) {
      // Clone to avoid manipulating the comparator's semver object.
      var compver = new SemVer(comparator.semver.version)
      switch (comparator.operator) {
        case '>':
          if (compver.prerelease.length === 0) {
            compver.patch++
          } else {
            compver.prerelease.push(0)
          }
          compver.raw = compver.format()
          /* fallthrough */
        case '':
        case '>=':
          if (!minver || gt(minver, compver)) {
            minver = compver
          }
          break
        case '<':
        case '<=':
          /* Ignore maximum versions */
          break
        /* istanbul ignore next */
        default:
          throw new Error('Unexpected operation: ' + comparator.operator)
      }
    })
  }

  if (minver && range.test(minver)) {
    return minver
  }

  return null
}

exports.validRange = validRange
function validRange (range, options) {
  try {
    // Return '*' instead of '' so that truthiness works.
    // This will throw if it's invalid anyway
    return new Range(range, options).range || '*'
  } catch (er) {
    return null
  }
}

// Determine if version is less than all the versions possible in the range
exports.ltr = ltr
function ltr (version, range, options) {
  return outside(version, range, '<', options)
}

// Determine if version is greater than all the versions possible in the range.
exports.gtr = gtr
function gtr (version, range, options) {
  return outside(version, range, '>', options)
}

exports.outside = outside
function outside (version, range, hilo, options) {
  version = new SemVer(version, options)
  range = new Range(range, options)

  var gtfn, ltefn, ltfn, comp, ecomp
  switch (hilo) {
    case '>':
      gtfn = gt
      ltefn = lte
      ltfn = lt
      comp = '>'
      ecomp = '>='
      break
    case '<':
      gtfn = lt
      ltefn = gte
      ltfn = gt
      comp = '<'
      ecomp = '<='
      break
    default:
      throw new TypeError('Must provide a hilo val of "<" or ">"')
  }

  // If it satisifes the range it is not outside
  if (satisfies(version, range, options)) {
    return false
  }

  // From now on, variable terms are as if we're in "gtr" mode.
  // but note that everything is flipped for the "ltr" function.

  for (var i = 0; i < range.set.length; ++i) {
    var comparators = range.set[i]

    var high = null
    var low = null

    comparators.forEach(function (comparator) {
      if (comparator.semver === ANY) {
        comparator = new Comparator('>=0.0.0')
      }
      high = high || comparator
      low = low || comparator
      if (gtfn(comparator.semver, high.semver, options)) {
        high = comparator
      } else if (ltfn(comparator.semver, low.semver, options)) {
        low = comparator
      }
    })

    // If the edge version comparator has a operator then our version
    // isn't outside it
    if (high.operator === comp || high.operator === ecomp) {
      return false
    }

    // If the lowest version comparator has an operator and our version
    // is less than it then it isn't higher than the range
    if ((!low.operator || low.operator === comp) &&
        ltefn(version, low.semver)) {
      return false
    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
      return false
    }
  }
  return true
}

exports.prerelease = prerelease
function prerelease (version, options) {
  var parsed = parse(version, options)
  return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
}

exports.intersects = intersects
function intersects (r1, r2, options) {
  r1 = new Range(r1, options)
  r2 = new Range(r2, options)
  return r1.intersects(r2)
}

exports.coerce = coerce
function coerce (version, options) {
  if (version instanceof SemVer) {
    return version
  }

  if (typeof version === 'number') {
    version = String(version)
  }

  if (typeof version !== 'string') {
    return null
  }

  options = options || {}

  var match = null
  if (!options.rtl) {
    match = version.match(re[t.COERCE])
  } else {
    // Find the right-most coercible string that does not share
    // a terminus with a more left-ward coercible string.
    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
    //
    // Walk through the string checking with a /g regexp
    // Manually set the index so as to pick up overlapping matches.
    // Stop when we get a match that ends at the string end, since no
    // coercible string can be more right-ward without the same terminus.
    var next
    while ((next = re[t.COERCERTL].exec(version)) &&
      (!match || match.index + match[0].length !== version.length)
    ) {
      if (!match ||
          next.index + next[0].length !== match.index + match[0].length) {
        match = next
      }
      re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length
    }
    // leave it in a clean state
    re[t.COERCERTL].lastIndex = -1
  }

  if (match === null) {
    return null
  }

  return parse(match[2] +
    '.' + (match[3] || '0') +
    '.' + (match[4] || '0'), options)
}

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/semver/semver.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/@looker/extension-sdk/node_modules/semver/semver.js"); } }(); 
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/ansi-html/index.js":
/*!*****************************************!*\
  !*** ./node_modules/ansi-html/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)*m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/ansi-html/index.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/ansi-html/index.js"); } }(); 

/***/ }),

/***/ "./node_modules/ansi-regex/index.js":
/*!******************************************!*\
  !*** ./node_modules/ansi-regex/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function () {
	return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/ansi-regex/index.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/ansi-regex/index.js"); } }(); 

/***/ }),

/***/ "./node_modules/debug/node_modules/ms/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/debug/node_modules/ms/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/debug/node_modules/ms/index.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/debug/node_modules/ms/index.js"); } }(); 

/***/ }),

/***/ "./node_modules/debug/src/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/debug/src/browser.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(/*! ./debug */ "./node_modules/debug/src/debug.js");
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/debug/src/browser.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/debug/src/browser.js"); } }(); 
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/debug/src/debug.js":
/*!*****************************************!*\
  !*** ./node_modules/debug/src/debug.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(/*! ms */ "./node_modules/debug/node_modules/ms/index.js");

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/debug/src/debug.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/debug/src/debug.js"); } }(); 

/***/ }),

/***/ "./node_modules/es6-promise/auto.js":
/*!******************************************!*\
  !*** ./node_modules/es6-promise/auto.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// This file can be required in Browserify and Node.js for automatic polyfill
// To use it:  require('es6-promise/auto');

module.exports = __webpack_require__(/*! ./ */ "./node_modules/es6-promise/dist/es6-promise.js").polyfill();

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/es6-promise/auto.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/es6-promise/auto.js"); } }(); 

/***/ }),

/***/ "./node_modules/es6-promise/dist/es6-promise.js":
/*!******************************************************!*\
  !*** ./node_modules/es6-promise/dist/es6-promise.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process, global) {/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.8+1e68dce6
 */

(function (global, factory) {
	 true ? module.exports = factory() :
	undefined;
}(this, (function () { 'use strict';

function objectOrFunction(x) {
  var type = typeof x;
  return x !== null && (type === 'object' || type === 'function');
}

function isFunction(x) {
  return typeof x === 'function';
}



var _isArray = void 0;
if (Array.isArray) {
  _isArray = Array.isArray;
} else {
  _isArray = function (x) {
    return Object.prototype.toString.call(x) === '[object Array]';
  };
}

var isArray = _isArray;

var len = 0;
var vertxNext = void 0;
var customSchedulerFn = void 0;

var asap = function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 2, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    if (customSchedulerFn) {
      customSchedulerFn(flush);
    } else {
      scheduleFlush();
    }
  }
};

function setScheduler(scheduleFn) {
  customSchedulerFn = scheduleFn;
}

function setAsap(asapFn) {
  asap = asapFn;
}

var browserWindow = typeof window !== 'undefined' ? window : undefined;
var browserGlobal = browserWindow || {};
var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

// test for web worker but not in IE10
var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // see https://github.com/cujojs/when/issues/410 for details
  return function () {
    return process.nextTick(flush);
  };
}

// vertx
function useVertxTimer() {
  if (typeof vertxNext !== 'undefined') {
    return function () {
      vertxNext(flush);
    };
  }

  return useSetTimeout();
}

function useMutationObserver() {
  var iterations = 0;
  var observer = new BrowserMutationObserver(flush);
  var node = document.createTextNode('');
  observer.observe(node, { characterData: true });

  return function () {
    node.data = iterations = ++iterations % 2;
  };
}

// web worker
function useMessageChannel() {
  var channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return function () {
    return channel.port2.postMessage(0);
  };
}

function useSetTimeout() {
  // Store setTimeout reference so es6-promise will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var globalSetTimeout = setTimeout;
  return function () {
    return globalSetTimeout(flush, 1);
  };
}

var queue = new Array(1000);
function flush() {
  for (var i = 0; i < len; i += 2) {
    var callback = queue[i];
    var arg = queue[i + 1];

    callback(arg);

    queue[i] = undefined;
    queue[i + 1] = undefined;
  }

  len = 0;
}

function attemptVertx() {
  try {
    var vertx = Function('return this')().require('vertx');
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}

var scheduleFlush = void 0;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && "function" === 'function') {
  scheduleFlush = attemptVertx();
} else {
  scheduleFlush = useSetTimeout();
}

function then(onFulfillment, onRejection) {
  var parent = this;

  var child = new this.constructor(noop);

  if (child[PROMISE_ID] === undefined) {
    makePromise(child);
  }

  var _state = parent._state;


  if (_state) {
    var callback = arguments[_state - 1];
    asap(function () {
      return invokeCallback(_state, child, callback, parent._result);
    });
  } else {
    subscribe(parent, child, onFulfillment, onRejection);
  }

  return child;
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @static
  @param {Any} value value that the returned promise will be resolved with
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve$1(object) {
  /*jshint validthis:true */
  var Constructor = this;

  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }

  var promise = new Constructor(noop);
  resolve(promise, object);
  return promise;
}

var PROMISE_ID = Math.random().toString(36).substring(2);

function noop() {}

var PENDING = void 0;
var FULFILLED = 1;
var REJECTED = 2;

function selfFulfillment() {
  return new TypeError("You cannot resolve a promise with itself");
}

function cannotReturnOwn() {
  return new TypeError('A promises callback cannot return that same promise.');
}

function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {
  try {
    then$$1.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}

function handleForeignThenable(promise, thenable, then$$1) {
  asap(function (promise) {
    var sealed = false;
    var error = tryThen(then$$1, thenable, function (value) {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable !== value) {
        resolve(promise, value);
      } else {
        fulfill(promise, value);
      }
    }, function (reason) {
      if (sealed) {
        return;
      }
      sealed = true;

      reject(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));

    if (!sealed && error) {
      sealed = true;
      reject(promise, error);
    }
  }, promise);
}

function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    reject(promise, thenable._result);
  } else {
    subscribe(thenable, undefined, function (value) {
      return resolve(promise, value);
    }, function (reason) {
      return reject(promise, reason);
    });
  }
}

function handleMaybeThenable(promise, maybeThenable, then$$1) {
  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {
    handleOwnThenable(promise, maybeThenable);
  } else {
    if (then$$1 === undefined) {
      fulfill(promise, maybeThenable);
    } else if (isFunction(then$$1)) {
      handleForeignThenable(promise, maybeThenable, then$$1);
    } else {
      fulfill(promise, maybeThenable);
    }
  }
}

function resolve(promise, value) {
  if (promise === value) {
    reject(promise, selfFulfillment());
  } else if (objectOrFunction(value)) {
    var then$$1 = void 0;
    try {
      then$$1 = value.then;
    } catch (error) {
      reject(promise, error);
      return;
    }
    handleMaybeThenable(promise, value, then$$1);
  } else {
    fulfill(promise, value);
  }
}

function publishRejection(promise) {
  if (promise._onerror) {
    promise._onerror(promise._result);
  }

  publish(promise);
}

function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }

  promise._result = value;
  promise._state = FULFILLED;

  if (promise._subscribers.length !== 0) {
    asap(publish, promise);
  }
}

function reject(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;

  asap(publishRejection, promise);
}

function subscribe(parent, child, onFulfillment, onRejection) {
  var _subscribers = parent._subscribers;
  var length = _subscribers.length;


  parent._onerror = null;

  _subscribers[length] = child;
  _subscribers[length + FULFILLED] = onFulfillment;
  _subscribers[length + REJECTED] = onRejection;

  if (length === 0 && parent._state) {
    asap(publish, parent);
  }
}

function publish(promise) {
  var subscribers = promise._subscribers;
  var settled = promise._state;

  if (subscribers.length === 0) {
    return;
  }

  var child = void 0,
      callback = void 0,
      detail = promise._result;

  for (var i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];

    if (child) {
      invokeCallback(settled, child, callback, detail);
    } else {
      callback(detail);
    }
  }

  promise._subscribers.length = 0;
}

function invokeCallback(settled, promise, callback, detail) {
  var hasCallback = isFunction(callback),
      value = void 0,
      error = void 0,
      succeeded = true;

  if (hasCallback) {
    try {
      value = callback(detail);
    } catch (e) {
      succeeded = false;
      error = e;
    }

    if (promise === value) {
      reject(promise, cannotReturnOwn());
      return;
    }
  } else {
    value = detail;
  }

  if (promise._state !== PENDING) {
    // noop
  } else if (hasCallback && succeeded) {
    resolve(promise, value);
  } else if (succeeded === false) {
    reject(promise, error);
  } else if (settled === FULFILLED) {
    fulfill(promise, value);
  } else if (settled === REJECTED) {
    reject(promise, value);
  }
}

function initializePromise(promise, resolver) {
  try {
    resolver(function resolvePromise(value) {
      resolve(promise, value);
    }, function rejectPromise(reason) {
      reject(promise, reason);
    });
  } catch (e) {
    reject(promise, e);
  }
}

var id = 0;
function nextId() {
  return id++;
}

function makePromise(promise) {
  promise[PROMISE_ID] = id++;
  promise._state = undefined;
  promise._result = undefined;
  promise._subscribers = [];
}

function validationError() {
  return new Error('Array Methods must be provided an Array');
}

var Enumerator = function () {
  function Enumerator(Constructor, input) {
    this._instanceConstructor = Constructor;
    this.promise = new Constructor(noop);

    if (!this.promise[PROMISE_ID]) {
      makePromise(this.promise);
    }

    if (isArray(input)) {
      this.length = input.length;
      this._remaining = input.length;

      this._result = new Array(this.length);

      if (this.length === 0) {
        fulfill(this.promise, this._result);
      } else {
        this.length = this.length || 0;
        this._enumerate(input);
        if (this._remaining === 0) {
          fulfill(this.promise, this._result);
        }
      }
    } else {
      reject(this.promise, validationError());
    }
  }

  Enumerator.prototype._enumerate = function _enumerate(input) {
    for (var i = 0; this._state === PENDING && i < input.length; i++) {
      this._eachEntry(input[i], i);
    }
  };

  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {
    var c = this._instanceConstructor;
    var resolve$$1 = c.resolve;


    if (resolve$$1 === resolve$1) {
      var _then = void 0;
      var error = void 0;
      var didError = false;
      try {
        _then = entry.then;
      } catch (e) {
        didError = true;
        error = e;
      }

      if (_then === then && entry._state !== PENDING) {
        this._settledAt(entry._state, i, entry._result);
      } else if (typeof _then !== 'function') {
        this._remaining--;
        this._result[i] = entry;
      } else if (c === Promise$1) {
        var promise = new c(noop);
        if (didError) {
          reject(promise, error);
        } else {
          handleMaybeThenable(promise, entry, _then);
        }
        this._willSettleAt(promise, i);
      } else {
        this._willSettleAt(new c(function (resolve$$1) {
          return resolve$$1(entry);
        }), i);
      }
    } else {
      this._willSettleAt(resolve$$1(entry), i);
    }
  };

  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {
    var promise = this.promise;


    if (promise._state === PENDING) {
      this._remaining--;

      if (state === REJECTED) {
        reject(promise, value);
      } else {
        this._result[i] = value;
      }
    }

    if (this._remaining === 0) {
      fulfill(promise, this._result);
    }
  };

  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {
    var enumerator = this;

    subscribe(promise, undefined, function (value) {
      return enumerator._settledAt(FULFILLED, i, value);
    }, function (reason) {
      return enumerator._settledAt(REJECTED, i, reason);
    });
  };

  return Enumerator;
}();

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @static
  @param {Array} entries array of promises
  @param {String} label optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all(entries) {
  return new Enumerator(this, entries).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @static
  @param {Array} promises array of promises to observe
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race(entries) {
  /*jshint validthis:true */
  var Constructor = this;

  if (!isArray(entries)) {
    return new Constructor(function (_, reject) {
      return reject(new TypeError('You must pass an array to race.'));
    });
  } else {
    return new Constructor(function (resolve, reject) {
      var length = entries.length;
      for (var i = 0; i < length; i++) {
        Constructor.resolve(entries[i]).then(resolve, reject);
      }
    });
  }
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @static
  @param {Any} reason value that the returned promise will be rejected with.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject$1(reason) {
  /*jshint validthis:true */
  var Constructor = this;
  var promise = new Constructor(noop);
  reject(promise, reason);
  return promise;
}

function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}

function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise's eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @param {Function} resolver
  Useful for tooling.
  @constructor
*/

var Promise$1 = function () {
  function Promise(resolver) {
    this[PROMISE_ID] = nextId();
    this._result = this._state = undefined;
    this._subscribers = [];

    if (noop !== resolver) {
      typeof resolver !== 'function' && needsResolver();
      this instanceof Promise ? initializePromise(this, resolver) : needsNew();
    }
  }

  /**
  The primary way of interacting with a promise is through its `then` method,
  which registers callbacks to receive either a promise's eventual value or the
  reason why the promise cannot be fulfilled.
   ```js
  findUser().then(function(user){
    // user is available
  }, function(reason){
    // user is unavailable, and you are given the reason why
  });
  ```
   Chaining
  --------
   The return value of `then` is itself a promise.  This second, 'downstream'
  promise is resolved with the return value of the first promise's fulfillment
  or rejection handler, or rejected if the handler throws an exception.
   ```js
  findUser().then(function (user) {
    return user.name;
  }, function (reason) {
    return 'default name';
  }).then(function (userName) {
    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
    // will be `'default name'`
  });
   findUser().then(function (user) {
    throw new Error('Found user, but still unhappy');
  }, function (reason) {
    throw new Error('`findUser` rejected and we're unhappy');
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
  });
  ```
  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
   ```js
  findUser().then(function (user) {
    throw new PedagogicalException('Upstream error');
  }).then(function (value) {
    // never reached
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // The `PedgagocialException` is propagated all the way down to here
  });
  ```
   Assimilation
  ------------
   Sometimes the value you want to propagate to a downstream promise can only be
  retrieved asynchronously. This can be achieved by returning a promise in the
  fulfillment or rejection handler. The downstream promise will then be pending
  until the returned promise is settled. This is called *assimilation*.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // The user's comments are now available
  });
  ```
   If the assimliated promise rejects, then the downstream promise will also reject.
   ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // If `findCommentsByAuthor` fulfills, we'll have the value here
  }, function (reason) {
    // If `findCommentsByAuthor` rejects, we'll have the reason here
  });
  ```
   Simple Example
  --------------
   Synchronous Example
   ```javascript
  let result;
   try {
    result = findResult();
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
  findResult(function(result, err){
    if (err) {
      // failure
    } else {
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findResult().then(function(result){
    // success
  }, function(reason){
    // failure
  });
  ```
   Advanced Example
  --------------
   Synchronous Example
   ```javascript
  let author, books;
   try {
    author = findAuthor();
    books  = findBooksByAuthor(author);
    // success
  } catch(reason) {
    // failure
  }
  ```
   Errback Example
   ```js
   function foundBooks(books) {
   }
   function failure(reason) {
   }
   findAuthor(function(author, err){
    if (err) {
      failure(err);
      // failure
    } else {
      try {
        findBoooksByAuthor(author, function(books, err) {
          if (err) {
            failure(err);
          } else {
            try {
              foundBooks(books);
            } catch(reason) {
              failure(reason);
            }
          }
        });
      } catch(error) {
        failure(err);
      }
      // success
    }
  });
  ```
   Promise Example;
   ```javascript
  findAuthor().
    then(findBooksByAuthor).
    then(function(books){
      // found books
  }).catch(function(reason){
    // something went wrong
  });
  ```
   @method then
  @param {Function} onFulfilled
  @param {Function} onRejected
  Useful for tooling.
  @return {Promise}
  */

  /**
  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
  as the catch block of a try/catch statement.
  ```js
  function findAuthor(){
  throw new Error('couldn't find that author');
  }
  // synchronous
  try {
  findAuthor();
  } catch(reason) {
  // something went wrong
  }
  // async with promises
  findAuthor().catch(function(reason){
  // something went wrong
  });
  ```
  @method catch
  @param {Function} onRejection
  Useful for tooling.
  @return {Promise}
  */


  Promise.prototype.catch = function _catch(onRejection) {
    return this.then(null, onRejection);
  };

  /**
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves
  
    Synchronous example:
  
    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }
  
    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuther();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```
  
    Asynchronous example:
  
    ```js
    findAuthor().catch(function(reason){
      return findOtherAuther();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  
    @method finally
    @param {Function} callback
    @return {Promise}
  */


  Promise.prototype.finally = function _finally(callback) {
    var promise = this;
    var constructor = promise.constructor;

    if (isFunction(callback)) {
      return promise.then(function (value) {
        return constructor.resolve(callback()).then(function () {
          return value;
        });
      }, function (reason) {
        return constructor.resolve(callback()).then(function () {
          throw reason;
        });
      });
    }

    return promise.then(callback, callback);
  };

  return Promise;
}();

Promise$1.prototype.then = then;
Promise$1.all = all;
Promise$1.race = race;
Promise$1.resolve = resolve$1;
Promise$1.reject = reject$1;
Promise$1._setScheduler = setScheduler;
Promise$1._setAsap = setAsap;
Promise$1._asap = asap;

/*global self*/
function polyfill() {
  var local = void 0;

  if (typeof global !== 'undefined') {
    local = global;
  } else if (typeof self !== 'undefined') {
    local = self;
  } else {
    try {
      local = Function('return this')();
    } catch (e) {
      throw new Error('polyfill failed because global object is unavailable in this environment');
    }
  }

  var P = local.Promise;

  if (P) {
    var promiseToString = null;
    try {
      promiseToString = Object.prototype.toString.call(P.resolve());
    } catch (e) {
      // silently ignored
    }

    if (promiseToString === '[object Promise]' && !P.cast) {
      return;
    }
  }

  local.Promise = Promise$1;
}

// Strange compat..
Promise$1.polyfill = polyfill;
Promise$1.Promise = Promise$1;

return Promise$1;

})));



//# sourceMappingURL=es6-promise.map

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/es6-promise/dist/es6-promise.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/es6-promise/dist/es6-promise.js"); } }(); 
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js"), __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/events/events.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/events/events.js"); } }(); 

/***/ }),

/***/ "./node_modules/html-entities/index.js":
/*!*********************************************!*\
  !*** ./node_modules/html-entities/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  XmlEntities: __webpack_require__(/*! ./lib/xml-entities.js */ "./node_modules/html-entities/lib/xml-entities.js"),
  Html4Entities: __webpack_require__(/*! ./lib/html4-entities.js */ "./node_modules/html-entities/lib/html4-entities.js"),
  Html5Entities: __webpack_require__(/*! ./lib/html5-entities.js */ "./node_modules/html-entities/lib/html5-entities.js"),
  AllHtmlEntities: __webpack_require__(/*! ./lib/html5-entities.js */ "./node_modules/html-entities/lib/html5-entities.js")
};

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/html-entities/index.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/html-entities/index.js"); } }(); 

/***/ }),

/***/ "./node_modules/html-entities/lib/html4-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html4-entities.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];

var alphaIndex = {};
var numIndex = {};

var i = 0;
var length = HTML_ALPHA.length;
while (i < length) {
    var a = HTML_ALPHA[i];
    var c = HTML_CODES[i];
    alphaIndex[a] = String.fromCharCode(c);
    numIndex[c] = a;
    i++;
}

/**
 * @constructor
 */
function Html4Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1).toLowerCase() === 'x' ?
                parseInt(entity.substr(2), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.decode = function(str) {
    return new Html4Entities().decode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var alpha = numIndex[str.charCodeAt(i)];
        result += alpha ? "&" + alpha + ";" : str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encode = function(str) {
    return new Html4Entities().encode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var cc = str.charCodeAt(i);
        var alpha = numIndex[cc];
        if (alpha) {
            result += "&" + alpha + ";";
        } else if (cc < 32 || cc > 126) {
            result += "&#" + cc + ";";
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonUTF = function(str) {
    return new Html4Entities().encodeNonUTF(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonASCII = function(str) {
    return new Html4Entities().encodeNonASCII(str);
};

module.exports = Html4Entities;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/html-entities/lib/html4-entities.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/html-entities/lib/html4-entities.js"); } }(); 

/***/ }),

/***/ "./node_modules/html-entities/lib/html5-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html5-entities.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];

var alphaIndex = {};
var charIndex = {};

createIndexes(alphaIndex, charIndex);

/**
 * @constructor
 */
function Html5Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1) === 'x' ?
                parseInt(entity.substr(2).toLowerCase(), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.decode = function(str) {
    return new Html5Entities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var charInfo = charIndex[str.charCodeAt(i)];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        result += str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encode = function(str) {
    return new Html5Entities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var charInfo = charIndex[c];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonUTF = function(str) {
    return new Html5Entities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonASCII = function(str) {
    return new Html5Entities().encodeNonASCII(str);
 };

/**
 * @param {Object} alphaIndex Passed by reference.
 * @param {Object} charIndex Passed by reference.
 */
function createIndexes(alphaIndex, charIndex) {
    var i = ENTITIES.length;
    var _results = [];
    while (i--) {
        var e = ENTITIES[i];
        var alpha = e[0];
        var chars = e[1];
        var chr = chars[0];
        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
        var charInfo;
        if (addChar) {
            charInfo = charIndex[chr] = charIndex[chr] || {};
        }
        if (chars[1]) {
            var chr2 = chars[1];
            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);
            _results.push(addChar && (charInfo[chr2] = alpha));
        } else {
            alphaIndex[alpha] = String.fromCharCode(chr);
            _results.push(addChar && (charInfo[''] = alpha));
        }
    }
}

module.exports = Html5Entities;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/html-entities/lib/html5-entities.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/html-entities/lib/html5-entities.js"); } }(); 

/***/ }),

/***/ "./node_modules/html-entities/lib/xml-entities.js":
/*!********************************************************!*\
  !*** ./node_modules/html-entities/lib/xml-entities.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var ALPHA_INDEX = {
    '&lt': '<',
    '&gt': '>',
    '&quot': '"',
    '&apos': '\'',
    '&amp': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&apos;': '\'',
    '&amp;': '&'
};

var CHAR_INDEX = {
    60: 'lt',
    62: 'gt',
    34: 'quot',
    39: 'apos',
    38: 'amp'
};

var CHAR_S_INDEX = {
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&apos;',
    '&': '&amp;'
};

/**
 * @constructor
 */
function XmlEntities() {}

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/<|>|"|'|&/g, function(s) {
        return CHAR_S_INDEX[s];
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encode = function(str) {
    return new XmlEntities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function(s) {
        if (s.charAt(1) === '#') {
            var code = s.charAt(2).toLowerCase() === 'x' ?
                parseInt(s.substr(3), 16) :
                parseInt(s.substr(2));

            if (isNaN(code) || code < -32768 || code > 65535) {
                return '';
            }
            return String.fromCharCode(code);
        }
        return ALPHA_INDEX[s] || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.decode = function(str) {
    return new XmlEntities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var alpha = CHAR_INDEX[c];
        if (alpha) {
            result += "&" + alpha + ";";
            i++;
            continue;
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonUTF = function(str) {
    return new XmlEntities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLenght = str.length;
    var result = '';
    var i = 0;
    while (i < strLenght) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonASCII = function(str) {
    return new XmlEntities().encodeNonASCII(str);
 };

module.exports = XmlEntities;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/html-entities/lib/xml-entities.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/html-entities/lib/xml-entities.js"); } }(); 

/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
    "use strict";
    if (true) {
        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function () {
    "use strict";

    // Slightly dubious tricks to cut down minimized file size
    var noop = function() {};
    var undefinedType = "undefined";
    var isIE = (typeof window !== undefinedType) && (
        /Trident\/|MSIE /.test(window.navigator.userAgent)
    );

    var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
    ];

    // Cross-browser bind equivalent that works at least back to IE6
    function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === 'function') {
            return method.bind(obj);
        } else {
            try {
                return Function.prototype.bind.call(method, obj);
            } catch (e) {
                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
                return function() {
                    return Function.prototype.apply.apply(method, [obj, arguments]);
                };
            }
        }
    }

    // Trace() doesn't print the message in IE, so for that case we need to wrap it
    function traceForIE() {
        if (console.log) {
            if (console.log.apply) {
                console.log.apply(console, arguments);
            } else {
                // In old IE, native console methods themselves don't have apply().
                Function.prototype.apply.apply(console.log, [console, arguments]);
            }
        }
        if (console.trace) console.trace();
    }

    // Build the best logging method possible for this env
    // Wherever possible we want to bind, not wrap, to preserve stack traces
    function realMethod(methodName) {
        if (methodName === 'debug') {
            methodName = 'log';
        }

        if (typeof console === undefinedType) {
            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
        } else if (methodName === 'trace' && isIE) {
            return traceForIE;
        } else if (console[methodName] !== undefined) {
            return bindMethod(console, methodName);
        } else if (console.log !== undefined) {
            return bindMethod(console, 'log');
        } else {
            return noop;
        }
    }

    // These private functions always need `this` to be set properly

    function replaceLoggingMethods(level, loggerName) {
        /*jshint validthis:true */
        for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            this[methodName] = (i < level) ?
                noop :
                this.methodFactory(methodName, level, loggerName);
        }

        // Define log.log as an alias for log.debug
        this.log = this.debug;
    }

    // In old IE versions, the console isn't present until you first open it.
    // We build realMethod() replacements here that regenerate logging methods
    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function () {
            if (typeof console !== undefinedType) {
                replaceLoggingMethods.call(this, level, loggerName);
                this[methodName].apply(this, arguments);
            }
        };
    }

    // By default, we use closely bound real methods wherever possible, and
    // otherwise we wait for a console to appear, and then try again.
    function defaultMethodFactory(methodName, level, loggerName) {
        /*jshint validthis:true */
        return realMethod(methodName) ||
               enableLoggingWhenConsoleArrives.apply(this, arguments);
    }

    function Logger(name, defaultLevel, factory) {
      var self = this;
      var currentLevel;
      var storageKey = "loglevel";
      if (name) {
        storageKey += ":" + name;
      }

      function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

          if (typeof window === undefinedType) return;

          // Use localStorage if available
          try {
              window.localStorage[storageKey] = levelName;
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {}
      }

      function getPersistedLevel() {
          var storedLevel;

          if (typeof window === undefinedType) return;

          try {
              storedLevel = window.localStorage[storageKey];
          } catch (ignore) {}

          // Fallback to cookies if local storage gives us nothing
          if (typeof storedLevel === undefinedType) {
              try {
                  var cookie = window.document.cookie;
                  var location = cookie.indexOf(
                      encodeURIComponent(storageKey) + "=");
                  if (location !== -1) {
                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
                  }
              } catch (ignore) {}
          }

          // If the stored level is not valid, treat it as if nothing was stored.
          if (self.levels[storedLevel] === undefined) {
              storedLevel = undefined;
          }

          return storedLevel;
      }

      /*
       *
       * Public logger API - see https://github.com/pimterry/loglevel for details
       *
       */

      self.name = name;

      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
          "ERROR": 4, "SILENT": 5};

      self.methodFactory = factory || defaultMethodFactory;

      self.getLevel = function () {
          return currentLevel;
      };

      self.setLevel = function (level, persist) {
          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
              level = self.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
              currentLevel = level;
              if (persist !== false) {  // defaults to true
                  persistLevelIfPossible(level);
              }
              replaceLoggingMethods.call(self, level, name);
              if (typeof console === undefinedType && level < self.levels.SILENT) {
                  return "No console available for logging";
              }
          } else {
              throw "log.setLevel() called with invalid level: " + level;
          }
      };

      self.setDefaultLevel = function (level) {
          if (!getPersistedLevel()) {
              self.setLevel(level, false);
          }
      };

      self.enableAll = function(persist) {
          self.setLevel(self.levels.TRACE, persist);
      };

      self.disableAll = function(persist) {
          self.setLevel(self.levels.SILENT, persist);
      };

      // Initialize with the right level
      var initialLevel = getPersistedLevel();
      if (initialLevel == null) {
          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
      }
      self.setLevel(initialLevel, false);
    }

    /*
     *
     * Top-level API
     *
     */

    var defaultLogger = new Logger();

    var _loggersByName = {};
    defaultLogger.getLogger = function getLogger(name) {
        if (typeof name !== "string" || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }

        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
        }
        return logger;
    };

    // Grab the current global log variable in case of overwrite
    var _log = (typeof window !== undefinedType) ? window.log : undefined;
    defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType &&
               window.log === defaultLogger) {
            window.log = _log;
        }

        return defaultLogger;
    };

    defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
    };

    return defaultLogger;
}));

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/loglevel/lib/loglevel.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/loglevel/lib/loglevel.js"); } }(); 

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/process/browser.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/process/browser.js"); } }(); 

/***/ }),

/***/ "./node_modules/punycode/punycode.js":
/*!*******************************************!*\
  !*** ./node_modules/punycode/punycode.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/punycode/punycode.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/punycode/punycode.js"); } }(); 
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/querystring-es3/decode.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/querystring-es3/decode.js"); } }(); 

/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/querystring-es3/encode.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/querystring-es3/encode.js"); } }(); 

/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/querystring-es3/index.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/querystring-es3/index.js"); } }(); 

/***/ }),

/***/ "./node_modules/sockjs-client/dist/sockjs.js":
/*!***************************************************!*\
  !*** ./node_modules/sockjs-client/dist/sockjs.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/* sockjs-client v1.4.0 | http://sockjs.org | MIT license */
(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
'use strict';

var transportList = require('./transport-list');

module.exports = require('./main')(transportList);

// TODO can't get rid of this until all servers do
if ('_sockjs_onload' in global) {
  setTimeout(global._sockjs_onload, 1);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./main":14,"./transport-list":16}],2:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , Event = require('./event')
  ;

function CloseEvent() {
  Event.call(this);
  this.initEvent('close', false, false);
  this.wasClean = false;
  this.code = 0;
  this.reason = '';
}

inherits(CloseEvent, Event);

module.exports = CloseEvent;

},{"./event":4,"inherits":57}],3:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , EventTarget = require('./eventtarget')
  ;

function EventEmitter() {
  EventTarget.call(this);
}

inherits(EventEmitter, EventTarget);

EventEmitter.prototype.removeAllListeners = function(type) {
  if (type) {
    delete this._listeners[type];
  } else {
    this._listeners = {};
  }
};

EventEmitter.prototype.once = function(type, listener) {
  var self = this
    , fired = false;

  function g() {
    self.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  this.on(type, g);
};

EventEmitter.prototype.emit = function() {
  var type = arguments[0];
  var listeners = this._listeners[type];
  if (!listeners) {
    return;
  }
  // equivalent of Array.prototype.slice.call(arguments, 1);
  var l = arguments.length;
  var args = new Array(l - 1);
  for (var ai = 1; ai < l; ai++) {
    args[ai - 1] = arguments[ai];
  }
  for (var i = 0; i < listeners.length; i++) {
    listeners[i].apply(this, args);
  }
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;

module.exports.EventEmitter = EventEmitter;

},{"./eventtarget":5,"inherits":57}],4:[function(require,module,exports){
'use strict';

function Event(eventType) {
  this.type = eventType;
}

Event.prototype.initEvent = function(eventType, canBubble, cancelable) {
  this.type = eventType;
  this.bubbles = canBubble;
  this.cancelable = cancelable;
  this.timeStamp = +new Date();
  return this;
};

Event.prototype.stopPropagation = function() {};
Event.prototype.preventDefault = function() {};

Event.CAPTURING_PHASE = 1;
Event.AT_TARGET = 2;
Event.BUBBLING_PHASE = 3;

module.exports = Event;

},{}],5:[function(require,module,exports){
'use strict';

/* Simplified implementation of DOM2 EventTarget.
 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
 */

function EventTarget() {
  this._listeners = {};
}

EventTarget.prototype.addEventListener = function(eventType, listener) {
  if (!(eventType in this._listeners)) {
    this._listeners[eventType] = [];
  }
  var arr = this._listeners[eventType];
  // #4
  if (arr.indexOf(listener) === -1) {
    // Make a copy so as not to interfere with a current dispatchEvent.
    arr = arr.concat([listener]);
  }
  this._listeners[eventType] = arr;
};

EventTarget.prototype.removeEventListener = function(eventType, listener) {
  var arr = this._listeners[eventType];
  if (!arr) {
    return;
  }
  var idx = arr.indexOf(listener);
  if (idx !== -1) {
    if (arr.length > 1) {
      // Make a copy so as not to interfere with a current dispatchEvent.
      this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
    } else {
      delete this._listeners[eventType];
    }
    return;
  }
};

EventTarget.prototype.dispatchEvent = function() {
  var event = arguments[0];
  var t = event.type;
  // equivalent of Array.prototype.slice.call(arguments, 0);
  var args = arguments.length === 1 ? [event] : Array.apply(null, arguments);
  // TODO: This doesn't match the real behavior; per spec, onfoo get
  // their place in line from the /first/ time they're set from
  // non-null. Although WebKit bumps it to the end every time it's
  // set.
  if (this['on' + t]) {
    this['on' + t].apply(this, args);
  }
  if (t in this._listeners) {
    // Grab a reference to the listeners list. removeEventListener may alter the list.
    var listeners = this._listeners[t];
    for (var i = 0; i < listeners.length; i++) {
      listeners[i].apply(this, args);
    }
  }
};

module.exports = EventTarget;

},{}],6:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , Event = require('./event')
  ;

function TransportMessageEvent(data) {
  Event.call(this);
  this.initEvent('message', false, false);
  this.data = data;
}

inherits(TransportMessageEvent, Event);

module.exports = TransportMessageEvent;

},{"./event":4,"inherits":57}],7:[function(require,module,exports){
'use strict';

var JSON3 = require('json3')
  , iframeUtils = require('./utils/iframe')
  ;

function FacadeJS(transport) {
  this._transport = transport;
  transport.on('message', this._transportMessage.bind(this));
  transport.on('close', this._transportClose.bind(this));
}

FacadeJS.prototype._transportClose = function(code, reason) {
  iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
};
FacadeJS.prototype._transportMessage = function(frame) {
  iframeUtils.postMessage('t', frame);
};
FacadeJS.prototype._send = function(data) {
  this._transport.send(data);
};
FacadeJS.prototype._close = function() {
  this._transport.close();
  this._transport.removeAllListeners();
};

module.exports = FacadeJS;

},{"./utils/iframe":47,"json3":58}],8:[function(require,module,exports){
(function (process){
'use strict';

var urlUtils = require('./utils/url')
  , eventUtils = require('./utils/event')
  , JSON3 = require('json3')
  , FacadeJS = require('./facade')
  , InfoIframeReceiver = require('./info-iframe-receiver')
  , iframeUtils = require('./utils/iframe')
  , loc = require('./location')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:iframe-bootstrap');
}

module.exports = function(SockJS, availableTransports) {
  var transportMap = {};
  availableTransports.forEach(function(at) {
    if (at.facadeTransport) {
      transportMap[at.facadeTransport.transportName] = at.facadeTransport;
    }
  });

  // hard-coded for the info iframe
  // TODO see if we can make this more dynamic
  transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
  var parentOrigin;

  /* eslint-disable camelcase */
  SockJS.bootstrap_iframe = function() {
    /* eslint-enable camelcase */
    var facade;
    iframeUtils.currentWindowId = loc.hash.slice(1);
    var onMessage = function(e) {
      if (e.source !== parent) {
        return;
      }
      if (typeof parentOrigin === 'undefined') {
        parentOrigin = e.origin;
      }
      if (e.origin !== parentOrigin) {
        return;
      }

      var iframeMessage;
      try {
        iframeMessage = JSON3.parse(e.data);
      } catch (ignored) {
        debug('bad json', e.data);
        return;
      }

      if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
        return;
      }
      switch (iframeMessage.type) {
      case 's':
        var p;
        try {
          p = JSON3.parse(iframeMessage.data);
        } catch (ignored) {
          debug('bad json', iframeMessage.data);
          break;
        }
        var version = p[0];
        var transport = p[1];
        var transUrl = p[2];
        var baseUrl = p[3];
        debug(version, transport, transUrl, baseUrl);
        // change this to semver logic
        if (version !== SockJS.version) {
          throw new Error('Incompatible SockJS! Main site uses:' +
                    ' "' + version + '", the iframe:' +
                    ' "' + SockJS.version + '".');
        }

        if (!urlUtils.isOriginEqual(transUrl, loc.href) ||
            !urlUtils.isOriginEqual(baseUrl, loc.href)) {
          throw new Error('Can\'t connect to different domain from within an ' +
                    'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
        }
        facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
        break;
      case 'm':
        facade._send(iframeMessage.data);
        break;
      case 'c':
        if (facade) {
          facade._close();
        }
        facade = null;
        break;
      }
    };

    eventUtils.attachEvent('message', onMessage);

    // Start
    iframeUtils.postMessage('s');
  };
};

}).call(this,{ env: {} })

},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,"debug":55,"json3":58}],9:[function(require,module,exports){
(function (process){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , objectUtils = require('./utils/object')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-ajax');
}

function InfoAjax(url, AjaxObject) {
  EventEmitter.call(this);

  var self = this;
  var t0 = +new Date();
  this.xo = new AjaxObject('GET', url);

  this.xo.once('finish', function(status, text) {
    var info, rtt;
    if (status === 200) {
      rtt = (+new Date()) - t0;
      if (text) {
        try {
          info = JSON3.parse(text);
        } catch (e) {
          debug('bad json', text);
        }
      }

      if (!objectUtils.isObject(info)) {
        info = {};
      }
    }
    self.emit('finish', info, rtt);
    self.removeAllListeners();
  });
}

inherits(InfoAjax, EventEmitter);

InfoAjax.prototype.close = function() {
  this.removeAllListeners();
  this.xo.close();
};

module.exports = InfoAjax;

}).call(this,{ env: {} })

},{"./utils/object":49,"debug":55,"events":3,"inherits":57,"json3":58}],10:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , JSON3 = require('json3')
  , XHRLocalObject = require('./transport/sender/xhr-local')
  , InfoAjax = require('./info-ajax')
  ;

function InfoReceiverIframe(transUrl) {
  var self = this;
  EventEmitter.call(this);

  this.ir = new InfoAjax(transUrl, XHRLocalObject);
  this.ir.once('finish', function(info, rtt) {
    self.ir = null;
    self.emit('message', JSON3.stringify([info, rtt]));
  });
}

inherits(InfoReceiverIframe, EventEmitter);

InfoReceiverIframe.transportName = 'iframe-info-receiver';

InfoReceiverIframe.prototype.close = function() {
  if (this.ir) {
    this.ir.close();
    this.ir = null;
  }
  this.removeAllListeners();
};

module.exports = InfoReceiverIframe;

},{"./info-ajax":9,"./transport/sender/xhr-local":37,"events":3,"inherits":57,"json3":58}],11:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , utils = require('./utils/event')
  , IframeTransport = require('./transport/iframe')
  , InfoReceiverIframe = require('./info-iframe-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-iframe');
}

function InfoIframe(baseUrl, url) {
  var self = this;
  EventEmitter.call(this);

  var go = function() {
    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);

    ifr.once('message', function(msg) {
      if (msg) {
        var d;
        try {
          d = JSON3.parse(msg);
        } catch (e) {
          debug('bad json', msg);
          self.emit('finish');
          self.close();
          return;
        }

        var info = d[0], rtt = d[1];
        self.emit('finish', info, rtt);
      }
      self.close();
    });

    ifr.once('close', function() {
      self.emit('finish');
      self.close();
    });
  };

  // TODO this seems the same as the 'needBody' from transports
  if (!global.document.body) {
    utils.attachEvent('load', go);
  } else {
    go();
  }
}

inherits(InfoIframe, EventEmitter);

InfoIframe.enabled = function() {
  return IframeTransport.enabled();
};

InfoIframe.prototype.close = function() {
  if (this.ifr) {
    this.ifr.close();
  }
  this.removeAllListeners();
  this.ifr = null;
};

module.exports = InfoIframe;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,"debug":55,"events":3,"inherits":57,"json3":58}],12:[function(require,module,exports){
(function (process){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , urlUtils = require('./utils/url')
  , XDR = require('./transport/sender/xdr')
  , XHRCors = require('./transport/sender/xhr-cors')
  , XHRLocal = require('./transport/sender/xhr-local')
  , XHRFake = require('./transport/sender/xhr-fake')
  , InfoIframe = require('./info-iframe')
  , InfoAjax = require('./info-ajax')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-receiver');
}

function InfoReceiver(baseUrl, urlInfo) {
  debug(baseUrl);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self.doXhr(baseUrl, urlInfo);
  }, 0);
}

inherits(InfoReceiver, EventEmitter);

// TODO this is currently ignoring the list of available transports and the whitelist

InfoReceiver._getReceiver = function(baseUrl, url, urlInfo) {
  // determine method of CORS support (if needed)
  if (urlInfo.sameOrigin) {
    return new InfoAjax(url, XHRLocal);
  }
  if (XHRCors.enabled) {
    return new InfoAjax(url, XHRCors);
  }
  if (XDR.enabled && urlInfo.sameScheme) {
    return new InfoAjax(url, XDR);
  }
  if (InfoIframe.enabled()) {
    return new InfoIframe(baseUrl, url);
  }
  return new InfoAjax(url, XHRFake);
};

InfoReceiver.prototype.doXhr = function(baseUrl, urlInfo) {
  var self = this
    , url = urlUtils.addPath(baseUrl, '/info')
    ;
  debug('doXhr', url);

  this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);

  this.timeoutRef = setTimeout(function() {
    debug('timeout');
    self._cleanup(false);
    self.emit('finish');
  }, InfoReceiver.timeout);

  this.xo.once('finish', function(info, rtt) {
    debug('finish', info, rtt);
    self._cleanup(true);
    self.emit('finish', info, rtt);
  });
};

InfoReceiver.prototype._cleanup = function(wasClean) {
  debug('_cleanup');
  clearTimeout(this.timeoutRef);
  this.timeoutRef = null;
  if (!wasClean && this.xo) {
    this.xo.close();
  }
  this.xo = null;
};

InfoReceiver.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  this._cleanup(false);
};

InfoReceiver.timeout = 8000;

module.exports = InfoReceiver;

}).call(this,{ env: {} })

},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,"debug":55,"events":3,"inherits":57}],13:[function(require,module,exports){
(function (global){
'use strict';

module.exports = global.location || {
  origin: 'http://localhost:80'
, protocol: 'http:'
, host: 'localhost'
, port: 80
, href: 'http://localhost/'
, hash: ''
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],14:[function(require,module,exports){
(function (process,global){
'use strict';

require('./shims');

var URL = require('url-parse')
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , random = require('./utils/random')
  , escape = require('./utils/escape')
  , urlUtils = require('./utils/url')
  , eventUtils = require('./utils/event')
  , transport = require('./utils/transport')
  , objectUtils = require('./utils/object')
  , browser = require('./utils/browser')
  , log = require('./utils/log')
  , Event = require('./event/event')
  , EventTarget = require('./event/eventtarget')
  , loc = require('./location')
  , CloseEvent = require('./event/close')
  , TransportMessageEvent = require('./event/trans-message')
  , InfoReceiver = require('./info-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:main');
}

var transports;

// follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface
function SockJS(url, protocols, options) {
  if (!(this instanceof SockJS)) {
    return new SockJS(url, protocols, options);
  }
  if (arguments.length < 1) {
    throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
  }
  EventTarget.call(this);

  this.readyState = SockJS.CONNECTING;
  this.extensions = '';
  this.protocol = '';

  // non-standard extension
  options = options || {};
  if (options.protocols_whitelist) {
    log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
  }
  this._transportsWhitelist = options.transports;
  this._transportOptions = options.transportOptions || {};
  this._timeout = options.timeout || 0;

  var sessionId = options.sessionId || 8;
  if (typeof sessionId === 'function') {
    this._generateSessionId = sessionId;
  } else if (typeof sessionId === 'number') {
    this._generateSessionId = function() {
      return random.string(sessionId);
    };
  } else {
    throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
  }

  this._server = options.server || random.numberString(1000);

  // Step 1 of WS spec - parse and validate the url. Issue #8
  var parsedUrl = new URL(url);
  if (!parsedUrl.host || !parsedUrl.protocol) {
    throw new SyntaxError("The URL '" + url + "' is invalid");
  } else if (parsedUrl.hash) {
    throw new SyntaxError('The URL must not contain a fragment');
  } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
    throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
  }

  var secure = parsedUrl.protocol === 'https:';
  // Step 2 - don't allow secure origin with an insecure protocol
  if (loc.protocol === 'https:' && !secure) {
    throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
  }

  // Step 3 - check port access - no need here
  // Step 4 - parse protocols argument
  if (!protocols) {
    protocols = [];
  } else if (!Array.isArray(protocols)) {
    protocols = [protocols];
  }

  // Step 5 - check protocols argument
  var sortedProtocols = protocols.sort();
  sortedProtocols.forEach(function(proto, i) {
    if (!proto) {
      throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
    }
    if (i < (sortedProtocols.length - 1) && proto === sortedProtocols[i + 1]) {
      throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
    }
  });

  // Step 6 - convert origin
  var o = urlUtils.getOrigin(loc.href);
  this._origin = o ? o.toLowerCase() : null;

  // remove the trailing slash
  parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, ''));

  // store the sanitized url
  this.url = parsedUrl.href;
  debug('using url', this.url);

  // Step 7 - start connection in background
  // obtain server info
  // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26
  this._urlInfo = {
    nullOrigin: !browser.hasDomain()
  , sameOrigin: urlUtils.isOriginEqual(this.url, loc.href)
  , sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
  };

  this._ir = new InfoReceiver(this.url, this._urlInfo);
  this._ir.once('finish', this._receiveInfo.bind(this));
}

inherits(SockJS, EventTarget);

function userSetCode(code) {
  return code === 1000 || (code >= 3000 && code <= 4999);
}

SockJS.prototype.close = function(code, reason) {
  // Step 1
  if (code && !userSetCode(code)) {
    throw new Error('InvalidAccessError: Invalid code');
  }
  // Step 2.4 states the max is 123 bytes, but we are just checking length
  if (reason && reason.length > 123) {
    throw new SyntaxError('reason argument has an invalid length');
  }

  // Step 3.1
  if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
    return;
  }

  // TODO look at docs to determine how to set this
  var wasClean = true;
  this._close(code || 1000, reason || 'Normal closure', wasClean);
};

SockJS.prototype.send = function(data) {
  // #13 - convert anything non-string to string
  // TODO this currently turns objects into [object Object]
  if (typeof data !== 'string') {
    data = '' + data;
  }
  if (this.readyState === SockJS.CONNECTING) {
    throw new Error('InvalidStateError: The connection has not been established yet');
  }
  if (this.readyState !== SockJS.OPEN) {
    return;
  }
  this._transport.send(escape.quote(data));
};

SockJS.version = require('./version');

SockJS.CONNECTING = 0;
SockJS.OPEN = 1;
SockJS.CLOSING = 2;
SockJS.CLOSED = 3;

SockJS.prototype._receiveInfo = function(info, rtt) {
  debug('_receiveInfo', rtt);
  this._ir = null;
  if (!info) {
    this._close(1002, 'Cannot connect to server');
    return;
  }

  // establish a round-trip timeout (RTO) based on the
  // round-trip time (RTT)
  this._rto = this.countRTO(rtt);
  // allow server to override url used for the actual transport
  this._transUrl = info.base_url ? info.base_url : this.url;
  info = objectUtils.extend(info, this._urlInfo);
  debug('info', info);
  // determine list of desired and supported transports
  var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
  this._transports = enabledTransports.main;
  debug(this._transports.length + ' enabled transports');

  this._connect();
};

SockJS.prototype._connect = function() {
  for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
    debug('attempt', Transport.transportName);
    if (Transport.needBody) {
      if (!global.document.body ||
          (typeof global.document.readyState !== 'undefined' &&
            global.document.readyState !== 'complete' &&
            global.document.readyState !== 'interactive')) {
        debug('waiting for body');
        this._transports.unshift(Transport);
        eventUtils.attachEvent('load', this._connect.bind(this));
        return;
      }
    }

    // calculate timeout based on RTO and round trips. Default to 5s
    var timeoutMs = Math.max(this._timeout, (this._rto * Transport.roundTrips) || 5000);
    this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
    debug('using timeout', timeoutMs);

    var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
    var options = this._transportOptions[Transport.transportName];
    debug('transport url', transportUrl);
    var transportObj = new Transport(transportUrl, this._transUrl, options);
    transportObj.on('message', this._transportMessage.bind(this));
    transportObj.once('close', this._transportClose.bind(this));
    transportObj.transportName = Transport.transportName;
    this._transport = transportObj;

    return;
  }
  this._close(2000, 'All transports failed', false);
};

SockJS.prototype._transportTimeout = function() {
  debug('_transportTimeout');
  if (this.readyState === SockJS.CONNECTING) {
    if (this._transport) {
      this._transport.close();
    }

    this._transportClose(2007, 'Transport timed out');
  }
};

SockJS.prototype._transportMessage = function(msg) {
  debug('_transportMessage', msg);
  var self = this
    , type = msg.slice(0, 1)
    , content = msg.slice(1)
    , payload
    ;

  // first check for messages that don't need a payload
  switch (type) {
    case 'o':
      this._open();
      return;
    case 'h':
      this.dispatchEvent(new Event('heartbeat'));
      debug('heartbeat', this.transport);
      return;
  }

  if (content) {
    try {
      payload = JSON3.parse(content);
    } catch (e) {
      debug('bad json', content);
    }
  }

  if (typeof payload === 'undefined') {
    debug('empty payload', content);
    return;
  }

  switch (type) {
    case 'a':
      if (Array.isArray(payload)) {
        payload.forEach(function(p) {
          debug('message', self.transport, p);
          self.dispatchEvent(new TransportMessageEvent(p));
        });
      }
      break;
    case 'm':
      debug('message', this.transport, payload);
      this.dispatchEvent(new TransportMessageEvent(payload));
      break;
    case 'c':
      if (Array.isArray(payload) && payload.length === 2) {
        this._close(payload[0], payload[1], true);
      }
      break;
  }
};

SockJS.prototype._transportClose = function(code, reason) {
  debug('_transportClose', this.transport, code, reason);
  if (this._transport) {
    this._transport.removeAllListeners();
    this._transport = null;
    this.transport = null;
  }

  if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
    this._connect();
    return;
  }

  this._close(code, reason);
};

SockJS.prototype._open = function() {
  debug('_open', this._transport && this._transport.transportName, this.readyState);
  if (this.readyState === SockJS.CONNECTING) {
    if (this._transportTimeoutId) {
      clearTimeout(this._transportTimeoutId);
      this._transportTimeoutId = null;
    }
    this.readyState = SockJS.OPEN;
    this.transport = this._transport.transportName;
    this.dispatchEvent(new Event('open'));
    debug('connected', this.transport);
  } else {
    // The server might have been restarted, and lost track of our
    // connection.
    this._close(1006, 'Server lost session');
  }
};

SockJS.prototype._close = function(code, reason, wasClean) {
  debug('_close', this.transport, code, reason, wasClean, this.readyState);
  var forceFail = false;

  if (this._ir) {
    forceFail = true;
    this._ir.close();
    this._ir = null;
  }
  if (this._transport) {
    this._transport.close();
    this._transport = null;
    this.transport = null;
  }

  if (this.readyState === SockJS.CLOSED) {
    throw new Error('InvalidStateError: SockJS has already been closed');
  }

  this.readyState = SockJS.CLOSING;
  setTimeout(function() {
    this.readyState = SockJS.CLOSED;

    if (forceFail) {
      this.dispatchEvent(new Event('error'));
    }

    var e = new CloseEvent('close');
    e.wasClean = wasClean || false;
    e.code = code || 1000;
    e.reason = reason;

    this.dispatchEvent(e);
    this.onmessage = this.onclose = this.onerror = null;
    debug('disconnected');
  }.bind(this), 0);
};

// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
// and RFC 2988.
SockJS.prototype.countRTO = function(rtt) {
  // In a local environment, when using IE8/9 and the `jsonp-polling`
  // transport the time needed to establish a connection (the time that pass
  // from the opening of the transport to the call of `_dispatchOpen`) is
  // around 200msec (the lower bound used in the article above) and this
  // causes spurious timeouts. For this reason we calculate a value slightly
  // larger than that used in the article.
  if (rtt > 100) {
    return 4 * rtt; // rto > 400msec
  }
  return 300 + rtt; // 300msec < rto <= 400msec
};

module.exports = function(availableTransports) {
  transports = transport(availableTransports);
  require('./iframe-bootstrap')(SockJS, availableTransports);
  return SockJS;
};

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,"debug":55,"inherits":57,"json3":58,"url-parse":61}],15:[function(require,module,exports){
/* eslint-disable */
/* jscs: disable */
'use strict';

// pulled specific shims from https://github.com/es-shims/es5-shim

var ArrayPrototype = Array.prototype;
var ObjectPrototype = Object.prototype;
var FunctionPrototype = Function.prototype;
var StringPrototype = String.prototype;
var array_slice = ArrayPrototype.slice;

var _toString = ObjectPrototype.toString;
var isFunction = function (val) {
    return ObjectPrototype.toString.call(val) === '[object Function]';
};
var isArray = function isArray(obj) {
    return _toString.call(obj) === '[object Array]';
};
var isString = function isString(obj) {
    return _toString.call(obj) === '[object String]';
};

var supportsDescriptors = Object.defineProperty && (function () {
    try {
        Object.defineProperty({}, 'x', {});
        return true;
    } catch (e) { /* this is ES3 */
        return false;
    }
}());

// Define configurable, writable and non-enumerable props
// if they don't exist.
var defineProperty;
if (supportsDescriptors) {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        Object.defineProperty(object, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: method
        });
    };
} else {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        object[name] = method;
    };
}
var defineProperties = function (object, map, forceAssign) {
    for (var name in map) {
        if (ObjectPrototype.hasOwnProperty.call(map, name)) {
          defineProperty(object, name, map[name], forceAssign);
        }
    }
};

var toObject = function (o) {
    if (o == null) { // this matches both null and undefined
        throw new TypeError("can't convert " + o + ' to object');
    }
    return Object(o);
};

//
// Util
// ======
//

// ES5 9.4
// http://es5.github.com/#x9.4
// http://jsperf.com/to-integer

function toInteger(num) {
    var n = +num;
    if (n !== n) { // isNaN
        n = 0;
    } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
    }
    return n;
}

function ToUint32(x) {
    return x >>> 0;
}

//
// Function
// ========
//

// ES-5 15.3.4.5
// http://es5.github.com/#x15.3.4.5

function Empty() {}

defineProperties(FunctionPrototype, {
    bind: function bind(that) { // .length is 1
        // 1. Let Target be the this value.
        var target = this;
        // 2. If IsCallable(Target) is false, throw a TypeError exception.
        if (!isFunction(target)) {
            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
        }
        // 3. Let A be a new (possibly empty) internal list of all of the
        //   argument values provided after thisArg (arg1, arg2 etc), in order.
        // XXX slicedArgs will stand in for "A" if used
        var args = array_slice.call(arguments, 1); // for normal call
        // 4. Let F be a new native ECMAScript object.
        // 11. Set the [[Prototype]] internal property of F to the standard
        //   built-in Function prototype object as specified in 15.3.3.1.
        // 12. Set the [[Call]] internal property of F as described in
        //   15.3.4.5.1.
        // 13. Set the [[Construct]] internal property of F as described in
        //   15.3.4.5.2.
        // 14. Set the [[HasInstance]] internal property of F as described in
        //   15.3.4.5.3.
        var binder = function () {

            if (this instanceof bound) {
                // 15.3.4.5.2 [[Construct]]
                // When the [[Construct]] internal method of a function object,
                // F that was created using the bind function is called with a
                // list of arguments ExtraArgs, the following steps are taken:
                // 1. Let target be the value of F's [[TargetFunction]]
                //   internal property.
                // 2. If target has no [[Construct]] internal method, a
                //   TypeError exception is thrown.
                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Construct]] internal
                //   method of target providing args as the arguments.

                var result = target.apply(
                    this,
                    args.concat(array_slice.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;

            } else {
                // 15.3.4.5.1 [[Call]]
                // When the [[Call]] internal method of a function object, F,
                // which was created using the bind function is called with a
                // this value and a list of arguments ExtraArgs, the following
                // steps are taken:
                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 2. Let boundThis be the value of F's [[BoundThis]] internal
                //   property.
                // 3. Let target be the value of F's [[TargetFunction]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Call]] internal method
                //   of target providing boundThis as the this value and
                //   providing args as the arguments.

                // equiv: target.call(this, ...boundArgs, ...args)
                return target.apply(
                    that,
                    args.concat(array_slice.call(arguments))
                );

            }

        };

        // 15. If the [[Class]] internal property of Target is "Function", then
        //     a. Let L be the length property of Target minus the length of A.
        //     b. Set the length own property of F to either 0 or L, whichever is
        //       larger.
        // 16. Else set the length own property of F to 0.

        var boundLength = Math.max(0, target.length - args.length);

        // 17. Set the attributes of the length own property of F to the values
        //   specified in 15.3.5.1.
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        // XXX Build a dynamic function with desired amount of arguments is the only
        // way to set the length property of a function.
        // In environments where Content Security Policies enabled (Chrome extensions,
        // for ex.) all use of eval or Function costructor throws an exception.
        // However in all of these environments Function.prototype.bind exists
        // and so this code will never be executed.
        var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);

        if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            // Clean up dangling references.
            Empty.prototype = null;
        }

        // TODO
        // 18. Set the [[Extensible]] internal property of F to true.

        // TODO
        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
        // 20. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
        //   false.
        // 21. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
        //   and false.

        // TODO
        // NOTE Function objects created using Function.prototype.bind do not
        // have a prototype property or the [[Code]], [[FormalParameters]], and
        // [[Scope]] internal properties.
        // XXX can't delete prototype in pure-js.

        // 22. Return F.
        return bound;
    }
});

//
// Array
// =====
//

// ES5 15.4.3.2
// http://es5.github.com/#x15.4.3.2
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
defineProperties(Array, { isArray: isArray });


var boxedString = Object('a');
var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

var properlyBoxesContext = function properlyBoxed(method) {
    // Check node 0.6.21 bug where third parameter is not boxed
    var properlyBoxesNonStrict = true;
    var properlyBoxesStrict = true;
    if (method) {
        method.call('foo', function (_, __, context) {
            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }
        });

        method.call([1], function () {
            'use strict';
            properlyBoxesStrict = typeof this === 'string';
        }, 'x');
    }
    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
};

defineProperties(ArrayPrototype, {
    forEach: function forEach(fun /*, thisp*/) {
        var object = toObject(this),
            self = splitString && isString(this) ? this.split('') : object,
            thisp = arguments[1],
            i = -1,
            length = self.length >>> 0;

        // If no callback function or if callback is not a callable function
        if (!isFunction(fun)) {
            throw new TypeError(); // TODO message
        }

        while (++i < length) {
            if (i in self) {
                // Invoke the callback function with call, passing arguments:
                // context, property value, property key, thisArg object
                // context
                fun.call(thisp, self[i], i, object);
            }
        }
    }
}, !properlyBoxesContext(ArrayPrototype.forEach));

// ES5 15.4.4.14
// http://es5.github.com/#x15.4.4.14
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
defineProperties(ArrayPrototype, {
    indexOf: function indexOf(sought /*, fromIndex */ ) {
        var self = splitString && isString(this) ? this.split('') : toObject(this),
            length = self.length >>> 0;

        if (!length) {
            return -1;
        }

        var i = 0;
        if (arguments.length > 1) {
            i = toInteger(arguments[1]);
        }

        // handle negative indices
        i = i >= 0 ? i : Math.max(0, length + i);
        for (; i < length; i++) {
            if (i in self && self[i] === sought) {
                return i;
            }
        }
        return -1;
    }
}, hasFirefox2IndexOfBug);

//
// String
// ======
//

// ES5 15.5.4.14
// http://es5.github.com/#x15.5.4.14

// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
// Many browsers do not split properly with regular expressions or they
// do not perform the split correctly under obscure conditions.
// See http://blog.stevenlevithan.com/archives/cross-browser-split
// I've tested in many browsers and this seems to cover the deviant ones:
//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
//       [undefined, "t", undefined, "e", ...]
//    ''.split(/.?/) should be [], not [""]
//    '.'.split(/()()/) should be ["."], not ["", "", "."]

var string_split = StringPrototype.split;
if (
    'ab'.split(/(?:ab)*/).length !== 2 ||
    '.'.split(/(.?)(.?)/).length !== 4 ||
    'tesst'.split(/(s)*/)[1] === 't' ||
    'test'.split(/(?:)/, -1).length !== 4 ||
    ''.split(/.?/).length ||
    '.'.split(/()()/).length > 1
) {
    (function () {
        var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

        StringPrototype.split = function (separator, limit) {
            var string = this;
            if (separator === void 0 && limit === 0) {
                return [];
            }

            // If `separator` is not a regex, use native split
            if (_toString.call(separator) !== '[object RegExp]') {
                return string_split.call(this, separator, limit);
            }

            var output = [],
                flags = (separator.ignoreCase ? 'i' : '') +
                        (separator.multiline  ? 'm' : '') +
                        (separator.extended   ? 'x' : '') + // Proposed for ES6
                        (separator.sticky     ? 'y' : ''), // Firefox 3+
                lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
                separator2, match, lastIndex, lastLength;
            separator = new RegExp(separator.source, flags + 'g');
            string += ''; // Type-convert
            if (!compliantExecNpcg) {
                // Doesn't need flags gy, but they don't hurt
                separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // Math.pow(2, 32) - 1
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */
            limit = limit === void 0 ?
                -1 >>> 0 : // Math.pow(2, 32) - 1
                ToUint32(limit);
            while (match = separator.exec(string)) {
                // `separator.lastIndex` is not reliable cross-browser
                lastIndex = match.index + match[0].length;
                if (lastIndex > lastLastIndex) {
                    output.push(string.slice(lastLastIndex, match.index));
                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
                    // nonparticipating capturing groups
                    if (!compliantExecNpcg && match.length > 1) {
                        match[0].replace(separator2, function () {
                            for (var i = 1; i < arguments.length - 2; i++) {
                                if (arguments[i] === void 0) {
                                    match[i] = void 0;
                                }
                            }
                        });
                    }
                    if (match.length > 1 && match.index < string.length) {
                        ArrayPrototype.push.apply(output, match.slice(1));
                    }
                    lastLength = match[0].length;
                    lastLastIndex = lastIndex;
                    if (output.length >= limit) {
                        break;
                    }
                }
                if (separator.lastIndex === match.index) {
                    separator.lastIndex++; // Avoid an infinite loop
                }
            }
            if (lastLastIndex === string.length) {
                if (lastLength || !separator.test('')) {
                    output.push('');
                }
            } else {
                output.push(string.slice(lastLastIndex));
            }
            return output.length > limit ? output.slice(0, limit) : output;
        };
    }());

// [bugfix, chrome]
// If separator is undefined, then the result array contains just one String,
// which is the this value (converted to a String). If limit is not undefined,
// then the output array is truncated so that it contains no more than limit
// elements.
// "0".split(undefined, 0) -> []
} else if ('0'.split(void 0, 0).length) {
    StringPrototype.split = function split(separator, limit) {
        if (separator === void 0 && limit === 0) { return []; }
        return string_split.call(this, separator, limit);
    };
}

// ECMA-262, 3rd B.2.3
// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
// non-normative section suggesting uniform semantics and it should be
// normalized across all browsers
// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
var string_substr = StringPrototype.substr;
var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
defineProperties(StringPrototype, {
    substr: function substr(start, length) {
        return string_substr.call(
            this,
            start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,
            length
        );
    }
}, hasNegativeSubstrBug);

},{}],16:[function(require,module,exports){
'use strict';

module.exports = [
  // streaming transports
  require('./transport/websocket')
, require('./transport/xhr-streaming')
, require('./transport/xdr-streaming')
, require('./transport/eventsource')
, require('./transport/lib/iframe-wrap')(require('./transport/eventsource'))

  // polling transports
, require('./transport/htmlfile')
, require('./transport/lib/iframe-wrap')(require('./transport/htmlfile'))
, require('./transport/xhr-polling')
, require('./transport/xdr-polling')
, require('./transport/lib/iframe-wrap')(require('./transport/xhr-polling'))
, require('./transport/jsonp-polling')
];

},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , utils = require('../../utils/event')
  , urlUtils = require('../../utils/url')
  , XHR = global.XMLHttpRequest
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:browser:xhr');
}

function AbstractXHRObject(method, url, payload, opts) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function () {
    self._start(method, url, payload, opts);
  }, 0);
}

inherits(AbstractXHRObject, EventEmitter);

AbstractXHRObject.prototype._start = function(method, url, payload, opts) {
  var self = this;

  try {
    this.xhr = new XHR();
  } catch (x) {
    // intentionally empty
  }

  if (!this.xhr) {
    debug('no xhr');
    this.emit('finish', 0, 'no xhr support');
    this._cleanup();
    return;
  }

  // several browsers cache POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  // Explorer tends to keep connection open, even after the
  // tab gets closed: http://bugs.jquery.com/ticket/5280
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload cleanup');
    self._cleanup(true);
  });
  try {
    this.xhr.open(method, url, true);
    if (this.timeout && 'timeout' in this.xhr) {
      this.xhr.timeout = this.timeout;
      this.xhr.ontimeout = function() {
        debug('xhr timeout');
        self.emit('finish', 0, '');
        self._cleanup(false);
      };
    }
  } catch (e) {
    debug('exception', e);
    // IE raises an exception on wrong port.
    this.emit('finish', 0, '');
    this._cleanup(false);
    return;
  }

  if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
    debug('withCredentials');
    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
    // "This never affects same-site requests."

    this.xhr.withCredentials = true;
  }
  if (opts && opts.headers) {
    for (var key in opts.headers) {
      this.xhr.setRequestHeader(key, opts.headers[key]);
    }
  }

  this.xhr.onreadystatechange = function() {
    if (self.xhr) {
      var x = self.xhr;
      var text, status;
      debug('readyState', x.readyState);
      switch (x.readyState) {
      case 3:
        // IE doesn't like peeking into responseText or status
        // on Microsoft.XMLHTTP and readystate=3
        try {
          status = x.status;
          text = x.responseText;
        } catch (e) {
          // intentionally empty
        }
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }

        // IE does return readystate == 3 for 404 answers.
        if (status === 200 && text && text.length > 0) {
          debug('chunk');
          self.emit('chunk', status, text);
        }
        break;
      case 4:
        status = x.status;
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }
        // IE returns this for a bad port
        // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx
        if (status === 12005 || status === 12029) {
          status = 0;
        }

        debug('finish', status, x.responseText);
        self.emit('finish', status, x.responseText);
        self._cleanup(false);
        break;
      }
    }
  };

  try {
    self.xhr.send(payload);
  } catch (e) {
    self.emit('finish', 0, '');
    self._cleanup(false);
  }
};

AbstractXHRObject.prototype._cleanup = function(abort) {
  debug('cleanup');
  if (!this.xhr) {
    return;
  }
  this.removeAllListeners();
  utils.unloadDel(this.unloadRef);

  // IE needs this field to be a function
  this.xhr.onreadystatechange = function() {};
  if (this.xhr.ontimeout) {
    this.xhr.ontimeout = null;
  }

  if (abort) {
    try {
      this.xhr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xhr = null;
};

AbstractXHRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

AbstractXHRObject.enabled = !!XHR;
// override XMLHttpRequest for IE6/7
// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (!AbstractXHRObject.enabled && (axo in global)) {
  debug('overriding xmlhttprequest');
  XHR = function() {
    try {
      return new global[axo]('Microsoft.XMLHTTP');
    } catch (e) {
      return null;
    }
  };
  AbstractXHRObject.enabled = !!new XHR();
}

var cors = false;
try {
  cors = 'withCredentials' in new XHR();
} catch (ignored) {
  // intentionally empty
}

AbstractXHRObject.supportsCORS = cors;

module.exports = AbstractXHRObject;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/event":46,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],18:[function(require,module,exports){
(function (global){
module.exports = global.EventSource;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],19:[function(require,module,exports){
(function (global){
'use strict';

var Driver = global.WebSocket || global.MozWebSocket;
if (Driver) {
	module.exports = function WebSocketBrowserDriver(url) {
		return new Driver(url);
	};
} else {
	module.exports = undefined;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],20:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , EventSourceReceiver = require('./receiver/eventsource')
  , XHRCorsObject = require('./sender/xhr-cors')
  , EventSourceDriver = require('eventsource')
  ;

function EventSourceTransport(transUrl) {
  if (!EventSourceTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
}

inherits(EventSourceTransport, AjaxBasedTransport);

EventSourceTransport.enabled = function() {
  return !!EventSourceDriver;
};

EventSourceTransport.transportName = 'eventsource';
EventSourceTransport.roundTrips = 2;

module.exports = EventSourceTransport;

},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,"eventsource":18,"inherits":57}],21:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , HtmlfileReceiver = require('./receiver/htmlfile')
  , XHRLocalObject = require('./sender/xhr-local')
  , AjaxBasedTransport = require('./lib/ajax-based')
  ;

function HtmlFileTransport(transUrl) {
  if (!HtmlfileReceiver.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
}

inherits(HtmlFileTransport, AjaxBasedTransport);

HtmlFileTransport.enabled = function(info) {
  return HtmlfileReceiver.enabled && info.sameOrigin;
};

HtmlFileTransport.transportName = 'htmlfile';
HtmlFileTransport.roundTrips = 2;

module.exports = HtmlFileTransport;

},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,"inherits":57}],22:[function(require,module,exports){
(function (process){
'use strict';

// Few cool transports do work only for same-origin. In order to make
// them work cross-domain we shall use iframe, served from the
// remote domain. New browsers have capabilities to communicate with
// cross domain iframe using postMessage(). In IE it was implemented
// from IE 8+, but of course, IE got some details wrong:
//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
//    http://stevesouders.com/misc/test-postmessage.php

var inherits = require('inherits')
  , JSON3 = require('json3')
  , EventEmitter = require('events').EventEmitter
  , version = require('../version')
  , urlUtils = require('../utils/url')
  , iframeUtils = require('../utils/iframe')
  , eventUtils = require('../utils/event')
  , random = require('../utils/random')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:transport:iframe');
}

function IframeTransport(transport, transUrl, baseUrl) {
  if (!IframeTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  EventEmitter.call(this);

  var self = this;
  this.origin = urlUtils.getOrigin(baseUrl);
  this.baseUrl = baseUrl;
  this.transUrl = transUrl;
  this.transport = transport;
  this.windowId = random.string(8);

  var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
  debug(transport, transUrl, iframeUrl);

  this.iframeObj = iframeUtils.createIframe(iframeUrl, function(r) {
    debug('err callback');
    self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
    self.close();
  });

  this.onmessageCallback = this._message.bind(this);
  eventUtils.attachEvent('message', this.onmessageCallback);
}

inherits(IframeTransport, EventEmitter);

IframeTransport.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  if (this.iframeObj) {
    eventUtils.detachEvent('message', this.onmessageCallback);
    try {
      // When the iframe is not loaded, IE raises an exception
      // on 'contentWindow'.
      this.postMessage('c');
    } catch (x) {
      // intentionally empty
    }
    this.iframeObj.cleanup();
    this.iframeObj = null;
    this.onmessageCallback = this.iframeObj = null;
  }
};

IframeTransport.prototype._message = function(e) {
  debug('message', e.data);
  if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
    debug('not same origin', e.origin, this.origin);
    return;
  }

  var iframeMessage;
  try {
    iframeMessage = JSON3.parse(e.data);
  } catch (ignored) {
    debug('bad json', e.data);
    return;
  }

  if (iframeMessage.windowId !== this.windowId) {
    debug('mismatched window id', iframeMessage.windowId, this.windowId);
    return;
  }

  switch (iframeMessage.type) {
  case 's':
    this.iframeObj.loaded();
    // window global dependency
    this.postMessage('s', JSON3.stringify([
      version
    , this.transport
    , this.transUrl
    , this.baseUrl
    ]));
    break;
  case 't':
    this.emit('message', iframeMessage.data);
    break;
  case 'c':
    var cdata;
    try {
      cdata = JSON3.parse(iframeMessage.data);
    } catch (ignored) {
      debug('bad json', iframeMessage.data);
      return;
    }
    this.emit('close', cdata[0], cdata[1]);
    this.close();
    break;
  }
};

IframeTransport.prototype.postMessage = function(type, data) {
  debug('postMessage', type, data);
  this.iframeObj.post(JSON3.stringify({
    windowId: this.windowId
  , type: type
  , data: data || ''
  }), this.origin);
};

IframeTransport.prototype.send = function(message) {
  debug('send', message);
  this.postMessage('m', message);
};

IframeTransport.enabled = function() {
  return iframeUtils.iframeEnabled;
};

IframeTransport.transportName = 'iframe';
IframeTransport.roundTrips = 2;

module.exports = IframeTransport;

}).call(this,{ env: {} })

},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,"debug":55,"events":3,"inherits":57,"json3":58}],23:[function(require,module,exports){
(function (global){
'use strict';

// The simplest and most robust transport, using the well-know cross
// domain hack - JSONP. This transport is quite inefficient - one
// message could use up to one http request. But at least it works almost
// everywhere.
// Known limitations:
//   o you will get a spinning cursor
//   o for Konqueror a dumb timer is needed to detect errors

var inherits = require('inherits')
  , SenderReceiver = require('./lib/sender-receiver')
  , JsonpReceiver = require('./receiver/jsonp')
  , jsonpSender = require('./sender/jsonp')
  ;

function JsonPTransport(transUrl) {
  if (!JsonPTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
}

inherits(JsonPTransport, SenderReceiver);

JsonPTransport.enabled = function() {
  return !!global.document;
};

JsonPTransport.transportName = 'jsonp-polling';
JsonPTransport.roundTrips = 1;
JsonPTransport.needBody = true;

module.exports = JsonPTransport;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,"inherits":57}],24:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , urlUtils = require('../../utils/url')
  , SenderReceiver = require('./sender-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:ajax-based');
}

function createAjaxSender(AjaxObject) {
  return function(url, payload, callback) {
    debug('create ajax sender', url, payload);
    var opt = {};
    if (typeof payload === 'string') {
      opt.headers = {'Content-type': 'text/plain'};
    }
    var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
    var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
    xo.once('finish', function(status) {
      debug('finish', status);
      xo = null;

      if (status !== 200 && status !== 204) {
        return callback(new Error('http status ' + status));
      }
      callback();
    });
    return function() {
      debug('abort');
      xo.close();
      xo = null;

      var err = new Error('Aborted');
      err.code = 1000;
      callback(err);
    };
  };
}

function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
  SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
}

inherits(AjaxBasedTransport, SenderReceiver);

module.exports = AjaxBasedTransport;

}).call(this,{ env: {} })

},{"../../utils/url":52,"./sender-receiver":28,"debug":55,"inherits":57}],25:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:buffered-sender');
}

function BufferedSender(url, sender) {
  debug(url);
  EventEmitter.call(this);
  this.sendBuffer = [];
  this.sender = sender;
  this.url = url;
}

inherits(BufferedSender, EventEmitter);

BufferedSender.prototype.send = function(message) {
  debug('send', message);
  this.sendBuffer.push(message);
  if (!this.sendStop) {
    this.sendSchedule();
  }
};

// For polling transports in a situation when in the message callback,
// new message is being send. If the sending connection was started
// before receiving one, it is possible to saturate the network and
// timeout due to the lack of receiving socket. To avoid that we delay
// sending messages by some small time, in order to let receiving
// connection be started beforehand. This is only a halfmeasure and
// does not fix the big problem, but it does make the tests go more
// stable on slow networks.
BufferedSender.prototype.sendScheduleWait = function() {
  debug('sendScheduleWait');
  var self = this;
  var tref;
  this.sendStop = function() {
    debug('sendStop');
    self.sendStop = null;
    clearTimeout(tref);
  };
  tref = setTimeout(function() {
    debug('timeout');
    self.sendStop = null;
    self.sendSchedule();
  }, 25);
};

BufferedSender.prototype.sendSchedule = function() {
  debug('sendSchedule', this.sendBuffer.length);
  var self = this;
  if (this.sendBuffer.length > 0) {
    var payload = '[' + this.sendBuffer.join(',') + ']';
    this.sendStop = this.sender(this.url, payload, function(err) {
      self.sendStop = null;
      if (err) {
        debug('error', err);
        self.emit('close', err.code || 1006, 'Sending error: ' + err);
        self.close();
      } else {
        self.sendScheduleWait();
      }
    });
    this.sendBuffer = [];
  }
};

BufferedSender.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

BufferedSender.prototype.close = function() {
  debug('close');
  this._cleanup();
  if (this.sendStop) {
    this.sendStop();
    this.sendStop = null;
  }
};

module.exports = BufferedSender;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],26:[function(require,module,exports){
(function (global){
'use strict';

var inherits = require('inherits')
  , IframeTransport = require('../iframe')
  , objectUtils = require('../../utils/object')
  ;

module.exports = function(transport) {

  function IframeWrapTransport(transUrl, baseUrl) {
    IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
  }

  inherits(IframeWrapTransport, IframeTransport);

  IframeWrapTransport.enabled = function(url, info) {
    if (!global.document) {
      return false;
    }

    var iframeInfo = objectUtils.extend({}, info);
    iframeInfo.sameOrigin = true;
    return transport.enabled(iframeInfo) && IframeTransport.enabled();
  };

  IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
  IframeWrapTransport.needBody = true;
  IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

  IframeWrapTransport.facadeTransport = transport;

  return IframeWrapTransport;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/object":49,"../iframe":22,"inherits":57}],27:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:polling');
}

function Polling(Receiver, receiveUrl, AjaxObject) {
  debug(receiveUrl);
  EventEmitter.call(this);
  this.Receiver = Receiver;
  this.receiveUrl = receiveUrl;
  this.AjaxObject = AjaxObject;
  this._scheduleReceiver();
}

inherits(Polling, EventEmitter);

Polling.prototype._scheduleReceiver = function() {
  debug('_scheduleReceiver');
  var self = this;
  var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);

  poll.on('message', function(msg) {
    debug('message', msg);
    self.emit('message', msg);
  });

  poll.once('close', function(code, reason) {
    debug('close', code, reason, self.pollIsClosing);
    self.poll = poll = null;

    if (!self.pollIsClosing) {
      if (reason === 'network') {
        self._scheduleReceiver();
      } else {
        self.emit('close', code || 1006, reason);
        self.removeAllListeners();
      }
    }
  });
};

Polling.prototype.abort = function() {
  debug('abort');
  this.removeAllListeners();
  this.pollIsClosing = true;
  if (this.poll) {
    this.poll.abort();
  }
};

module.exports = Polling;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],28:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , urlUtils = require('../../utils/url')
  , BufferedSender = require('./buffered-sender')
  , Polling = require('./polling')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender-receiver');
}

function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
  var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
  debug(pollUrl);
  var self = this;
  BufferedSender.call(this, transUrl, senderFunc);

  this.poll = new Polling(Receiver, pollUrl, AjaxObject);
  this.poll.on('message', function(msg) {
    debug('poll message', msg);
    self.emit('message', msg);
  });
  this.poll.once('close', function(code, reason) {
    debug('poll close', code, reason);
    self.poll = null;
    self.emit('close', code, reason);
    self.close();
  });
}

inherits(SenderReceiver, BufferedSender);

SenderReceiver.prototype.close = function() {
  BufferedSender.prototype.close.call(this);
  debug('close');
  this.removeAllListeners();
  if (this.poll) {
    this.poll.abort();
    this.poll = null;
  }
};

module.exports = SenderReceiver;

}).call(this,{ env: {} })

},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,"debug":55,"inherits":57}],29:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , EventSourceDriver = require('eventsource')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:eventsource');
}

function EventSourceReceiver(url) {
  debug(url);
  EventEmitter.call(this);

  var self = this;
  var es = this.es = new EventSourceDriver(url);
  es.onmessage = function(e) {
    debug('message', e.data);
    self.emit('message', decodeURI(e.data));
  };
  es.onerror = function(e) {
    debug('error', es.readyState, e);
    // ES on reconnection has readyState = 0 or 1.
    // on network error it's CLOSED = 2
    var reason = (es.readyState !== 2 ? 'network' : 'permanent');
    self._cleanup();
    self._close(reason);
  };
}

inherits(EventSourceReceiver, EventEmitter);

EventSourceReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

EventSourceReceiver.prototype._cleanup = function() {
  debug('cleanup');
  var es = this.es;
  if (es) {
    es.onmessage = es.onerror = null;
    es.close();
    this.es = null;
  }
};

EventSourceReceiver.prototype._close = function(reason) {
  debug('close', reason);
  var self = this;
  // Safari and chrome < 15 crash if we close window before
  // waiting for ES cleanup. See:
  // https://code.google.com/p/chromium/issues/detail?id=89155
  setTimeout(function() {
    self.emit('close', null, reason);
    self.removeAllListeners();
  }, 200);
};

module.exports = EventSourceReceiver;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"eventsource":18,"inherits":57}],30:[function(require,module,exports){
(function (process,global){
'use strict';

var inherits = require('inherits')
  , iframeUtils = require('../../utils/iframe')
  , urlUtils = require('../../utils/url')
  , EventEmitter = require('events').EventEmitter
  , random = require('../../utils/random')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:htmlfile');
}

function HtmlfileReceiver(url) {
  debug(url);
  EventEmitter.call(this);
  var self = this;
  iframeUtils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));

  debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
  var constructFunc = HtmlfileReceiver.htmlfileEnabled ?
      iframeUtils.createHtmlfile : iframeUtils.createIframe;

  global[iframeUtils.WPrefix][this.id] = {
    start: function() {
      debug('start');
      self.iframeObj.loaded();
    }
  , message: function(data) {
      debug('message', data);
      self.emit('message', data);
    }
  , stop: function() {
      debug('stop');
      self._cleanup();
      self._close('network');
    }
  };
  this.iframeObj = constructFunc(url, function() {
    debug('callback');
    self._cleanup();
    self._close('permanent');
  });
}

inherits(HtmlfileReceiver, EventEmitter);

HtmlfileReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

HtmlfileReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  if (this.iframeObj) {
    this.iframeObj.cleanup();
    this.iframeObj = null;
  }
  delete global[iframeUtils.WPrefix][this.id];
};

HtmlfileReceiver.prototype._close = function(reason) {
  debug('_close', reason);
  this.emit('close', null, reason);
  this.removeAllListeners();
};

HtmlfileReceiver.htmlfileEnabled = false;

// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (axo in global) {
  try {
    HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
  } catch (x) {
    // intentionally empty
  }
}

HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;

module.exports = HtmlfileReceiver;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],31:[function(require,module,exports){
(function (process,global){
'use strict';

var utils = require('../../utils/iframe')
  , random = require('../../utils/random')
  , browser = require('../../utils/browser')
  , urlUtils = require('../../utils/url')
  , inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:jsonp');
}

function JsonpReceiver(url) {
  debug(url);
  var self = this;
  EventEmitter.call(this);

  utils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));

  global[utils.WPrefix][this.id] = this._callback.bind(this);
  this._createScript(urlWithId);

  // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.
  this.timeoutId = setTimeout(function() {
    debug('timeout');
    self._abort(new Error('JSONP script loaded abnormally (timeout)'));
  }, JsonpReceiver.timeout);
}

inherits(JsonpReceiver, EventEmitter);

JsonpReceiver.prototype.abort = function() {
  debug('abort');
  if (global[utils.WPrefix][this.id]) {
    var err = new Error('JSONP user aborted read');
    err.code = 1000;
    this._abort(err);
  }
};

JsonpReceiver.timeout = 35000;
JsonpReceiver.scriptErrorTimeout = 1000;

JsonpReceiver.prototype._callback = function(data) {
  debug('_callback', data);
  this._cleanup();

  if (this.aborting) {
    return;
  }

  if (data) {
    debug('message', data);
    this.emit('message', data);
  }
  this.emit('close', null, 'network');
  this.removeAllListeners();
};

JsonpReceiver.prototype._abort = function(err) {
  debug('_abort', err);
  this._cleanup();
  this.aborting = true;
  this.emit('close', err.code, err.message);
  this.removeAllListeners();
};

JsonpReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  clearTimeout(this.timeoutId);
  if (this.script2) {
    this.script2.parentNode.removeChild(this.script2);
    this.script2 = null;
  }
  if (this.script) {
    var script = this.script;
    // Unfortunately, you can't really abort script loading of
    // the script.
    script.parentNode.removeChild(script);
    script.onreadystatechange = script.onerror =
        script.onload = script.onclick = null;
    this.script = null;
  }
  delete global[utils.WPrefix][this.id];
};

JsonpReceiver.prototype._scriptError = function() {
  debug('_scriptError');
  var self = this;
  if (this.errorTimer) {
    return;
  }

  this.errorTimer = setTimeout(function() {
    if (!self.loadedOkay) {
      self._abort(new Error('JSONP script loaded abnormally (onerror)'));
    }
  }, JsonpReceiver.scriptErrorTimeout);
};

JsonpReceiver.prototype._createScript = function(url) {
  debug('_createScript', url);
  var self = this;
  var script = this.script = global.document.createElement('script');
  var script2;  // Opera synchronous load trick.

  script.id = 'a' + random.string(8);
  script.src = url;
  script.type = 'text/javascript';
  script.charset = 'UTF-8';
  script.onerror = this._scriptError.bind(this);
  script.onload = function() {
    debug('onload');
    self._abort(new Error('JSONP script loaded abnormally (onload)'));
  };

  // IE9 fires 'error' event after onreadystatechange or before, in random order.
  // Use loadedOkay to determine if actually errored
  script.onreadystatechange = function() {
    debug('onreadystatechange', script.readyState);
    if (/loaded|closed/.test(script.readyState)) {
      if (script && script.htmlFor && script.onclick) {
        self.loadedOkay = true;
        try {
          // In IE, actually execute the script.
          script.onclick();
        } catch (x) {
          // intentionally empty
        }
      }
      if (script) {
        self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
      }
    }
  };
  // IE: event/htmlFor/onclick trick.
  // One can't rely on proper order for onreadystatechange. In order to
  // make sure, set a 'htmlFor' and 'event' properties, so that
  // script code will be installed as 'onclick' handler for the
  // script object. Later, onreadystatechange, manually execute this
  // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
  // set. For reference see:
  //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
  // Also, read on that about script ordering:
  //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order
  if (typeof script.async === 'undefined' && global.document.attachEvent) {
    // According to mozilla docs, in recent browsers script.async defaults
    // to 'true', so we may use it to detect a good browser:
    // https://developer.mozilla.org/en/HTML/Element/script
    if (!browser.isOpera()) {
      // Naively assume we're in IE
      try {
        script.htmlFor = script.id;
        script.event = 'onclick';
      } catch (x) {
        // intentionally empty
      }
      script.async = true;
    } else {
      // Opera, second sync script hack
      script2 = this.script2 = global.document.createElement('script');
      script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
      script.async = script2.async = false;
    }
  }
  if (typeof script.async !== 'undefined') {
    script.async = true;
  }

  var head = global.document.getElementsByTagName('head')[0];
  head.insertBefore(script, head.firstChild);
  if (script2) {
    head.insertBefore(script2, head.firstChild);
  }
};

module.exports = JsonpReceiver;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],32:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:xhr');
}

function XhrReceiver(url, AjaxObject) {
  debug(url);
  EventEmitter.call(this);
  var self = this;

  this.bufferPosition = 0;

  this.xo = new AjaxObject('POST', url, null);
  this.xo.on('chunk', this._chunkHandler.bind(this));
  this.xo.once('finish', function(status, text) {
    debug('finish', status, text);
    self._chunkHandler(status, text);
    self.xo = null;
    var reason = status === 200 ? 'network' : 'permanent';
    debug('close', reason);
    self.emit('close', null, reason);
    self._cleanup();
  });
}

inherits(XhrReceiver, EventEmitter);

XhrReceiver.prototype._chunkHandler = function(status, text) {
  debug('_chunkHandler', status);
  if (status !== 200 || !text) {
    return;
  }

  for (var idx = -1; ; this.bufferPosition += idx + 1) {
    var buf = text.slice(this.bufferPosition);
    idx = buf.indexOf('\n');
    if (idx === -1) {
      break;
    }
    var msg = buf.slice(0, idx);
    if (msg) {
      debug('message', msg);
      this.emit('message', msg);
    }
  }
};

XhrReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

XhrReceiver.prototype.abort = function() {
  debug('abort');
  if (this.xo) {
    this.xo.close();
    debug('close');
    this.emit('close', null, 'user');
    this.xo = null;
  }
  this._cleanup();
};

module.exports = XhrReceiver;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],33:[function(require,module,exports){
(function (process,global){
'use strict';

var random = require('../../utils/random')
  , urlUtils = require('../../utils/url')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender:jsonp');
}

var form, area;

function createIframe(id) {
  debug('createIframe', id);
  try {
    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
    return global.document.createElement('<iframe name="' + id + '">');
  } catch (x) {
    var iframe = global.document.createElement('iframe');
    iframe.name = id;
    return iframe;
  }
}

function createForm() {
  debug('createForm');
  form = global.document.createElement('form');
  form.style.display = 'none';
  form.style.position = 'absolute';
  form.method = 'POST';
  form.enctype = 'application/x-www-form-urlencoded';
  form.acceptCharset = 'UTF-8';

  area = global.document.createElement('textarea');
  area.name = 'd';
  form.appendChild(area);

  global.document.body.appendChild(form);
}

module.exports = function(url, payload, callback) {
  debug(url, payload);
  if (!form) {
    createForm();
  }
  var id = 'a' + random.string(8);
  form.target = id;
  form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);

  var iframe = createIframe(id);
  iframe.id = id;
  iframe.style.display = 'none';
  form.appendChild(iframe);

  try {
    area.value = payload;
  } catch (e) {
    // seriously broken browsers get here
  }
  form.submit();

  var completed = function(err) {
    debug('completed', id, err);
    if (!iframe.onerror) {
      return;
    }
    iframe.onreadystatechange = iframe.onerror = iframe.onload = null;
    // Opera mini doesn't like if we GC iframe
    // immediately, thus this timeout.
    setTimeout(function() {
      debug('cleaning up', id);
      iframe.parentNode.removeChild(iframe);
      iframe = null;
    }, 500);
    area.value = '';
    // It is not possible to detect if the iframe succeeded or
    // failed to submit our form.
    callback(err);
  };
  iframe.onerror = function() {
    debug('onerror', id);
    completed();
  };
  iframe.onload = function() {
    debug('onload', id);
    completed();
  };
  iframe.onreadystatechange = function(e) {
    debug('onreadystatechange', id, iframe.readyState, e);
    if (iframe.readyState === 'complete') {
      completed();
    }
  };
  return function() {
    debug('aborted', id);
    completed(new Error('Aborted'));
  };
};

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/random":50,"../../utils/url":52,"debug":55}],34:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , eventUtils = require('../../utils/event')
  , browser = require('../../utils/browser')
  , urlUtils = require('../../utils/url')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender:xdr');
}

// References:
//   http://ajaxian.com/archives/100-line-ajax-wrapper
//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

function XDRObject(method, url, payload) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self._start(method, url, payload);
  }, 0);
}

inherits(XDRObject, EventEmitter);

XDRObject.prototype._start = function(method, url, payload) {
  debug('_start');
  var self = this;
  var xdr = new global.XDomainRequest();
  // IE caches even POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  xdr.onerror = function() {
    debug('onerror');
    self._error();
  };
  xdr.ontimeout = function() {
    debug('ontimeout');
    self._error();
  };
  xdr.onprogress = function() {
    debug('progress', xdr.responseText);
    self.emit('chunk', 200, xdr.responseText);
  };
  xdr.onload = function() {
    debug('load');
    self.emit('finish', 200, xdr.responseText);
    self._cleanup(false);
  };
  this.xdr = xdr;
  this.unloadRef = eventUtils.unloadAdd(function() {
    self._cleanup(true);
  });
  try {
    // Fails with AccessDenied if port number is bogus
    this.xdr.open(method, url);
    if (this.timeout) {
      this.xdr.timeout = this.timeout;
    }
    this.xdr.send(payload);
  } catch (x) {
    this._error();
  }
};

XDRObject.prototype._error = function() {
  this.emit('finish', 0, '');
  this._cleanup(false);
};

XDRObject.prototype._cleanup = function(abort) {
  debug('cleanup', abort);
  if (!this.xdr) {
    return;
  }
  this.removeAllListeners();
  eventUtils.unloadDel(this.unloadRef);

  this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;
  if (abort) {
    try {
      this.xdr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xdr = null;
};

XDRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

// IE 8/9 if the request target uses the same scheme - #79
XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());

module.exports = XDRObject;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],35:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , XhrDriver = require('../driver/xhr')
  ;

function XHRCorsObject(method, url, payload, opts) {
  XhrDriver.call(this, method, url, payload, opts);
}

inherits(XHRCorsObject, XhrDriver);

XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;

module.exports = XHRCorsObject;

},{"../driver/xhr":17,"inherits":57}],36:[function(require,module,exports){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  ;

function XHRFake(/* method, url, payload, opts */) {
  var self = this;
  EventEmitter.call(this);

  this.to = setTimeout(function() {
    self.emit('finish', 200, '{}');
  }, XHRFake.timeout);
}

inherits(XHRFake, EventEmitter);

XHRFake.prototype.close = function() {
  clearTimeout(this.to);
};

XHRFake.timeout = 2000;

module.exports = XHRFake;

},{"events":3,"inherits":57}],37:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , XhrDriver = require('../driver/xhr')
  ;

function XHRLocalObject(method, url, payload /*, opts */) {
  XhrDriver.call(this, method, url, payload, {
    noCredentials: true
  });
}

inherits(XHRLocalObject, XhrDriver);

XHRLocalObject.enabled = XhrDriver.enabled;

module.exports = XHRLocalObject;

},{"../driver/xhr":17,"inherits":57}],38:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('../utils/event')
  , urlUtils = require('../utils/url')
  , inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , WebsocketDriver = require('./driver/websocket')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:websocket');
}

function WebSocketTransport(transUrl, ignore, options) {
  if (!WebSocketTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  EventEmitter.call(this);
  debug('constructor', transUrl);

  var self = this;
  var url = urlUtils.addPath(transUrl, '/websocket');
  if (url.slice(0, 5) === 'https') {
    url = 'wss' + url.slice(5);
  } else {
    url = 'ws' + url.slice(4);
  }
  this.url = url;

  this.ws = new WebsocketDriver(this.url, [], options);
  this.ws.onmessage = function(e) {
    debug('message event', e.data);
    self.emit('message', e.data);
  };
  // Firefox has an interesting bug. If a websocket connection is
  // created after onunload, it stays alive even when user
  // navigates away from the page. In such situation let's lie -
  // let's not open the ws connection at all. See:
  // https://github.com/sockjs/sockjs-client/issues/28
  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload');
    self.ws.close();
  });
  this.ws.onclose = function(e) {
    debug('close event', e.code, e.reason);
    self.emit('close', e.code, e.reason);
    self._cleanup();
  };
  this.ws.onerror = function(e) {
    debug('error event', e);
    self.emit('close', 1006, 'WebSocket connection broken');
    self._cleanup();
  };
}

inherits(WebSocketTransport, EventEmitter);

WebSocketTransport.prototype.send = function(data) {
  var msg = '[' + data + ']';
  debug('send', msg);
  this.ws.send(msg);
};

WebSocketTransport.prototype.close = function() {
  debug('close');
  var ws = this.ws;
  this._cleanup();
  if (ws) {
    ws.close();
  }
};

WebSocketTransport.prototype._cleanup = function() {
  debug('_cleanup');
  var ws = this.ws;
  if (ws) {
    ws.onmessage = ws.onclose = ws.onerror = null;
  }
  utils.unloadDel(this.unloadRef);
  this.unloadRef = this.ws = null;
  this.removeAllListeners();
};

WebSocketTransport.enabled = function() {
  debug('enabled');
  return !!WebsocketDriver;
};
WebSocketTransport.transportName = 'websocket';

// In theory, ws should require 1 round trip. But in chrome, this is
// not very stable over SSL. Most likely a ws connection requires a
// separate SSL connection, in which case 2 round trips are an
// absolute minumum.
WebSocketTransport.roundTrips = 2;

module.exports = WebSocketTransport;

}).call(this,{ env: {} })

},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,"debug":55,"events":3,"inherits":57}],39:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XdrStreamingTransport = require('./xdr-streaming')
  , XhrReceiver = require('./receiver/xhr')
  , XDRObject = require('./sender/xdr')
  ;

function XdrPollingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
}

inherits(XdrPollingTransport, AjaxBasedTransport);

XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
XdrPollingTransport.transportName = 'xdr-polling';
XdrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrPollingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,"inherits":57}],40:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XDRObject = require('./sender/xdr')
  ;

// According to:
//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/

function XdrStreamingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
}

inherits(XdrStreamingTransport, AjaxBasedTransport);

XdrStreamingTransport.enabled = function(info) {
  if (info.cookie_needed || info.nullOrigin) {
    return false;
  }
  return XDRObject.enabled && info.sameScheme;
};

XdrStreamingTransport.transportName = 'xdr-streaming';
XdrStreamingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrStreamingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"inherits":57}],41:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XHRCorsObject = require('./sender/xhr-cors')
  , XHRLocalObject = require('./sender/xhr-local')
  ;

function XhrPollingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
}

inherits(XhrPollingTransport, AjaxBasedTransport);

XhrPollingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }

  if (XHRLocalObject.enabled && info.sameOrigin) {
    return true;
  }
  return XHRCorsObject.enabled;
};

XhrPollingTransport.transportName = 'xhr-polling';
XhrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XhrPollingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,"inherits":57}],42:[function(require,module,exports){
(function (global){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XHRCorsObject = require('./sender/xhr-cors')
  , XHRLocalObject = require('./sender/xhr-local')
  , browser = require('../utils/browser')
  ;

function XhrStreamingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
}

inherits(XhrStreamingTransport, AjaxBasedTransport);

XhrStreamingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }
  // Opera doesn't support xhr-streaming #60
  // But it might be able to #92
  if (browser.isOpera()) {
    return false;
  }

  return XHRCorsObject.enabled;
};

XhrStreamingTransport.transportName = 'xhr-streaming';
XhrStreamingTransport.roundTrips = 2; // preflight, ajax

// Safari gets confused when a streaming ajax request is started
// before onload. This causes the load indicator to spin indefinetely.
// Only require body when used in a browser
XhrStreamingTransport.needBody = !!global.document;

module.exports = XhrStreamingTransport;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,"inherits":57}],43:[function(require,module,exports){
(function (global){
'use strict';

if (global.crypto && global.crypto.getRandomValues) {
  module.exports.randomBytes = function(length) {
    var bytes = new Uint8Array(length);
    global.crypto.getRandomValues(bytes);
    return bytes;
  };
} else {
  module.exports.randomBytes = function(length) {
    var bytes = new Array(length);
    for (var i = 0; i < length; i++) {
      bytes[i] = Math.floor(Math.random() * 256);
    }
    return bytes;
  };
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],44:[function(require,module,exports){
(function (global){
'use strict';

module.exports = {
  isOpera: function() {
    return global.navigator &&
      /opera/i.test(global.navigator.userAgent);
  }

, isKonqueror: function() {
    return global.navigator &&
      /konqueror/i.test(global.navigator.userAgent);
  }

  // #187 wrap document.domain in try/catch because of WP8 from file:///
, hasDomain: function () {
    // non-browser client always has a domain
    if (!global.document) {
      return true;
    }

    try {
      return !!global.document.domain;
    } catch (e) {
      return false;
    }
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],45:[function(require,module,exports){
'use strict';

var JSON3 = require('json3');

// Some extra characters that Chrome gets wrong, and substitutes with
// something else on the wire.
// eslint-disable-next-line no-control-regex
var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g
  , extraLookup;

// This may be quite slow, so let's delay until user actually uses bad
// characters.
var unrollLookup = function(escapable) {
  var i;
  var unrolled = {};
  var c = [];
  for (i = 0; i < 65536; i++) {
    c.push( String.fromCharCode(i) );
  }
  escapable.lastIndex = 0;
  c.join('').replace(escapable, function(a) {
    unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    return '';
  });
  escapable.lastIndex = 0;
  return unrolled;
};

// Quote string, also taking care of unicode characters that browsers
// often break. Especially, take care of unicode surrogates:
// http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates
module.exports = {
  quote: function(string) {
    var quoted = JSON3.stringify(string);

    // In most cases this should be very fast and good enough.
    extraEscapable.lastIndex = 0;
    if (!extraEscapable.test(quoted)) {
      return quoted;
    }

    if (!extraLookup) {
      extraLookup = unrollLookup(extraEscapable);
    }

    return quoted.replace(extraEscapable, function(a) {
      return extraLookup[a];
    });
  }
};

},{"json3":58}],46:[function(require,module,exports){
(function (global){
'use strict';

var random = require('./random');

var onUnload = {}
  , afterUnload = false
    // detect google chrome packaged apps because they don't allow the 'unload' event
  , isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime
  ;

module.exports = {
  attachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.addEventListener(event, listener, false);
    } else if (global.document && global.attachEvent) {
      // IE quirks.
      // According to: http://stevesouders.com/misc/test-postmessage.php
      // the message gets delivered only to 'document', not 'window'.
      global.document.attachEvent('on' + event, listener);
      // I get 'window' for ie8.
      global.attachEvent('on' + event, listener);
    }
  }

, detachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.removeEventListener(event, listener, false);
    } else if (global.document && global.detachEvent) {
      global.document.detachEvent('on' + event, listener);
      global.detachEvent('on' + event, listener);
    }
  }

, unloadAdd: function(listener) {
    if (isChromePackagedApp) {
      return null;
    }

    var ref = random.string(8);
    onUnload[ref] = listener;
    if (afterUnload) {
      setTimeout(this.triggerUnloadCallbacks, 0);
    }
    return ref;
  }

, unloadDel: function(ref) {
    if (ref in onUnload) {
      delete onUnload[ref];
    }
  }

, triggerUnloadCallbacks: function() {
    for (var ref in onUnload) {
      onUnload[ref]();
      delete onUnload[ref];
    }
  }
};

var unloadTriggered = function() {
  if (afterUnload) {
    return;
  }
  afterUnload = true;
  module.exports.triggerUnloadCallbacks();
};

// 'unload' alone is not reliable in opera within an iframe, but we
// can't use `beforeunload` as IE fires it on javascript: links.
if (!isChromePackagedApp) {
  module.exports.attachEvent('unload', unloadTriggered);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./random":50}],47:[function(require,module,exports){
(function (process,global){
'use strict';

var eventUtils = require('./event')
  , JSON3 = require('json3')
  , browser = require('./browser')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:iframe');
}

module.exports = {
  WPrefix: '_jp'
, currentWindowId: null

, polluteGlobalNamespace: function() {
    if (!(module.exports.WPrefix in global)) {
      global[module.exports.WPrefix] = {};
    }
  }

, postMessage: function(type, data) {
    if (global.parent !== global) {
      global.parent.postMessage(JSON3.stringify({
        windowId: module.exports.currentWindowId
      , type: type
      , data: data || ''
      }), '*');
    } else {
      debug('Cannot postMessage, no parent window.', type, data);
    }
  }

, createIframe: function(iframeUrl, errorCallback) {
    var iframe = global.document.createElement('iframe');
    var tref, unloadRef;
    var unattach = function() {
      debug('unattach');
      clearTimeout(tref);
      // Explorer had problems with that.
      try {
        iframe.onload = null;
      } catch (x) {
        // intentionally empty
      }
      iframe.onerror = null;
    };
    var cleanup = function() {
      debug('cleanup');
      if (iframe) {
        unattach();
        // This timeout makes chrome fire onbeforeunload event
        // within iframe. Without the timeout it goes straight to
        // onunload.
        setTimeout(function() {
          if (iframe) {
            iframe.parentNode.removeChild(iframe);
          }
          iframe = null;
        }, 0);
        eventUtils.unloadDel(unloadRef);
      }
    };
    var onerror = function(err) {
      debug('onerror', err);
      if (iframe) {
        cleanup();
        errorCallback(err);
      }
    };
    var post = function(msg, origin) {
      debug('post', msg, origin);
      setTimeout(function() {
        try {
          // When the iframe is not loaded, IE raises an exception
          // on 'contentWindow'.
          if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage(msg, origin);
          }
        } catch (x) {
          // intentionally empty
        }
      }, 0);
    };

    iframe.src = iframeUrl;
    iframe.style.display = 'none';
    iframe.style.position = 'absolute';
    iframe.onerror = function() {
      onerror('onerror');
    };
    iframe.onload = function() {
      debug('onload');
      // `onload` is triggered before scripts on the iframe are
      // executed. Give it few seconds to actually load stuff.
      clearTimeout(tref);
      tref = setTimeout(function() {
        onerror('onload timeout');
      }, 2000);
    };
    global.document.body.appendChild(iframe);
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }

/* eslint no-undef: "off", new-cap: "off" */
, createHtmlfile: function(iframeUrl, errorCallback) {
    var axo = ['Active'].concat('Object').join('X');
    var doc = new global[axo]('htmlfile');
    var tref, unloadRef;
    var iframe;
    var unattach = function() {
      clearTimeout(tref);
      iframe.onerror = null;
    };
    var cleanup = function() {
      if (doc) {
        unattach();
        eventUtils.unloadDel(unloadRef);
        iframe.parentNode.removeChild(iframe);
        iframe = doc = null;
        CollectGarbage();
      }
    };
    var onerror = function(r) {
      debug('onerror', r);
      if (doc) {
        cleanup();
        errorCallback(r);
      }
    };
    var post = function(msg, origin) {
      try {
        // When the iframe is not loaded, IE raises an exception
        // on 'contentWindow'.
        setTimeout(function() {
          if (iframe && iframe.contentWindow) {
              iframe.contentWindow.postMessage(msg, origin);
          }
        }, 0);
      } catch (x) {
        // intentionally empty
      }
    };

    doc.open();
    doc.write('<html><s' + 'cript>' +
              'document.domain="' + global.document.domain + '";' +
              '</s' + 'cript></html>');
    doc.close();
    doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
    var c = doc.createElement('div');
    doc.body.appendChild(c);
    iframe = doc.createElement('iframe');
    c.appendChild(iframe);
    iframe.src = iframeUrl;
    iframe.onerror = function() {
      onerror('onerror');
    };
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }
};

module.exports.iframeEnabled = false;
if (global.document) {
  // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
  // huge delay, or not at all.
  module.exports.iframeEnabled = (typeof global.postMessage === 'function' ||
    typeof global.postMessage === 'object') && (!browser.isKonqueror());
}

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./browser":44,"./event":46,"debug":55,"json3":58}],48:[function(require,module,exports){
(function (global){
'use strict';

var logObject = {};
['log', 'debug', 'warn'].forEach(function (level) {
  var levelExists;

  try {
    levelExists = global.console && global.console[level] && global.console[level].apply;
  } catch(e) {
    // do nothing
  }

  logObject[level] = levelExists ? function () {
    return global.console[level].apply(global.console, arguments);
  } : (level === 'log' ? function () {} : logObject.log);
});

module.exports = logObject;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],49:[function(require,module,exports){
'use strict';

module.exports = {
  isObject: function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  }

, extend: function(obj) {
    if (!this.isObject(obj)) {
      return obj;
    }
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (Object.prototype.hasOwnProperty.call(source, prop)) {
          obj[prop] = source[prop];
        }
      }
    }
    return obj;
  }
};

},{}],50:[function(require,module,exports){
'use strict';

/* global crypto:true */
var crypto = require('crypto');

// This string has length 32, a power of 2, so the modulus doesn't introduce a
// bias.
var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
module.exports = {
  string: function(length) {
    var max = _randomStringChars.length;
    var bytes = crypto.randomBytes(length);
    var ret = [];
    for (var i = 0; i < length; i++) {
      ret.push(_randomStringChars.substr(bytes[i] % max, 1));
    }
    return ret.join('');
  }

, number: function(max) {
    return Math.floor(Math.random() * max);
  }

, numberString: function(max) {
    var t = ('' + (max - 1)).length;
    var p = new Array(t + 1).join('0');
    return (p + this.number(max)).slice(-t);
  }
};

},{"crypto":43}],51:[function(require,module,exports){
(function (process){
'use strict';

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:transport');
}

module.exports = function(availableTransports) {
  return {
    filterToEnabled: function(transportsWhitelist, info) {
      var transports = {
        main: []
      , facade: []
      };
      if (!transportsWhitelist) {
        transportsWhitelist = [];
      } else if (typeof transportsWhitelist === 'string') {
        transportsWhitelist = [transportsWhitelist];
      }

      availableTransports.forEach(function(trans) {
        if (!trans) {
          return;
        }

        if (trans.transportName === 'websocket' && info.websocket === false) {
          debug('disabled from server', 'websocket');
          return;
        }

        if (transportsWhitelist.length &&
            transportsWhitelist.indexOf(trans.transportName) === -1) {
          debug('not in whitelist', trans.transportName);
          return;
        }

        if (trans.enabled(info)) {
          debug('enabled', trans.transportName);
          transports.main.push(trans);
          if (trans.facadeTransport) {
            transports.facade.push(trans.facadeTransport);
          }
        } else {
          debug('disabled', trans.transportName);
        }
      });
      return transports;
    }
  };
};

}).call(this,{ env: {} })

},{"debug":55}],52:[function(require,module,exports){
(function (process){
'use strict';

var URL = require('url-parse');

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:url');
}

module.exports = {
  getOrigin: function(url) {
    if (!url) {
      return null;
    }

    var p = new URL(url);
    if (p.protocol === 'file:') {
      return null;
    }

    var port = p.port;
    if (!port) {
      port = (p.protocol === 'https:') ? '443' : '80';
    }

    return p.protocol + '//' + p.hostname + ':' + port;
  }

, isOriginEqual: function(a, b) {
    var res = this.getOrigin(a) === this.getOrigin(b);
    debug('same', a, b, res);
    return res;
  }

, isSchemeEqual: function(a, b) {
    return (a.split(':')[0] === b.split(':')[0]);
  }

, addPath: function (url, path) {
    var qs = url.split('?');
    return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
  }

, addQuery: function (url, q) {
    return url + (url.indexOf('?') === -1 ? ('?' + q) : ('&' + q));
  }
};

}).call(this,{ env: {} })

},{"debug":55,"url-parse":61}],53:[function(require,module,exports){
module.exports = '1.4.0';

},{}],54:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

},{}],55:[function(require,module,exports){
(function (process){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  var _console;

  // This hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {} // Swallow
  // XXX (@Qix-) should we be logging these?
  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = require('./common')(exports);
var formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};


}).call(this,{ env: {} })

},{"./common":56}],56:[function(require,module,exports){
"use strict";

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = require('ms');
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      // Disabled?
      if (!debug.enabled) {
        return;
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      var instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @api public
  */


  function disable() {
    createDebug.enable('');
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;


},{"ms":54}],57:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],58:[function(require,module,exports){
(function (global){
/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = typeof define === "function" && define.amd;

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());

    // Native constructor aliases.
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty, forEach, undef;

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
            // The *proto* property cannot be set multiple times in recent
            // versions of Firefox and SeaMonkey.
            "toString": 1
          }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
                result += Escapes[charCode];
                break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root["JSON3"],
        isRestored = false;

    var JSON3 = runInContext(root, (root["JSON3"] = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root["JSON3"] = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],59:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty;

/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String} The decoded string.
 * @api private
 */
function decode(input) {
  return decodeURIComponent(input.replace(/\+/g, ' '));
}

/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */
function querystring(query) {
  var parser = /([^=?&]+)=?([^&]*)/g
    , result = {}
    , part;

  while (part = parser.exec(query)) {
    var key = decode(part[1])
      , value = decode(part[2]);

    //
    // Prevent overriding of existing properties. This ensures that build-in
    // methods like `toString` or __proto__ are not overriden by malicious
    // querystrings.
    //
    if (key in result) continue;
    result[key] = value;
  }

  return result;
}

/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */
function querystringify(obj, prefix) {
  prefix = prefix || '';

  var pairs = [];

  //
  // Optionally prefix with a '?' if needed
  //
  if ('string' !== typeof prefix) prefix = '?';

  for (var key in obj) {
    if (has.call(obj, key)) {
      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
}

//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;

},{}],60:[function(require,module,exports){
'use strict';

/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */
module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;

  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
    return port !== 80;

    case 'https':
    case 'wss':
    return port !== 443;

    case 'ftp':
    return port !== 21;

    case 'gopher':
    return port !== 70;

    case 'file':
    return false;
  }

  return port !== 0;
};

},{}],61:[function(require,module,exports){
(function (global){
'use strict';

var required = require('requires-port')
  , qs = require('querystringify')
  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i
  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;

/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */
var rules = [
  ['#', 'hash'],                        // Extract from the back.
  ['?', 'query'],                       // Extract from the back.
  function sanitize(address) {          // Sanitize what is left of the address
    return address.replace('\\', '/');
  },
  ['/', 'pathname'],                    // Extract from the back.
  ['@', 'auth', 1],                     // Extract from the front.
  [NaN, 'host', undefined, 1, 1],       // Set left over value.
  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
];

/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */
var ignore = { hash: 1, query: 1 };

/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @public
 */
function lolcation(loc) {
  var location = global && global.location || {};
  loc = loc || location;

  var finaldestination = {}
    , type = typeof loc
    , key;

  if ('blob:' === loc.protocol) {
    finaldestination = new Url(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new Url(loc, {});
    for (key in ignore) delete finaldestination[key];
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
}

/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @private
 */
function extractProtocol(address) {
  var match = protocolre.exec(address);

  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}

/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @private
 */
function resolve(relative, base) {
  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
    , i = path.length
    , last = path[i - 1]
    , unshift = false
    , up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');

  return path.join('/');
}

/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * It is worth noting that we should not use `URL` as class name to prevent
 * clashes with the global URL instance that got introduced in browsers.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} location Location defaults for relative paths.
 * @param {Boolean|Function} parser Parser for the query string.
 * @private
 */
function Url(address, location, parser) {
  if (!(this instanceof Url)) {
    return new Url(address, location, parser);
  }

  var relative, extracted, parse, instruction, index, key
    , instructions = rules.slice()
    , type = typeof location
    , url = this
    , i = 0;

  //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //
  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;

  location = lolcation(location);

  //
  // Extract protocol information before running the instructions.
  //
  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest;

  //
  // When the authority component is absent the URL starts with a path
  // component.
  //
  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

  for (; i < instructions.length; i++) {
    instruction = instructions[i];

    if (typeof instruction === 'function') {
      address = instruction(address);
      continue;
    }

    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if ((index = parse.exec(address))) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (
      relative && instruction[3] ? location[key] || '' : ''
    );

    //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //
    if (instruction[4]) url[key] = url[key].toLowerCase();
  }

  //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //
  if (parser) url.query = parser(url.query);

  //
  // If the URL is relative, resolve the pathname against the base URL.
  //
  if (
      relative
    && location.slashes
    && url.pathname.charAt(0) !== '/'
    && (url.pathname !== '' || location.pathname !== '')
  ) {
    url.pathname = resolve(url.pathname, location.pathname);
  }

  //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //
  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  }

  //
  // Parse down the `auth` for the username and password.
  //
  url.username = url.password = '';
  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  //
  // The href is just the compiled result.
  //
  url.href = url.toString();
}

/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL} URL instance for chaining.
 * @public
 */
function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname +':'+ value;
      }

      break;

    case 'hostname':
      url[part] = value;

      if (url.port) value += ':'+ url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
    case 'hash':
      if (value) {
        var char = part === 'pathname' ? '/' : '#';
        url[part] = value.charAt(0) !== char ? char + value : value;
      } else {
        url[part] = value;
      }
      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];

    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  url.href = url.toString();

  return url;
}

/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String} Compiled version of the URL.
 * @public
 */
function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

  var query
    , url = this
    , protocol = url.protocol;

  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

  var result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':'+ url.password;
    result += '@';
  }

  result += url.host + url.pathname;

  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

  if (url.hash) result += url.hash;

  return result;
}

Url.prototype = { set: set, toString: toString };

//
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//
Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.qs = qs;

module.exports = Url;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"querystringify":59,"requires-port":60}]},{},[1])(1)
});


//# sourceMappingURL=sockjs.js.map

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/sockjs-client/dist/sockjs.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/sockjs-client/dist/sockjs.js"); } }(); 
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/strip-ansi/index.js":
/*!******************************************!*\
  !*** ./node_modules/strip-ansi/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ansiRegex = __webpack_require__(/*! ansi-regex */ "./node_modules/ansi-regex/index.js")();

module.exports = function (str) {
	return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/strip-ansi/index.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/strip-ansi/index.js"); } }(); 

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(/*! punycode */ "./node_modules/punycode/punycode.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/url/url.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/url/url.js"); } }(); 

/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/url/util.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/url/util.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/BaseClient.js":
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client/clients/BaseClient.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  function BaseClient() {
    _classCallCheck(this, BaseClient);
  }

  _createClass(BaseClient, null, [{
    key: "getClientPath",
    value: function getClientPath(options) {
      throw new Error('Client needs implementation');
    }
  }]);

  return BaseClient;
}();
 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/clients/BaseClient.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/clients/BaseClient.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js":
/*!***********************************************************!*\
  !*** (webpack)-dev-server/client/clients/SockJSClient.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var SockJS = __webpack_require__(/*! sockjs-client/dist/sockjs */ "./node_modules/sockjs-client/dist/sockjs.js");

var BaseClient = __webpack_require__(/*! ./BaseClient */ "./node_modules/webpack-dev-server/client/clients/BaseClient.js");

module.exports =
/*#__PURE__*/
function (_BaseClient) {
  _inherits(SockJSClient, _BaseClient);

  function SockJSClient(url) {
    var _this;

    _classCallCheck(this, SockJSClient);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SockJSClient).call(this));
    _this.sock = new SockJS(url);

    _this.sock.onerror = function (err) {// TODO: use logger to log the error event once client and client-src
      // are reorganized to have the same directory structure
    };

    return _this;
  }

  _createClass(SockJSClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.sock.onopen = f;
    }
  }, {
    key: "onClose",
    value: function onClose(f) {
      this.sock.onclose = f;
    } // call f with the message string as the first argument

  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.sock.onmessage = function (e) {
        f(e.data);
      };
    }
  }], [{
    key: "getClientPath",
    value: function getClientPath(options) {
      return /*require.resolve*/(/*! ./SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
    }
  }]);

  return SockJSClient;
}(BaseClient);
 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/clients/SockJSClient.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/clients/SockJSClient.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/index.js?http://localhost:8082":
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client?http://localhost:8082 ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__resourceQuery) {
/* global __resourceQuery WorkerGlobalScope self */

/* eslint prefer-destructuring: off */

var stripAnsi = __webpack_require__(/*! strip-ansi */ "./node_modules/strip-ansi/index.js");

var socket = __webpack_require__(/*! ./socket */ "./node_modules/webpack-dev-server/client/socket.js");

var overlay = __webpack_require__(/*! ./overlay */ "./node_modules/webpack-dev-server/client/overlay.js");

var _require = __webpack_require__(/*! ./utils/log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log,
    setLogLevel = _require.setLogLevel;

var sendMessage = __webpack_require__(/*! ./utils/sendMessage */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");

var reloadApp = __webpack_require__(/*! ./utils/reloadApp */ "./node_modules/webpack-dev-server/client/utils/reloadApp.js");

var createSocketUrl = __webpack_require__(/*! ./utils/createSocketUrl */ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js");

var status = {
  isUnloading: false,
  currentHash: ''
};
var options = {
  hot: false,
  hotReload: true,
  liveReload: false,
  initial: true,
  useWarningOverlay: false,
  useErrorOverlay: false,
  useProgress: false
};
var socketUrl = createSocketUrl(__resourceQuery);
self.addEventListener('beforeunload', function () {
  status.isUnloading = true;
});

if (typeof window !== 'undefined') {
  var qs = window.location.search.toLowerCase();
  options.hotReload = qs.indexOf('hotreload=false') === -1;
}

var onSocketMessage = {
  hot: function hot() {
    options.hot = true;
    log.info('[WDS] Hot Module Replacement enabled.');
  },
  liveReload: function liveReload() {
    options.liveReload = true;
    log.info('[WDS] Live Reloading enabled.');
  },
  invalid: function invalid() {
    log.info('[WDS] App updated. Recompiling...'); // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('Invalid');
  },
  hash: function hash(_hash) {
    status.currentHash = _hash;
  },
  'still-ok': function stillOk() {
    log.info('[WDS] Nothing changed.');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('StillOk');
  },
  'log-level': function logLevel(level) {
    var hotCtx = __webpack_require__("./node_modules/webpack/hot sync ^\\.\\/log$");

    if (hotCtx.keys().indexOf('./log') !== -1) {
      hotCtx('./log').setLogLevel(level);
    }

    setLogLevel(level);
  },
  overlay: function overlay(value) {
    if (typeof document !== 'undefined') {
      if (typeof value === 'boolean') {
        options.useWarningOverlay = false;
        options.useErrorOverlay = value;
      } else if (value) {
        options.useWarningOverlay = value.warnings;
        options.useErrorOverlay = value.errors;
      }
    }
  },
  progress: function progress(_progress) {
    if (typeof document !== 'undefined') {
      options.useProgress = _progress;
    }
  },
  'progress-update': function progressUpdate(data) {
    if (options.useProgress) {
      log.info("[WDS] ".concat(data.percent, "% - ").concat(data.msg, "."));
    }

    sendMessage('Progress', data);
  },
  ok: function ok() {
    sendMessage('Ok');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  'content-changed': function contentChanged() {
    log.info('[WDS] Content base changed. Reloading...');
    self.location.reload();
  },
  warnings: function warnings(_warnings) {
    log.warn('[WDS] Warnings while compiling.');

    var strippedWarnings = _warnings.map(function (warning) {
      return stripAnsi(warning);
    });

    sendMessage('Warnings', strippedWarnings);

    for (var i = 0; i < strippedWarnings.length; i++) {
      log.warn(strippedWarnings[i]);
    }

    if (options.useWarningOverlay) {
      overlay.showMessage(_warnings);
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  errors: function errors(_errors) {
    log.error('[WDS] Errors while compiling. Reload prevented.');

    var strippedErrors = _errors.map(function (error) {
      return stripAnsi(error);
    });

    sendMessage('Errors', strippedErrors);

    for (var i = 0; i < strippedErrors.length; i++) {
      log.error(strippedErrors[i]);
    }

    if (options.useErrorOverlay) {
      overlay.showMessage(_errors);
    }

    options.initial = false;
  },
  error: function error(_error) {
    log.error(_error);
  },
  close: function close() {
    log.error('[WDS] Disconnected!');
    sendMessage('Close');
  }
};
socket(socketUrl, onSocketMessage);
 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/index.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/index.js"); } }(); 
/* WEBPACK VAR INJECTION */}.call(this, "?http://localhost:8082"))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/*!**********************************************!*\
  !*** (webpack)-dev-server/client/overlay.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).

var ansiHTML = __webpack_require__(/*! ansi-html */ "./node_modules/ansi-html/index.js");

var _require = __webpack_require__(/*! html-entities */ "./node_modules/html-entities/index.js"),
    AllHtmlEntities = _require.AllHtmlEntities;

var entities = new AllHtmlEntities();
var colors = {
  reset: ['transparent', 'transparent'],
  black: '181818',
  red: 'E36049',
  green: 'B3CB74',
  yellow: 'FFD080',
  blue: '7CAFC2',
  magenta: '7FACCA',
  cyan: 'C3C2EF',
  lightgrey: 'EBE7E3',
  darkgrey: '6D7891'
};
var overlayIframe = null;
var overlayDiv = null;
var lastOnOverlayDivReady = null;
ansiHTML.setColors(colors);

function createOverlayIframe(onIframeLoad) {
  var iframe = document.createElement('iframe');
  iframe.id = 'webpack-dev-server-client-overlay';
  iframe.src = 'about:blank';
  iframe.style.position = 'fixed';
  iframe.style.left = 0;
  iframe.style.top = 0;
  iframe.style.right = 0;
  iframe.style.bottom = 0;
  iframe.style.width = '100vw';
  iframe.style.height = '100vh';
  iframe.style.border = 'none';
  iframe.style.zIndex = 9999999999;
  iframe.onload = onIframeLoad;
  return iframe;
}

function addOverlayDivTo(iframe) {
  var div = iframe.contentDocument.createElement('div');
  div.id = 'webpack-dev-server-client-overlay-div';
  div.style.position = 'fixed';
  div.style.boxSizing = 'border-box';
  div.style.left = 0;
  div.style.top = 0;
  div.style.right = 0;
  div.style.bottom = 0;
  div.style.width = '100vw';
  div.style.height = '100vh';
  div.style.backgroundColor = 'rgba(0, 0, 0, 0.85)';
  div.style.color = '#E8E8E8';
  div.style.fontFamily = 'Menlo, Consolas, monospace';
  div.style.fontSize = 'large';
  div.style.padding = '2rem';
  div.style.lineHeight = '1.2';
  div.style.whiteSpace = 'pre-wrap';
  div.style.overflow = 'auto';
  iframe.contentDocument.body.appendChild(div);
  return div;
}

function ensureOverlayDivExists(onOverlayDivReady) {
  if (overlayDiv) {
    // Everything is ready, call the callback right away.
    onOverlayDivReady(overlayDiv);
    return;
  } // Creating an iframe may be asynchronous so we'll schedule the callback.
  // In case of multiple calls, last callback wins.


  lastOnOverlayDivReady = onOverlayDivReady;

  if (overlayIframe) {
    // We've already created it.
    return;
  } // Create iframe and, when it is ready, a div inside it.


  overlayIframe = createOverlayIframe(function () {
    overlayDiv = addOverlayDivTo(overlayIframe); // Now we can talk!

    lastOnOverlayDivReady(overlayDiv);
  }); // Zalgo alert: onIframeLoad() will be called either synchronously
  // or asynchronously depending on the browser.
  // We delay adding it so `overlayIframe` is set when `onIframeLoad` fires.

  document.body.appendChild(overlayIframe);
} // Successful compilation.


function clear() {
  if (!overlayDiv) {
    // It is not there in the first place.
    return;
  } // Clean up and reset internal state.


  document.body.removeChild(overlayIframe);
  overlayDiv = null;
  overlayIframe = null;
  lastOnOverlayDivReady = null;
} // Compilation with errors (e.g. syntax error or missing modules).


function showMessage(messages) {
  ensureOverlayDivExists(function (div) {
    // Make it look similar to our terminal.
    div.innerHTML = "<span style=\"color: #".concat(colors.red, "\">Failed to compile.</span><br><br>").concat(ansiHTML(entities.encode(messages[0])));
  });
}

module.exports = {
  clear: clear,
  showMessage: showMessage
};
 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/overlay.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/overlay.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/*!*********************************************!*\
  !*** (webpack)-dev-server/client/socket.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__webpack_dev_server_client__) {
/* global __webpack_dev_server_client__ */

/* eslint-disable
  camelcase
*/
// this SockJSClient is here as a default fallback, in case inline mode
// is off or the client is not injected. This will be switched to
// WebsocketClient when it becomes the default
// important: the path to SockJSClient here is made to work in the 'client'
// directory, but is updated via the webpack compilation when compiled from
// the 'client-src' directory

var Client = typeof __webpack_dev_server_client__ !== 'undefined' ? __webpack_dev_server_client__ : // eslint-disable-next-line import/no-unresolved
__webpack_require__(/*! ./clients/SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
var retries = 0;
var client = null;

var socket = function initSocket(url, handlers) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.


    client = null; // After 10 retries stop trying, to prevent logspam.

    if (retries <= 10) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-mixed-operators, no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      setTimeout(function () {
        socket(url, handlers);
      }, retryInMs);
    }
  });
  client.onMessage(function (data) {
    var msg = JSON.parse(data);

    if (handlers[msg.type]) {
      handlers[msg.type](msg.data);
    }
  });
};

module.exports = socket;
 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/socket.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/socket.js"); } }(); 
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! (webpack)-dev-server/client/clients/SockJSClient.js */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js")))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":
/*!************************************************************!*\
  !*** (webpack)-dev-server/client/utils/createSocketUrl.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global self */

var url = __webpack_require__(/*! url */ "./node_modules/url/url.js");

var getCurrentScriptSource = __webpack_require__(/*! ./getCurrentScriptSource */ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");

function createSocketUrl(resourceQuery, currentLocation) {
  var urlParts;

  if (typeof resourceQuery === 'string' && resourceQuery !== '') {
    // If this bundle is inlined, use the resource query to get the correct url.
    // format is like `?http://0.0.0.0:8096&sockPort=8097&sockHost=localhost`
    urlParts = url.parse(resourceQuery // strip leading `?` from query string to get a valid URL
    .substr(1) // replace first `&` with `?` to have a valid query string
    .replace('&', '?'), true);
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptHost = getCurrentScriptSource();
    urlParts = url.parse(scriptHost || '/', true, true);
  } // Use parameter to allow passing location in unit tests


  if (typeof currentLocation === 'string' && currentLocation !== '') {
    currentLocation = url.parse(currentLocation);
  } else {
    currentLocation = self.location;
  }

  return getSocketUrl(urlParts, currentLocation);
}
/*
 * Gets socket URL based on Script Source/Location
 * (scriptSrc: URL, location: URL) -> URL
 */


function getSocketUrl(urlParts, loc) {
  var auth = urlParts.auth,
      query = urlParts.query;
  var hostname = urlParts.hostname,
      protocol = urlParts.protocol,
      port = urlParts.port;

  if (!port || port === '0') {
    port = loc.port;
  } // check ipv4 and ipv6 `all hostname`
  // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384


  if ((hostname === '0.0.0.0' || hostname === '::') && loc.hostname && loc.protocol.indexOf('http') === 0) {
    hostname = loc.hostname;
  } // `hostname` can be empty when the script path is relative. In that case, specifying
  // a protocol would result in an invalid URL.
  // When https is used in the app, secure websockets are always necessary
  // because the browser doesn't accept non-secure websockets.


  if (hostname && hostname !== '127.0.0.1' && (loc.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {
    protocol = loc.protocol;
  } // all of these sock url params are optionally passed in through
  // resourceQuery, so we need to fall back to the default if
  // they are not provided


  var sockHost = query.sockHost || hostname;
  var sockPath = query.sockPath || '/sockjs-node';
  var sockPort = query.sockPort || port;

  if (sockPort === 'location') {
    sockPort = loc.port;
  }

  return url.format({
    protocol: protocol,
    auth: auth,
    hostname: sockHost,
    port: sockPort,
    // If sockPath is provided it'll be passed in via the resourceQuery as a
    // query param so it has to be parsed out of the querystring in order for the
    // client to open the socket to the correct location.
    pathname: sockPath
  });
}

module.exports = createSocketUrl;
 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/utils/createSocketUrl.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/utils/createSocketUrl.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!*******************************************************************!*\
  !*** (webpack)-dev-server/client/utils/getCurrentScriptSource.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute('src');
  } // Fall back to getting all scripts in the document.


  var scriptElements = document.scripts || [];
  var currentScript = scriptElements[scriptElements.length - 1];

  if (currentScript) {
    return currentScript.getAttribute('src');
  } // Fail as there was no script to use.


  throw new Error('[WDS] Failed to get current script source.');
}

module.exports = getCurrentScriptSource;
 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/log.js":
/*!************************************************!*\
  !*** (webpack)-dev-server/client/utils/log.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var log = __webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js").getLogger('webpack-dev-server');

var INFO = 'info';
var WARN = 'warn';
var ERROR = 'error';
var DEBUG = 'debug';
var TRACE = 'trace';
var SILENT = 'silent'; // deprecated
// TODO: remove these at major released
// https://github.com/webpack/webpack-dev-server/pull/1825

var WARNING = 'warning';
var NONE = 'none'; // Set the default log level

log.setDefaultLevel(INFO);

function setLogLevel(level) {
  switch (level) {
    case INFO:
    case WARN:
    case ERROR:
    case DEBUG:
    case TRACE:
      log.setLevel(level);
      break;
    // deprecated

    case WARNING:
      // loglevel's warning name is different from webpack's
      log.setLevel('warn');
      break;
    // deprecated

    case NONE:
    case SILENT:
      log.disableAll();
      break;

    default:
      log.error("[WDS] Unknown clientLogLevel '".concat(level, "'"));
  }
}

module.exports = {
  log: log,
  setLogLevel: setLogLevel
};
 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/utils/log.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/utils/log.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!******************************************************!*\
  !*** (webpack)-dev-server/client/utils/reloadApp.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global WorkerGlobalScope self */

var _require = __webpack_require__(/*! ./log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log;

function reloadApp(_ref, _ref2) {
  var hotReload = _ref.hotReload,
      hot = _ref.hot,
      liveReload = _ref.liveReload;
  var isUnloading = _ref2.isUnloading,
      currentHash = _ref2.currentHash;

  if (isUnloading || !hotReload) {
    return;
  }

  if (hot) {
    log.info('[WDS] App hot update...');

    var hotEmitter = __webpack_require__(/*! webpack/hot/emitter */ "./node_modules/webpack/hot/emitter.js");

    hotEmitter.emit('webpackHotUpdate', currentHash);

    if (typeof self !== 'undefined' && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(currentHash), '*');
    }
  } // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload) {
      var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)

      var intervalId = self.setInterval(function () {
        if (rootWindow.location.protocol !== 'about:') {
          // reload immediately if protocol is valid
          applyReload(rootWindow, intervalId);
        } else {
          rootWindow = rootWindow.parent;

          if (rootWindow.parent === rootWindow) {
            // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
            applyReload(rootWindow, intervalId);
          }
        }
      });
    }

  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    log.info('[WDS] App updated. Reloading...');
    rootWindow.location.reload();
  }
}

module.exports = reloadApp;
 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/utils/reloadApp.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/utils/reloadApp.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!********************************************************!*\
  !*** (webpack)-dev-server/client/utils/sendMessage.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global __resourceQuery WorkerGlobalScope self */
// Send messages to the outside, so plugins can consume it.

function sendMsg(type, data) {
  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, '*');
  }
}

module.exports = sendMsg;
 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/utils/sendMessage.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/utils/sendMessage.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/buildin/global.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/buildin/global.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/buildin/module.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/buildin/module.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack/hot sync ^\\.\\/log$":
/*!*************************************************!*\
  !*** (webpack)/hot sync nonrecursive ^\.\/log$ ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./log": "./node_modules/webpack/hot/log.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/webpack/hot sync ^\\.\\/log$";

/***/ }),

/***/ "./node_modules/webpack/hot/dev-server.js":
/*!***********************************!*\
  !*** (webpack)/hot/dev-server.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
/*globals window __webpack_hash__ */
if (true) {
	var lastHash;
	var upToDate = function upToDate() {
		return lastHash.indexOf(__webpack_require__.h()) >= 0;
	};
	var log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");
	var check = function check() {
		module.hot
			.check(true)
			.then(function(updatedModules) {
				if (!updatedModules) {
					log("warning", "[HMR] Cannot find update. Need to do a full reload!");
					log(
						"warning",
						"[HMR] (Probably because of restarting the webpack-dev-server)"
					);
					window.location.reload();
					return;
				}

				if (!upToDate()) {
					check();
				}

				__webpack_require__(/*! ./log-apply-result */ "./node_modules/webpack/hot/log-apply-result.js")(updatedModules, updatedModules);

				if (upToDate()) {
					log("info", "[HMR] App is up to date.");
				}
			})
			.catch(function(err) {
				var status = module.hot.status();
				if (["abort", "fail"].indexOf(status) >= 0) {
					log(
						"warning",
						"[HMR] Cannot apply update. Need to do a full reload!"
					);
					log("warning", "[HMR] " + log.formatError(err));
					window.location.reload();
				} else {
					log("warning", "[HMR] Update failed: " + log.formatError(err));
				}
			});
	};
	var hotEmitter = __webpack_require__(/*! ./emitter */ "./node_modules/webpack/hot/emitter.js");
	hotEmitter.on("webpackHotUpdate", function(currentHash) {
		lastHash = currentHash;
		if (!upToDate() && module.hot.status() === "idle") {
			log("info", "[HMR] Checking for updates on the server...");
			check();
		}
	});
	log("info", "[HMR] Waiting for update signal from WDS...");
} else {}

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/hot/dev-server.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/hot/dev-server.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/*!********************************!*\
  !*** (webpack)/hot/emitter.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");
module.exports = new EventEmitter();

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/hot/emitter.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/hot/emitter.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack/hot/log-apply-result.js":
/*!*****************************************!*\
  !*** (webpack)/hot/log-apply-result.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(updatedModules, renewedModules) {
	var unacceptedModules = updatedModules.filter(function(moduleId) {
		return renewedModules && renewedModules.indexOf(moduleId) < 0;
	});
	var log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");

	if (unacceptedModules.length > 0) {
		log(
			"warning",
			"[HMR] The following modules couldn't be hot updated: (They would need a full reload!)"
		);
		unacceptedModules.forEach(function(moduleId) {
			log("warning", "[HMR]  - " + moduleId);
		});
	}

	if (!renewedModules || renewedModules.length === 0) {
		log("info", "[HMR] Nothing hot updated.");
	} else {
		log("info", "[HMR] Updated modules:");
		renewedModules.forEach(function(moduleId) {
			if (typeof moduleId === "string" && moduleId.indexOf("!") !== -1) {
				var parts = moduleId.split("!");
				log.groupCollapsed("info", "[HMR]  - " + parts.pop());
				log("info", "[HMR]  - " + moduleId);
				log.groupEnd("info");
			} else {
				log("info", "[HMR]  - " + moduleId);
			}
		});
		var numberIds = renewedModules.every(function(moduleId) {
			return typeof moduleId === "number";
		});
		if (numberIds)
			log(
				"info",
				"[HMR] Consider using the NamedModulesPlugin for module names."
			);
	}
};

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/hot/log-apply-result.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/hot/log-apply-result.js"); } }(); 

/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!****************************!*\
  !*** (webpack)/hot/log.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

var logLevel = "info";

function dummy() {}

function shouldLog(level) {
	var shouldLog =
		(logLevel === "info" && level === "info") ||
		(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning") ||
		(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error");
	return shouldLog;
}

function logGroup(logFn) {
	return function(level, msg) {
		if (shouldLog(level)) {
			logFn(msg);
		}
	};
}

module.exports = function(level, msg) {
	if (shouldLog(level)) {
		if (level === "info") {
			console.log(msg);
		} else if (level === "warning") {
			console.warn(msg);
		} else if (level === "error") {
			console.error(msg);
		}
	}
};

/* eslint-disable node/no-unsupported-features/node-builtins */
var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
/* eslint-enable node/no-unsupported-features/node-builtins */

module.exports.group = logGroup(group);

module.exports.groupCollapsed = logGroup(groupCollapsed);

module.exports.groupEnd = logGroup(groupEnd);

module.exports.setLogLevel = function(level) {
	logLevel = level;
};

module.exports.formatError = function(err) {
	var message = err.message;
	var stack = err.stack;
	if (!stack) {
		return message;
	} else if (stack.indexOf(message) < 0) {
		return message + "\n" + stack;
	} else {
		return stack;
	}
};

 void function register() { /* react-hot-loader/webpack */ var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined; if (!reactHotLoader) { return; } /* eslint-disable camelcase, no-undef */ var webpackExports = typeof __webpack_exports__ !== 'undefined' ? __webpack_exports__ : exports; /* eslint-enable camelcase, no-undef */ if (!webpackExports) { return; } if (typeof webpackExports === 'function') { reactHotLoader.register(webpackExports, 'module.exports', "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/hot/log.js"); return; } /* eslint-disable no-restricted-syntax */ for (var key in webpackExports) { /* eslint-enable no-restricted-syntax */ if (!Object.prototype.hasOwnProperty.call(webpackExports, key)) { continue; } var namedExport = void 0; try { namedExport = webpackExports[key]; } catch (err) { continue; } reactHotLoader.register(namedExport, key, "/home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/hot/log.js"); } }(); 

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _looker_extension_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @looker/extension-sdk */ "./node_modules/@looker/extension-sdk/lib/index.js");
/* harmony import */ var _looker_extension_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_looker_extension_sdk__WEBPACK_IMPORTED_MODULE_0__);
var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {
  return a;
};

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */


(function () {
  // Extensions currently require a chatty connection with the Looker host.
  // Removing this requirement currently under considertion.
  Object(_looker_extension_sdk__WEBPACK_IMPORTED_MODULE_0__["connectExtensionHost"])();
  document.write(`
  <style>
    body {
      font-family: -apple-system, system-ui, BlinkMacSystemFont;
      text-align:center;
      font-variant-numeric: tabular-nums;
    }
    .butt {
      font-size: 100px;
      background: salmon;
      border-radius: 250px;
      padding: 20px;
      display: inline-block;
      min-width: 200px;
      user-select: none;
    }
    .butt:active {
      background-color: orangered;
    }
    .webpage {
      padding: 100px 0;
    }
  </style>
  <div class="webpage">
    <h1>I love apps!</h1>
    <h3>This number will increase by one upon every click:</h3>
    <div class="butt" onclick="event.target.innerHTML = +event.target.innerHTML + (event.shiftKey ? -1 : 1); event.preventDefault
    ()">0</div>
    <h3>I hope you had fun on this Looker application.</h3>
    <img width="64" src="https://www.archiveteam.org/images/8/8b/Underconstruction.gif" />
  </div>
`);
})();

/***/ }),

/***/ 0:
/*!**********************************************************************************************************!*\
  !*** multi (webpack)-dev-server/client?http://localhost:8082 (webpack)/hot/dev-server.js ./src/index.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! /home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack-dev-server/client/index.js?http://localhost:8082 */"./node_modules/webpack-dev-server/client/index.js?http://localhost:8082");
__webpack_require__(/*! /home/ad.chi/erladou/git/looker/exercise1/extension-basic/node_modules/webpack/hot/dev-server.js */"./node_modules/webpack/hot/dev-server.js");
module.exports = __webpack_require__(/*! /home/ad.chi/erladou/git/looker/exercise1/extension-basic/src/index.js */"./src/index.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,